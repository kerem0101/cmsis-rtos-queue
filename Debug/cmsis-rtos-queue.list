
cmsis-rtos-queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049ec  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004aac  08004aac  00014aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bb0  08004bb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004bb0  08004bb0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bb0  08004bb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bb0  08004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bb4  08004bb4  00014bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010a4  20000070  08004c28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001114  08004c28  00021114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e09  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000295e  00000000  00000000  00031ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00034800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  000358d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012aee  00000000  00000000  00036888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c2e  00000000  00000000  00049376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000713ef  00000000  00000000  0005bfa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd393  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f98  00000000  00000000  000cd3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004a94 	.word	0x08004a94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004a94 	.word	0x08004a94

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	4a06      	ldr	r2, [pc, #24]	; (800026c <vApplicationGetIdleTaskMemory+0x28>)
 8000254:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	4a05      	ldr	r2, [pc, #20]	; (8000270 <vApplicationGetIdleTaskMemory+0x2c>)
 800025a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2280      	movs	r2, #128	; 0x80
 8000260:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	b004      	add	sp, #16
 8000268:	bd80      	pop	{r7, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	2000008c 	.word	0x2000008c
 8000270:	200000e0 	.word	0x200000e0

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b5b0      	push	{r4, r5, r7, lr}
 8000276:	b092      	sub	sp, #72	; 0x48
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027a:	f000 fae5 	bl	8000848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027e:	f000 f843 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000282:	f000 f8bd 	bl	8000400 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000286:	f000 f88b 	bl	80003a0 <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue */
  osMessageQDef(myQueue, 5, uint16_t);
 800028a:	2138      	movs	r1, #56	; 0x38
 800028c:	187b      	adds	r3, r7, r1
 800028e:	4a18      	ldr	r2, [pc, #96]	; (80002f0 <main+0x7c>)
 8000290:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000292:	c331      	stmia	r3!, {r0, r4, r5}
 8000294:	6812      	ldr	r2, [r2, #0]
 8000296:	601a      	str	r2, [r3, #0]
  myQueueHandle = osMessageCreate(osMessageQ(myQueue), NULL);
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2100      	movs	r1, #0
 800029c:	0018      	movs	r0, r3
 800029e:	f002 f8cd 	bl	800243c <osMessageCreate>
 80002a2:	0002      	movs	r2, r0
 80002a4:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <main+0x80>)
 80002a6:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of SenderTask */
  osThreadDef(SenderTask, Sender, osPriorityNormal, 0, 128);
 80002a8:	211c      	movs	r1, #28
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	4a12      	ldr	r2, [pc, #72]	; (80002f8 <main+0x84>)
 80002ae:	ca31      	ldmia	r2!, {r0, r4, r5}
 80002b0:	c331      	stmia	r3!, {r0, r4, r5}
 80002b2:	ca31      	ldmia	r2!, {r0, r4, r5}
 80002b4:	c331      	stmia	r3!, {r0, r4, r5}
 80002b6:	6812      	ldr	r2, [r2, #0]
 80002b8:	601a      	str	r2, [r3, #0]
  SenderTaskHandle = osThreadCreate(osThread(SenderTask), NULL);
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2100      	movs	r1, #0
 80002be:	0018      	movs	r0, r3
 80002c0:	f002 f86f 	bl	80023a2 <osThreadCreate>
 80002c4:	0002      	movs	r2, r0
 80002c6:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <main+0x88>)
 80002c8:	601a      	str	r2, [r3, #0]

  /* definition and creation of ReceiverTask */
  osThreadDef(ReceiverTask, Receiver, osPriorityNormal, 0, 128);
 80002ca:	003b      	movs	r3, r7
 80002cc:	4a0c      	ldr	r2, [pc, #48]	; (8000300 <main+0x8c>)
 80002ce:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002d0:	c313      	stmia	r3!, {r0, r1, r4}
 80002d2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002d4:	c313      	stmia	r3!, {r0, r1, r4}
 80002d6:	6812      	ldr	r2, [r2, #0]
 80002d8:	601a      	str	r2, [r3, #0]
  ReceiverTaskHandle = osThreadCreate(osThread(ReceiverTask), NULL);
 80002da:	003b      	movs	r3, r7
 80002dc:	2100      	movs	r1, #0
 80002de:	0018      	movs	r0, r3
 80002e0:	f002 f85f 	bl	80023a2 <osThreadCreate>
 80002e4:	0002      	movs	r2, r0
 80002e6:	4b07      	ldr	r3, [pc, #28]	; (8000304 <main+0x90>)
 80002e8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002ea:	f002 f852 	bl	8002392 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ee:	e7fe      	b.n	80002ee <main+0x7a>
 80002f0:	08004ac8 	.word	0x08004ac8
 80002f4:	2000036c 	.word	0x2000036c
 80002f8:	08004ad8 	.word	0x08004ad8
 80002fc:	20000364 	.word	0x20000364
 8000300:	08004af4 	.word	0x08004af4
 8000304:	20000368 	.word	0x20000368

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b590      	push	{r4, r7, lr}
 800030a:	b091      	sub	sp, #68	; 0x44
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	2410      	movs	r4, #16
 8000310:	193b      	adds	r3, r7, r4
 8000312:	0018      	movs	r0, r3
 8000314:	2330      	movs	r3, #48	; 0x30
 8000316:	001a      	movs	r2, r3
 8000318:	2100      	movs	r1, #0
 800031a:	f003 ff52 	bl	80041c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031e:	003b      	movs	r3, r7
 8000320:	0018      	movs	r0, r3
 8000322:	2310      	movs	r3, #16
 8000324:	001a      	movs	r2, r3
 8000326:	2100      	movs	r1, #0
 8000328:	f003 ff4b 	bl	80041c2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032c:	0021      	movs	r1, r4
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2202      	movs	r2, #2
 8000332:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2201      	movs	r2, #1
 8000338:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2210      	movs	r2, #16
 800033e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2202      	movs	r2, #2
 8000344:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2280      	movs	r2, #128	; 0x80
 800034a:	0212      	lsls	r2, r2, #8
 800034c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2280      	movs	r2, #128	; 0x80
 8000352:	0352      	lsls	r2, r2, #13
 8000354:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2200      	movs	r2, #0
 800035a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035c:	187b      	adds	r3, r7, r1
 800035e:	0018      	movs	r0, r3
 8000360:	f000 fcde 	bl	8000d20 <HAL_RCC_OscConfig>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000368:	f000 f91c 	bl	80005a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036c:	003b      	movs	r3, r7
 800036e:	2207      	movs	r2, #7
 8000370:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000372:	003b      	movs	r3, r7
 8000374:	2202      	movs	r2, #2
 8000376:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000378:	003b      	movs	r3, r7
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037e:	003b      	movs	r3, r7
 8000380:	2200      	movs	r2, #0
 8000382:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000384:	003b      	movs	r3, r7
 8000386:	2101      	movs	r1, #1
 8000388:	0018      	movs	r0, r3
 800038a:	f000 ffe7 	bl	800135c <HAL_RCC_ClockConfig>
 800038e:	1e03      	subs	r3, r0, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000392:	f000 f907 	bl	80005a4 <Error_Handler>
  }
}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	46bd      	mov	sp, r7
 800039a:	b011      	add	sp, #68	; 0x44
 800039c:	bd90      	pop	{r4, r7, pc}
	...

080003a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003a6:	4a15      	ldr	r2, [pc, #84]	; (80003fc <MX_USART2_UART_Init+0x5c>)
 80003a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003ac:	2296      	movs	r2, #150	; 0x96
 80003ae:	0212      	lsls	r2, r2, #8
 80003b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003c6:	220c      	movs	r2, #12
 80003c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003d8:	2200      	movs	r2, #0
 80003da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003de:	2200      	movs	r2, #0
 80003e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003e2:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003e4:	0018      	movs	r0, r3
 80003e6:	f001 fb97 	bl	8001b18 <HAL_UART_Init>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003ee:	f000 f8d9 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	200002e0 	.word	0x200002e0
 80003fc:	40004400 	.word	0x40004400

08000400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000400:	b590      	push	{r4, r7, lr}
 8000402:	b089      	sub	sp, #36	; 0x24
 8000404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000406:	240c      	movs	r4, #12
 8000408:	193b      	adds	r3, r7, r4
 800040a:	0018      	movs	r0, r3
 800040c:	2314      	movs	r3, #20
 800040e:	001a      	movs	r2, r3
 8000410:	2100      	movs	r1, #0
 8000412:	f003 fed6 	bl	80041c2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000416:	4b2d      	ldr	r3, [pc, #180]	; (80004cc <MX_GPIO_Init+0xcc>)
 8000418:	695a      	ldr	r2, [r3, #20]
 800041a:	4b2c      	ldr	r3, [pc, #176]	; (80004cc <MX_GPIO_Init+0xcc>)
 800041c:	2180      	movs	r1, #128	; 0x80
 800041e:	0309      	lsls	r1, r1, #12
 8000420:	430a      	orrs	r2, r1
 8000422:	615a      	str	r2, [r3, #20]
 8000424:	4b29      	ldr	r3, [pc, #164]	; (80004cc <MX_GPIO_Init+0xcc>)
 8000426:	695a      	ldr	r2, [r3, #20]
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	031b      	lsls	r3, r3, #12
 800042c:	4013      	ands	r3, r2
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000432:	4b26      	ldr	r3, [pc, #152]	; (80004cc <MX_GPIO_Init+0xcc>)
 8000434:	695a      	ldr	r2, [r3, #20]
 8000436:	4b25      	ldr	r3, [pc, #148]	; (80004cc <MX_GPIO_Init+0xcc>)
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	03c9      	lsls	r1, r1, #15
 800043c:	430a      	orrs	r2, r1
 800043e:	615a      	str	r2, [r3, #20]
 8000440:	4b22      	ldr	r3, [pc, #136]	; (80004cc <MX_GPIO_Init+0xcc>)
 8000442:	695a      	ldr	r2, [r3, #20]
 8000444:	2380      	movs	r3, #128	; 0x80
 8000446:	03db      	lsls	r3, r3, #15
 8000448:	4013      	ands	r3, r2
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b1f      	ldr	r3, [pc, #124]	; (80004cc <MX_GPIO_Init+0xcc>)
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	4b1e      	ldr	r3, [pc, #120]	; (80004cc <MX_GPIO_Init+0xcc>)
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	0289      	lsls	r1, r1, #10
 8000458:	430a      	orrs	r2, r1
 800045a:	615a      	str	r2, [r3, #20]
 800045c:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <MX_GPIO_Init+0xcc>)
 800045e:	695a      	ldr	r2, [r3, #20]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	029b      	lsls	r3, r3, #10
 8000464:	4013      	ands	r3, r2
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800046a:	2390      	movs	r3, #144	; 0x90
 800046c:	05db      	lsls	r3, r3, #23
 800046e:	2200      	movs	r2, #0
 8000470:	2120      	movs	r1, #32
 8000472:	0018      	movs	r0, r3
 8000474:	f000 fc36 	bl	8000ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000478:	193b      	adds	r3, r7, r4
 800047a:	2280      	movs	r2, #128	; 0x80
 800047c:	0192      	lsls	r2, r2, #6
 800047e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000480:	193b      	adds	r3, r7, r4
 8000482:	2284      	movs	r2, #132	; 0x84
 8000484:	0392      	lsls	r2, r2, #14
 8000486:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800048e:	193b      	adds	r3, r7, r4
 8000490:	4a0f      	ldr	r2, [pc, #60]	; (80004d0 <MX_GPIO_Init+0xd0>)
 8000492:	0019      	movs	r1, r3
 8000494:	0010      	movs	r0, r2
 8000496:	f000 fab5 	bl	8000a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800049a:	0021      	movs	r1, r4
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2220      	movs	r2, #32
 80004a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2201      	movs	r2, #1
 80004a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2200      	movs	r2, #0
 80004b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004b4:	187a      	adds	r2, r7, r1
 80004b6:	2390      	movs	r3, #144	; 0x90
 80004b8:	05db      	lsls	r3, r3, #23
 80004ba:	0011      	movs	r1, r2
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 faa1 	bl	8000a04 <HAL_GPIO_Init>

}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b009      	add	sp, #36	; 0x24
 80004c8:	bd90      	pop	{r4, r7, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	40021000 	.word	0x40021000
 80004d0:	48000800 	.word	0x48000800

080004d4 <Sender>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Sender */
void Sender(void const * argument)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//osDelay(2000);
	uint32_t sendVal;
	for(uint32_t i = 1; i<=10; ++i){
 80004dc:	2301      	movs	r3, #1
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	e00f      	b.n	8000502 <Sender+0x2e>
		sendVal = i*10;
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	0013      	movs	r3, r2
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	189b      	adds	r3, r3, r2
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	60bb      	str	r3, [r7, #8]
		osMessagePut(myQueueHandle, sendVal, 100);
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <Sender+0x38>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	68b9      	ldr	r1, [r7, #8]
 80004f4:	2264      	movs	r2, #100	; 0x64
 80004f6:	0018      	movs	r0, r3
 80004f8:	f001 ffc8 	bl	800248c <osMessagePut>
	for(uint32_t i = 1; i<=10; ++i){
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	3301      	adds	r3, #1
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	2b0a      	cmp	r3, #10
 8000506:	d9ec      	bls.n	80004e2 <Sender+0xe>
	}
  /* Infinite loop */
  for(;;)
 8000508:	e7fe      	b.n	8000508 <Sender+0x34>
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	2000036c 	.word	0x2000036c

08000510 <Receiver>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Receiver */
void Receiver(void const * argument)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b093      	sub	sp, #76	; 0x4c
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	osEvent message;
	char string[50];
  for(;;)
  {
	  message = osMessageGet(myQueueHandle, 5000);
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <Receiver+0x5c>)
 800051a:	6819      	ldr	r1, [r3, #0]
 800051c:	243c      	movs	r4, #60	; 0x3c
 800051e:	193b      	adds	r3, r7, r4
 8000520:	4a13      	ldr	r2, [pc, #76]	; (8000570 <Receiver+0x60>)
 8000522:	0018      	movs	r0, r3
 8000524:	f001 ffee 	bl	8002504 <osMessageGet>
	  if(message.status == osEventMessage){
 8000528:	0022      	movs	r2, r4
 800052a:	18bb      	adds	r3, r7, r2
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b10      	cmp	r3, #16
 8000530:	d114      	bne.n	800055c <Receiver+0x4c>
		  sprintf(string, "Recieved value: %u\r\n", message.value.v);
 8000532:	18bb      	adds	r3, r7, r2
 8000534:	685a      	ldr	r2, [r3, #4]
 8000536:	490f      	ldr	r1, [pc, #60]	; (8000574 <Receiver+0x64>)
 8000538:	2408      	movs	r4, #8
 800053a:	193b      	adds	r3, r7, r4
 800053c:	0018      	movs	r0, r3
 800053e:	f003 fe49 	bl	80041d4 <siprintf>

		  uartPrint(string);
 8000542:	193b      	adds	r3, r7, r4
 8000544:	0018      	movs	r0, r3
 8000546:	f7ff fddf 	bl	8000108 <strlen>
 800054a:	0003      	movs	r3, r0
 800054c:	b29a      	uxth	r2, r3
 800054e:	23fa      	movs	r3, #250	; 0xfa
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	1939      	adds	r1, r7, r4
 8000554:	4808      	ldr	r0, [pc, #32]	; (8000578 <Receiver+0x68>)
 8000556:	f001 fb33 	bl	8001bc0 <HAL_UART_Transmit>
 800055a:	e7dd      	b.n	8000518 <Receiver+0x8>
	  }
	  else{
		  uartPrint("Queue is empty!\r\n");
 800055c:	23fa      	movs	r3, #250	; 0xfa
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	4906      	ldr	r1, [pc, #24]	; (800057c <Receiver+0x6c>)
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <Receiver+0x68>)
 8000564:	2211      	movs	r2, #17
 8000566:	f001 fb2b 	bl	8001bc0 <HAL_UART_Transmit>
	  message = osMessageGet(myQueueHandle, 5000);
 800056a:	e7d5      	b.n	8000518 <Receiver+0x8>
 800056c:	2000036c 	.word	0x2000036c
 8000570:	00001388 	.word	0x00001388
 8000574:	08004b10 	.word	0x08004b10
 8000578:	200002e0 	.word	0x200002e0
 800057c:	08004b28 	.word	0x08004b28

08000580 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d101      	bne.n	8000596 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000592:	f000 f96d 	bl	8000870 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b002      	add	sp, #8
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	40012c00 	.word	0x40012c00

080005a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
}
 80005aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ac:	e7fe      	b.n	80005ac <Error_Handler+0x8>
	...

080005b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <HAL_MspInit+0x50>)
 80005b8:	699a      	ldr	r2, [r3, #24]
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <HAL_MspInit+0x50>)
 80005bc:	2101      	movs	r1, #1
 80005be:	430a      	orrs	r2, r1
 80005c0:	619a      	str	r2, [r3, #24]
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <HAL_MspInit+0x50>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	2201      	movs	r2, #1
 80005c8:	4013      	ands	r3, r2
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <HAL_MspInit+0x50>)
 80005d0:	69da      	ldr	r2, [r3, #28]
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_MspInit+0x50>)
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	0549      	lsls	r1, r1, #21
 80005d8:	430a      	orrs	r2, r1
 80005da:	61da      	str	r2, [r3, #28]
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_MspInit+0x50>)
 80005de:	69da      	ldr	r2, [r3, #28]
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	055b      	lsls	r3, r3, #21
 80005e4:	4013      	ands	r3, r2
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80005ea:	2302      	movs	r3, #2
 80005ec:	425b      	negs	r3, r3
 80005ee:	2200      	movs	r2, #0
 80005f0:	2103      	movs	r1, #3
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 f9e0 	bl	80009b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b002      	add	sp, #8
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000

08000604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b08b      	sub	sp, #44	; 0x2c
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	2414      	movs	r4, #20
 800060e:	193b      	adds	r3, r7, r4
 8000610:	0018      	movs	r0, r3
 8000612:	2314      	movs	r3, #20
 8000614:	001a      	movs	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	f003 fdd3 	bl	80041c2 <memset>
  if(huart->Instance==USART2)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <HAL_UART_MspInit+0x90>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d132      	bne.n	800068c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <HAL_UART_MspInit+0x94>)
 8000628:	69da      	ldr	r2, [r3, #28]
 800062a:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <HAL_UART_MspInit+0x94>)
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	0289      	lsls	r1, r1, #10
 8000630:	430a      	orrs	r2, r1
 8000632:	61da      	str	r2, [r3, #28]
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <HAL_UART_MspInit+0x94>)
 8000636:	69da      	ldr	r2, [r3, #28]
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	029b      	lsls	r3, r3, #10
 800063c:	4013      	ands	r3, r2
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <HAL_UART_MspInit+0x94>)
 8000644:	695a      	ldr	r2, [r3, #20]
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <HAL_UART_MspInit+0x94>)
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	0289      	lsls	r1, r1, #10
 800064c:	430a      	orrs	r2, r1
 800064e:	615a      	str	r2, [r3, #20]
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <HAL_UART_MspInit+0x94>)
 8000652:	695a      	ldr	r2, [r3, #20]
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	029b      	lsls	r3, r3, #10
 8000658:	4013      	ands	r3, r2
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800065e:	0021      	movs	r1, r4
 8000660:	187b      	adds	r3, r7, r1
 8000662:	220c      	movs	r2, #12
 8000664:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2202      	movs	r2, #2
 800066a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2203      	movs	r2, #3
 8000676:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2201      	movs	r2, #1
 800067c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	187a      	adds	r2, r7, r1
 8000680:	2390      	movs	r3, #144	; 0x90
 8000682:	05db      	lsls	r3, r3, #23
 8000684:	0011      	movs	r1, r2
 8000686:	0018      	movs	r0, r3
 8000688:	f000 f9bc 	bl	8000a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b00b      	add	sp, #44	; 0x2c
 8000692:	bd90      	pop	{r4, r7, pc}
 8000694:	40004400 	.word	0x40004400
 8000698:	40021000 	.word	0x40021000

0800069c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2200      	movs	r2, #0
 80006b0:	0019      	movs	r1, r3
 80006b2:	200d      	movs	r0, #13
 80006b4:	f000 f980 	bl	80009b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80006b8:	200d      	movs	r0, #13
 80006ba:	f000 f992 	bl	80009e2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006be:	4b21      	ldr	r3, [pc, #132]	; (8000744 <HAL_InitTick+0xa8>)
 80006c0:	699a      	ldr	r2, [r3, #24]
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <HAL_InitTick+0xa8>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	0109      	lsls	r1, r1, #4
 80006c8:	430a      	orrs	r2, r1
 80006ca:	619a      	str	r2, [r3, #24]
 80006cc:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <HAL_InitTick+0xa8>)
 80006ce:	699a      	ldr	r2, [r3, #24]
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006da:	230c      	movs	r3, #12
 80006dc:	18fa      	adds	r2, r7, r3
 80006de:	2310      	movs	r3, #16
 80006e0:	18fb      	adds	r3, r7, r3
 80006e2:	0011      	movs	r1, r2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 ff8d 	bl	8001604 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006ea:	f000 ff75 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 80006ee:	0003      	movs	r3, r0
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f4:	4914      	ldr	r1, [pc, #80]	; (8000748 <HAL_InitTick+0xac>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff fd18 	bl	800012c <__udivsi3>
 80006fc:	0003      	movs	r3, r0
 80006fe:	3b01      	subs	r3, #1
 8000700:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_InitTick+0xb0>)
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <HAL_InitTick+0xb4>)
 8000706:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <HAL_InitTick+0xb0>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <HAL_InitTick+0xb8>)
 800070c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <HAL_InitTick+0xb0>)
 8000710:	6a3a      	ldr	r2, [r7, #32]
 8000712:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <HAL_InitTick+0xb0>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <HAL_InitTick+0xb0>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <HAL_InitTick+0xb0>)
 8000722:	0018      	movs	r0, r3
 8000724:	f000 ff98 	bl	8001658 <HAL_TIM_Base_Init>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d105      	bne.n	8000738 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <HAL_InitTick+0xb0>)
 800072e:	0018      	movs	r0, r3
 8000730:	f000 ffea 	bl	8001708 <HAL_TIM_Base_Start_IT>
 8000734:	0003      	movs	r3, r0
 8000736:	e000      	b.n	800073a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000738:	2301      	movs	r3, #1
}
 800073a:	0018      	movs	r0, r3
 800073c:	46bd      	mov	sp, r7
 800073e:	b00a      	add	sp, #40	; 0x28
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40021000 	.word	0x40021000
 8000748:	000f4240 	.word	0x000f4240
 800074c:	20000370 	.word	0x20000370
 8000750:	40012c00 	.word	0x40012c00
 8000754:	000003e7 	.word	0x000003e7

08000758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800075c:	e7fe      	b.n	800075c <NMI_Handler+0x4>

0800075e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000762:	e7fe      	b.n	8000762 <HardFault_Handler+0x4>

08000764 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800076a:	0018      	movs	r0, r3
 800076c:	f001 f818 	bl	80017a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	20000370 	.word	0x20000370

0800077c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000784:	4a14      	ldr	r2, [pc, #80]	; (80007d8 <_sbrk+0x5c>)
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <_sbrk+0x60>)
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <_sbrk+0x64>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d102      	bne.n	800079e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <_sbrk+0x64>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <_sbrk+0x68>)
 800079c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <_sbrk+0x64>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	18d3      	adds	r3, r2, r3
 80007a6:	693a      	ldr	r2, [r7, #16]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d207      	bcs.n	80007bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007ac:	f003 fcd6 	bl	800415c <__errno>
 80007b0:	0003      	movs	r3, r0
 80007b2:	220c      	movs	r2, #12
 80007b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007b6:	2301      	movs	r3, #1
 80007b8:	425b      	negs	r3, r3
 80007ba:	e009      	b.n	80007d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <_sbrk+0x64>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <_sbrk+0x64>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	18d2      	adds	r2, r2, r3
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <_sbrk+0x64>)
 80007cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007ce:	68fb      	ldr	r3, [r7, #12]
}
 80007d0:	0018      	movs	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b006      	add	sp, #24
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20004000 	.word	0x20004000
 80007dc:	00000400 	.word	0x00000400
 80007e0:	200003b8 	.word	0x200003b8
 80007e4:	20001118 	.word	0x20001118

080007e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <LoopForever+0x6>)
  ldr r1, =_edata
 80007fa:	490e      	ldr	r1, [pc, #56]	; (8000834 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <LoopForever+0xe>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0b      	ldr	r2, [pc, #44]	; (800083c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000810:	4c0b      	ldr	r4, [pc, #44]	; (8000840 <LoopForever+0x16>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800081e:	f7ff ffe3 	bl	80007e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000822:	f003 fca1 	bl	8004168 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff fd25 	bl	8000274 <main>

0800082a <LoopForever>:

LoopForever:
    b LoopForever
 800082a:	e7fe      	b.n	800082a <LoopForever>
  ldr   r0, =_estack
 800082c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000838:	08004bb8 	.word	0x08004bb8
  ldr r2, =_sbss
 800083c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000840:	20001114 	.word	0x20001114

08000844 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_IRQHandler>
	...

08000848 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <HAL_Init+0x24>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_Init+0x24>)
 8000852:	2110      	movs	r1, #16
 8000854:	430a      	orrs	r2, r1
 8000856:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000858:	2003      	movs	r0, #3
 800085a:	f7ff ff1f 	bl	800069c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800085e:	f7ff fea7 	bl	80005b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000862:	2300      	movs	r3, #0
}
 8000864:	0018      	movs	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	40022000 	.word	0x40022000

08000870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_IncTick+0x1c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	001a      	movs	r2, r3
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_IncTick+0x20>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	18d2      	adds	r2, r2, r3
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <HAL_IncTick+0x20>)
 8000882:	601a      	str	r2, [r3, #0]
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	20000004 	.word	0x20000004
 8000890:	200003bc 	.word	0x200003bc

08000894 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  return uwTick;
 8000898:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <HAL_GetTick+0x10>)
 800089a:	681b      	ldr	r3, [r3, #0]
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	200003bc 	.word	0x200003bc

080008a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	0002      	movs	r2, r0
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b7f      	cmp	r3, #127	; 0x7f
 80008ba:	d809      	bhi.n	80008d0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	001a      	movs	r2, r3
 80008c2:	231f      	movs	r3, #31
 80008c4:	401a      	ands	r2, r3
 80008c6:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <__NVIC_EnableIRQ+0x30>)
 80008c8:	2101      	movs	r1, #1
 80008ca:	4091      	lsls	r1, r2
 80008cc:	000a      	movs	r2, r1
 80008ce:	601a      	str	r2, [r3, #0]
  }
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b002      	add	sp, #8
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	e000e100 	.word	0xe000e100

080008dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	0002      	movs	r2, r0
 80008e4:	6039      	str	r1, [r7, #0]
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b7f      	cmp	r3, #127	; 0x7f
 80008f0:	d828      	bhi.n	8000944 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f2:	4a2f      	ldr	r2, [pc, #188]	; (80009b0 <__NVIC_SetPriority+0xd4>)
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b25b      	sxtb	r3, r3
 80008fa:	089b      	lsrs	r3, r3, #2
 80008fc:	33c0      	adds	r3, #192	; 0xc0
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	589b      	ldr	r3, [r3, r2]
 8000902:	1dfa      	adds	r2, r7, #7
 8000904:	7812      	ldrb	r2, [r2, #0]
 8000906:	0011      	movs	r1, r2
 8000908:	2203      	movs	r2, #3
 800090a:	400a      	ands	r2, r1
 800090c:	00d2      	lsls	r2, r2, #3
 800090e:	21ff      	movs	r1, #255	; 0xff
 8000910:	4091      	lsls	r1, r2
 8000912:	000a      	movs	r2, r1
 8000914:	43d2      	mvns	r2, r2
 8000916:	401a      	ands	r2, r3
 8000918:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	019b      	lsls	r3, r3, #6
 800091e:	22ff      	movs	r2, #255	; 0xff
 8000920:	401a      	ands	r2, r3
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	0018      	movs	r0, r3
 8000928:	2303      	movs	r3, #3
 800092a:	4003      	ands	r3, r0
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000930:	481f      	ldr	r0, [pc, #124]	; (80009b0 <__NVIC_SetPriority+0xd4>)
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b25b      	sxtb	r3, r3
 8000938:	089b      	lsrs	r3, r3, #2
 800093a:	430a      	orrs	r2, r1
 800093c:	33c0      	adds	r3, #192	; 0xc0
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000942:	e031      	b.n	80009a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000944:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <__NVIC_SetPriority+0xd8>)
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	0019      	movs	r1, r3
 800094c:	230f      	movs	r3, #15
 800094e:	400b      	ands	r3, r1
 8000950:	3b08      	subs	r3, #8
 8000952:	089b      	lsrs	r3, r3, #2
 8000954:	3306      	adds	r3, #6
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	18d3      	adds	r3, r2, r3
 800095a:	3304      	adds	r3, #4
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	1dfa      	adds	r2, r7, #7
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	0011      	movs	r1, r2
 8000964:	2203      	movs	r2, #3
 8000966:	400a      	ands	r2, r1
 8000968:	00d2      	lsls	r2, r2, #3
 800096a:	21ff      	movs	r1, #255	; 0xff
 800096c:	4091      	lsls	r1, r2
 800096e:	000a      	movs	r2, r1
 8000970:	43d2      	mvns	r2, r2
 8000972:	401a      	ands	r2, r3
 8000974:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	019b      	lsls	r3, r3, #6
 800097a:	22ff      	movs	r2, #255	; 0xff
 800097c:	401a      	ands	r2, r3
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	0018      	movs	r0, r3
 8000984:	2303      	movs	r3, #3
 8000986:	4003      	ands	r3, r0
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <__NVIC_SetPriority+0xd8>)
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	001c      	movs	r4, r3
 8000994:	230f      	movs	r3, #15
 8000996:	4023      	ands	r3, r4
 8000998:	3b08      	subs	r3, #8
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	430a      	orrs	r2, r1
 800099e:	3306      	adds	r3, #6
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	18c3      	adds	r3, r0, r3
 80009a4:	3304      	adds	r3, #4
 80009a6:	601a      	str	r2, [r3, #0]
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b003      	add	sp, #12
 80009ae:	bd90      	pop	{r4, r7, pc}
 80009b0:	e000e100 	.word	0xe000e100
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	210f      	movs	r1, #15
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	1c02      	adds	r2, r0, #0
 80009c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	0011      	movs	r1, r2
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff ff81 	bl	80008dc <__NVIC_SetPriority>
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b004      	add	sp, #16
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	0002      	movs	r2, r0
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	0018      	movs	r0, r3
 80009f6:	f7ff ff57 	bl	80008a8 <__NVIC_EnableIRQ>
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b002      	add	sp, #8
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a12:	e14f      	b.n	8000cb4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2101      	movs	r1, #1
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	4091      	lsls	r1, r2
 8000a1e:	000a      	movs	r2, r1
 8000a20:	4013      	ands	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d100      	bne.n	8000a2c <HAL_GPIO_Init+0x28>
 8000a2a:	e140      	b.n	8000cae <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2203      	movs	r2, #3
 8000a32:	4013      	ands	r3, r2
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d005      	beq.n	8000a44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d130      	bne.n	8000aa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	2203      	movs	r2, #3
 8000a50:	409a      	lsls	r2, r3
 8000a52:	0013      	movs	r3, r2
 8000a54:	43da      	mvns	r2, r3
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	409a      	lsls	r2, r3
 8000a66:	0013      	movs	r3, r2
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	43da      	mvns	r2, r3
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	091b      	lsrs	r3, r3, #4
 8000a90:	2201      	movs	r2, #1
 8000a92:	401a      	ands	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	409a      	lsls	r2, r3
 8000a98:	0013      	movs	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	2203      	movs	r2, #3
 8000aac:	4013      	ands	r3, r2
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	d017      	beq.n	8000ae2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	2203      	movs	r2, #3
 8000abe:	409a      	lsls	r2, r3
 8000ac0:	0013      	movs	r3, r2
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	4013      	ands	r3, r2
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d123      	bne.n	8000b36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	08da      	lsrs	r2, r3, #3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3208      	adds	r2, #8
 8000af6:	0092      	lsls	r2, r2, #2
 8000af8:	58d3      	ldr	r3, [r2, r3]
 8000afa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	2207      	movs	r2, #7
 8000b00:	4013      	ands	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	220f      	movs	r2, #15
 8000b06:	409a      	lsls	r2, r3
 8000b08:	0013      	movs	r3, r2
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	691a      	ldr	r2, [r3, #16]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	2107      	movs	r1, #7
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	0013      	movs	r3, r2
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	08da      	lsrs	r2, r3, #3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3208      	adds	r2, #8
 8000b30:	0092      	lsls	r2, r2, #2
 8000b32:	6939      	ldr	r1, [r7, #16]
 8000b34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	2203      	movs	r2, #3
 8000b42:	409a      	lsls	r2, r3
 8000b44:	0013      	movs	r3, r2
 8000b46:	43da      	mvns	r2, r3
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	2203      	movs	r2, #3
 8000b54:	401a      	ands	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	23c0      	movs	r3, #192	; 0xc0
 8000b70:	029b      	lsls	r3, r3, #10
 8000b72:	4013      	ands	r3, r2
 8000b74:	d100      	bne.n	8000b78 <HAL_GPIO_Init+0x174>
 8000b76:	e09a      	b.n	8000cae <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b78:	4b54      	ldr	r3, [pc, #336]	; (8000ccc <HAL_GPIO_Init+0x2c8>)
 8000b7a:	699a      	ldr	r2, [r3, #24]
 8000b7c:	4b53      	ldr	r3, [pc, #332]	; (8000ccc <HAL_GPIO_Init+0x2c8>)
 8000b7e:	2101      	movs	r1, #1
 8000b80:	430a      	orrs	r2, r1
 8000b82:	619a      	str	r2, [r3, #24]
 8000b84:	4b51      	ldr	r3, [pc, #324]	; (8000ccc <HAL_GPIO_Init+0x2c8>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b90:	4a4f      	ldr	r2, [pc, #316]	; (8000cd0 <HAL_GPIO_Init+0x2cc>)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	3302      	adds	r3, #2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	589b      	ldr	r3, [r3, r2]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	220f      	movs	r2, #15
 8000ba8:	409a      	lsls	r2, r3
 8000baa:	0013      	movs	r3, r2
 8000bac:	43da      	mvns	r2, r3
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	2390      	movs	r3, #144	; 0x90
 8000bb8:	05db      	lsls	r3, r3, #23
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d013      	beq.n	8000be6 <HAL_GPIO_Init+0x1e2>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a44      	ldr	r2, [pc, #272]	; (8000cd4 <HAL_GPIO_Init+0x2d0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d00d      	beq.n	8000be2 <HAL_GPIO_Init+0x1de>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a43      	ldr	r2, [pc, #268]	; (8000cd8 <HAL_GPIO_Init+0x2d4>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d007      	beq.n	8000bde <HAL_GPIO_Init+0x1da>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a42      	ldr	r2, [pc, #264]	; (8000cdc <HAL_GPIO_Init+0x2d8>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d101      	bne.n	8000bda <HAL_GPIO_Init+0x1d6>
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e006      	b.n	8000be8 <HAL_GPIO_Init+0x1e4>
 8000bda:	2305      	movs	r3, #5
 8000bdc:	e004      	b.n	8000be8 <HAL_GPIO_Init+0x1e4>
 8000bde:	2302      	movs	r3, #2
 8000be0:	e002      	b.n	8000be8 <HAL_GPIO_Init+0x1e4>
 8000be2:	2301      	movs	r3, #1
 8000be4:	e000      	b.n	8000be8 <HAL_GPIO_Init+0x1e4>
 8000be6:	2300      	movs	r3, #0
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	2103      	movs	r1, #3
 8000bec:	400a      	ands	r2, r1
 8000bee:	0092      	lsls	r2, r2, #2
 8000bf0:	4093      	lsls	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bf8:	4935      	ldr	r1, [pc, #212]	; (8000cd0 <HAL_GPIO_Init+0x2cc>)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	089b      	lsrs	r3, r3, #2
 8000bfe:	3302      	adds	r3, #2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c06:	4b36      	ldr	r3, [pc, #216]	; (8000ce0 <HAL_GPIO_Init+0x2dc>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	025b      	lsls	r3, r3, #9
 8000c1e:	4013      	ands	r3, r2
 8000c20:	d003      	beq.n	8000c2a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ce0 <HAL_GPIO_Init+0x2dc>)
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c30:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <HAL_GPIO_Init+0x2dc>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	43da      	mvns	r2, r3
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	029b      	lsls	r3, r3, #10
 8000c48:	4013      	ands	r3, r2
 8000c4a:	d003      	beq.n	8000c54 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c54:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <HAL_GPIO_Init+0x2dc>)
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_GPIO_Init+0x2dc>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	43da      	mvns	r2, r3
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	4013      	ands	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	035b      	lsls	r3, r3, #13
 8000c72:	4013      	ands	r3, r2
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_GPIO_Init+0x2dc>)
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_GPIO_Init+0x2dc>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	43da      	mvns	r2, r3
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	039b      	lsls	r3, r3, #14
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	d003      	beq.n	8000ca8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <HAL_GPIO_Init+0x2dc>)
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	40da      	lsrs	r2, r3
 8000cbc:	1e13      	subs	r3, r2, #0
 8000cbe:	d000      	beq.n	8000cc2 <HAL_GPIO_Init+0x2be>
 8000cc0:	e6a8      	b.n	8000a14 <HAL_GPIO_Init+0x10>
  } 
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b006      	add	sp, #24
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010000 	.word	0x40010000
 8000cd4:	48000400 	.word	0x48000400
 8000cd8:	48000800 	.word	0x48000800
 8000cdc:	48000c00 	.word	0x48000c00
 8000ce0:	40010400 	.word	0x40010400

08000ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	0008      	movs	r0, r1
 8000cee:	0011      	movs	r1, r2
 8000cf0:	1cbb      	adds	r3, r7, #2
 8000cf2:	1c02      	adds	r2, r0, #0
 8000cf4:	801a      	strh	r2, [r3, #0]
 8000cf6:	1c7b      	adds	r3, r7, #1
 8000cf8:	1c0a      	adds	r2, r1, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cfc:	1c7b      	adds	r3, r7, #1
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d004      	beq.n	8000d0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d04:	1cbb      	adds	r3, r7, #2
 8000d06:	881a      	ldrh	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d0c:	e003      	b.n	8000d16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d0e:	1cbb      	adds	r3, r7, #2
 8000d10:	881a      	ldrh	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b002      	add	sp, #8
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e305      	b.n	800133e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2201      	movs	r2, #1
 8000d38:	4013      	ands	r3, r2
 8000d3a:	d100      	bne.n	8000d3e <HAL_RCC_OscConfig+0x1e>
 8000d3c:	e08d      	b.n	8000e5a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d3e:	4bc5      	ldr	r3, [pc, #788]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	220c      	movs	r2, #12
 8000d44:	4013      	ands	r3, r2
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	d00e      	beq.n	8000d68 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d4a:	4bc2      	ldr	r3, [pc, #776]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	220c      	movs	r2, #12
 8000d50:	4013      	ands	r3, r2
 8000d52:	2b08      	cmp	r3, #8
 8000d54:	d116      	bne.n	8000d84 <HAL_RCC_OscConfig+0x64>
 8000d56:	4bbf      	ldr	r3, [pc, #764]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	23c0      	movs	r3, #192	; 0xc0
 8000d5c:	025b      	lsls	r3, r3, #9
 8000d5e:	401a      	ands	r2, r3
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	025b      	lsls	r3, r3, #9
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d10d      	bne.n	8000d84 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d68:	4bba      	ldr	r3, [pc, #744]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	029b      	lsls	r3, r3, #10
 8000d70:	4013      	ands	r3, r2
 8000d72:	d100      	bne.n	8000d76 <HAL_RCC_OscConfig+0x56>
 8000d74:	e070      	b.n	8000e58 <HAL_RCC_OscConfig+0x138>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d000      	beq.n	8000d80 <HAL_RCC_OscConfig+0x60>
 8000d7e:	e06b      	b.n	8000e58 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e2dc      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d107      	bne.n	8000d9c <HAL_RCC_OscConfig+0x7c>
 8000d8c:	4bb1      	ldr	r3, [pc, #708]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4bb0      	ldr	r3, [pc, #704]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000d92:	2180      	movs	r1, #128	; 0x80
 8000d94:	0249      	lsls	r1, r1, #9
 8000d96:	430a      	orrs	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	e02f      	b.n	8000dfc <HAL_RCC_OscConfig+0xdc>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d10c      	bne.n	8000dbe <HAL_RCC_OscConfig+0x9e>
 8000da4:	4bab      	ldr	r3, [pc, #684]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4baa      	ldr	r3, [pc, #680]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000daa:	49ab      	ldr	r1, [pc, #684]	; (8001058 <HAL_RCC_OscConfig+0x338>)
 8000dac:	400a      	ands	r2, r1
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	4ba8      	ldr	r3, [pc, #672]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4ba7      	ldr	r3, [pc, #668]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000db6:	49a9      	ldr	r1, [pc, #676]	; (800105c <HAL_RCC_OscConfig+0x33c>)
 8000db8:	400a      	ands	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	e01e      	b.n	8000dfc <HAL_RCC_OscConfig+0xdc>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b05      	cmp	r3, #5
 8000dc4:	d10e      	bne.n	8000de4 <HAL_RCC_OscConfig+0xc4>
 8000dc6:	4ba3      	ldr	r3, [pc, #652]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4ba2      	ldr	r3, [pc, #648]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	02c9      	lsls	r1, r1, #11
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	4b9f      	ldr	r3, [pc, #636]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b9e      	ldr	r3, [pc, #632]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000dda:	2180      	movs	r1, #128	; 0x80
 8000ddc:	0249      	lsls	r1, r1, #9
 8000dde:	430a      	orrs	r2, r1
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	e00b      	b.n	8000dfc <HAL_RCC_OscConfig+0xdc>
 8000de4:	4b9b      	ldr	r3, [pc, #620]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b9a      	ldr	r3, [pc, #616]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000dea:	499b      	ldr	r1, [pc, #620]	; (8001058 <HAL_RCC_OscConfig+0x338>)
 8000dec:	400a      	ands	r2, r1
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	4b98      	ldr	r3, [pc, #608]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b97      	ldr	r3, [pc, #604]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000df6:	4999      	ldr	r1, [pc, #612]	; (800105c <HAL_RCC_OscConfig+0x33c>)
 8000df8:	400a      	ands	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d014      	beq.n	8000e2e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e04:	f7ff fd46 	bl	8000894 <HAL_GetTick>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0c:	e008      	b.n	8000e20 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e0e:	f7ff fd41 	bl	8000894 <HAL_GetTick>
 8000e12:	0002      	movs	r2, r0
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b64      	cmp	r3, #100	; 0x64
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e28e      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e20:	4b8c      	ldr	r3, [pc, #560]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	029b      	lsls	r3, r3, #10
 8000e28:	4013      	ands	r3, r2
 8000e2a:	d0f0      	beq.n	8000e0e <HAL_RCC_OscConfig+0xee>
 8000e2c:	e015      	b.n	8000e5a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2e:	f7ff fd31 	bl	8000894 <HAL_GetTick>
 8000e32:	0003      	movs	r3, r0
 8000e34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e38:	f7ff fd2c 	bl	8000894 <HAL_GetTick>
 8000e3c:	0002      	movs	r2, r0
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b64      	cmp	r3, #100	; 0x64
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e279      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4a:	4b82      	ldr	r3, [pc, #520]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	029b      	lsls	r3, r3, #10
 8000e52:	4013      	ands	r3, r2
 8000e54:	d1f0      	bne.n	8000e38 <HAL_RCC_OscConfig+0x118>
 8000e56:	e000      	b.n	8000e5a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e58:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2202      	movs	r2, #2
 8000e60:	4013      	ands	r3, r2
 8000e62:	d100      	bne.n	8000e66 <HAL_RCC_OscConfig+0x146>
 8000e64:	e06c      	b.n	8000f40 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e66:	4b7b      	ldr	r3, [pc, #492]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d00e      	beq.n	8000e8e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e70:	4b78      	ldr	r3, [pc, #480]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	220c      	movs	r2, #12
 8000e76:	4013      	ands	r3, r2
 8000e78:	2b08      	cmp	r3, #8
 8000e7a:	d11f      	bne.n	8000ebc <HAL_RCC_OscConfig+0x19c>
 8000e7c:	4b75      	ldr	r3, [pc, #468]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	23c0      	movs	r3, #192	; 0xc0
 8000e82:	025b      	lsls	r3, r3, #9
 8000e84:	401a      	ands	r2, r3
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d116      	bne.n	8000ebc <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8e:	4b71      	ldr	r3, [pc, #452]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2202      	movs	r2, #2
 8000e94:	4013      	ands	r3, r2
 8000e96:	d005      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x184>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d001      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e24c      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea4:	4b6b      	ldr	r3, [pc, #428]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	22f8      	movs	r2, #248	; 0xf8
 8000eaa:	4393      	bics	r3, r2
 8000eac:	0019      	movs	r1, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	00da      	lsls	r2, r3, #3
 8000eb4:	4b67      	ldr	r3, [pc, #412]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eba:	e041      	b.n	8000f40 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d024      	beq.n	8000f0e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ec4:	4b63      	ldr	r3, [pc, #396]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b62      	ldr	r3, [pc, #392]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000eca:	2101      	movs	r1, #1
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fce0 	bl	8000894 <HAL_GetTick>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed8:	e008      	b.n	8000eec <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eda:	f7ff fcdb 	bl	8000894 <HAL_GetTick>
 8000ede:	0002      	movs	r2, r0
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e228      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eec:	4b59      	ldr	r3, [pc, #356]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d0f1      	beq.n	8000eda <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef6:	4b57      	ldr	r3, [pc, #348]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	22f8      	movs	r2, #248	; 0xf8
 8000efc:	4393      	bics	r3, r2
 8000efe:	0019      	movs	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	00da      	lsls	r2, r3, #3
 8000f06:	4b53      	ldr	r3, [pc, #332]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	e018      	b.n	8000f40 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f0e:	4b51      	ldr	r3, [pc, #324]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4b50      	ldr	r3, [pc, #320]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000f14:	2101      	movs	r1, #1
 8000f16:	438a      	bics	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1a:	f7ff fcbb 	bl	8000894 <HAL_GetTick>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f24:	f7ff fcb6 	bl	8000894 <HAL_GetTick>
 8000f28:	0002      	movs	r2, r0
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e203      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f36:	4b47      	ldr	r3, [pc, #284]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d1f1      	bne.n	8000f24 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2208      	movs	r2, #8
 8000f46:	4013      	ands	r3, r2
 8000f48:	d036      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d019      	beq.n	8000f86 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f52:	4b40      	ldr	r3, [pc, #256]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f56:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000f58:	2101      	movs	r1, #1
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5e:	f7ff fc99 	bl	8000894 <HAL_GetTick>
 8000f62:	0003      	movs	r3, r0
 8000f64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f68:	f7ff fc94 	bl	8000894 <HAL_GetTick>
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e1e1      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7a:	4b36      	ldr	r3, [pc, #216]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	2202      	movs	r2, #2
 8000f80:	4013      	ands	r3, r2
 8000f82:	d0f1      	beq.n	8000f68 <HAL_RCC_OscConfig+0x248>
 8000f84:	e018      	b.n	8000fb8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f86:	4b33      	ldr	r3, [pc, #204]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f8a:	4b32      	ldr	r3, [pc, #200]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	438a      	bics	r2, r1
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f92:	f7ff fc7f 	bl	8000894 <HAL_GetTick>
 8000f96:	0003      	movs	r3, r0
 8000f98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f9c:	f7ff fc7a 	bl	8000894 <HAL_GetTick>
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e1c7      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fae:	4b29      	ldr	r3, [pc, #164]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d1f1      	bne.n	8000f9c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d100      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x2a4>
 8000fc2:	e0b5      	b.n	8001130 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fc4:	201f      	movs	r0, #31
 8000fc6:	183b      	adds	r3, r7, r0
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fcc:	4b21      	ldr	r3, [pc, #132]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000fce:	69da      	ldr	r2, [r3, #28]
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	055b      	lsls	r3, r3, #21
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d110      	bne.n	8000ffa <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000fda:	69da      	ldr	r2, [r3, #28]
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	0549      	lsls	r1, r1, #21
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	61da      	str	r2, [r3, #28]
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8000fe8:	69da      	ldr	r2, [r3, #28]
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	055b      	lsls	r3, r3, #21
 8000fee:	4013      	ands	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ff4:	183b      	adds	r3, r7, r0
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <HAL_RCC_OscConfig+0x340>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4013      	ands	r3, r2
 8001004:	d11a      	bne.n	800103c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <HAL_RCC_OscConfig+0x340>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_RCC_OscConfig+0x340>)
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	0049      	lsls	r1, r1, #1
 8001010:	430a      	orrs	r2, r1
 8001012:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001014:	f7ff fc3e 	bl	8000894 <HAL_GetTick>
 8001018:	0003      	movs	r3, r0
 800101a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800101e:	f7ff fc39 	bl	8000894 <HAL_GetTick>
 8001022:	0002      	movs	r2, r0
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b64      	cmp	r3, #100	; 0x64
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e186      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_RCC_OscConfig+0x340>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4013      	ands	r3, r2
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d10f      	bne.n	8001064 <HAL_RCC_OscConfig+0x344>
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 8001046:	6a1a      	ldr	r2, [r3, #32]
 8001048:	4b02      	ldr	r3, [pc, #8]	; (8001054 <HAL_RCC_OscConfig+0x334>)
 800104a:	2101      	movs	r1, #1
 800104c:	430a      	orrs	r2, r1
 800104e:	621a      	str	r2, [r3, #32]
 8001050:	e036      	b.n	80010c0 <HAL_RCC_OscConfig+0x3a0>
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	40021000 	.word	0x40021000
 8001058:	fffeffff 	.word	0xfffeffff
 800105c:	fffbffff 	.word	0xfffbffff
 8001060:	40007000 	.word	0x40007000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10c      	bne.n	8001086 <HAL_RCC_OscConfig+0x366>
 800106c:	4bb6      	ldr	r3, [pc, #728]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 800106e:	6a1a      	ldr	r2, [r3, #32]
 8001070:	4bb5      	ldr	r3, [pc, #724]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001072:	2101      	movs	r1, #1
 8001074:	438a      	bics	r2, r1
 8001076:	621a      	str	r2, [r3, #32]
 8001078:	4bb3      	ldr	r3, [pc, #716]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 800107a:	6a1a      	ldr	r2, [r3, #32]
 800107c:	4bb2      	ldr	r3, [pc, #712]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 800107e:	2104      	movs	r1, #4
 8001080:	438a      	bics	r2, r1
 8001082:	621a      	str	r2, [r3, #32]
 8001084:	e01c      	b.n	80010c0 <HAL_RCC_OscConfig+0x3a0>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b05      	cmp	r3, #5
 800108c:	d10c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x388>
 800108e:	4bae      	ldr	r3, [pc, #696]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001090:	6a1a      	ldr	r2, [r3, #32]
 8001092:	4bad      	ldr	r3, [pc, #692]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001094:	2104      	movs	r1, #4
 8001096:	430a      	orrs	r2, r1
 8001098:	621a      	str	r2, [r3, #32]
 800109a:	4bab      	ldr	r3, [pc, #684]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 800109c:	6a1a      	ldr	r2, [r3, #32]
 800109e:	4baa      	ldr	r3, [pc, #680]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80010a0:	2101      	movs	r1, #1
 80010a2:	430a      	orrs	r2, r1
 80010a4:	621a      	str	r2, [r3, #32]
 80010a6:	e00b      	b.n	80010c0 <HAL_RCC_OscConfig+0x3a0>
 80010a8:	4ba7      	ldr	r3, [pc, #668]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80010aa:	6a1a      	ldr	r2, [r3, #32]
 80010ac:	4ba6      	ldr	r3, [pc, #664]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80010ae:	2101      	movs	r1, #1
 80010b0:	438a      	bics	r2, r1
 80010b2:	621a      	str	r2, [r3, #32]
 80010b4:	4ba4      	ldr	r3, [pc, #656]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80010b6:	6a1a      	ldr	r2, [r3, #32]
 80010b8:	4ba3      	ldr	r3, [pc, #652]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80010ba:	2104      	movs	r1, #4
 80010bc:	438a      	bics	r2, r1
 80010be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d014      	beq.n	80010f2 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c8:	f7ff fbe4 	bl	8000894 <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d0:	e009      	b.n	80010e6 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010d2:	f7ff fbdf 	bl	8000894 <HAL_GetTick>
 80010d6:	0002      	movs	r2, r0
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	4a9b      	ldr	r2, [pc, #620]	; (800134c <HAL_RCC_OscConfig+0x62c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e12b      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e6:	4b98      	ldr	r3, [pc, #608]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	2202      	movs	r2, #2
 80010ec:	4013      	ands	r3, r2
 80010ee:	d0f0      	beq.n	80010d2 <HAL_RCC_OscConfig+0x3b2>
 80010f0:	e013      	b.n	800111a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f2:	f7ff fbcf 	bl	8000894 <HAL_GetTick>
 80010f6:	0003      	movs	r3, r0
 80010f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010fa:	e009      	b.n	8001110 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010fc:	f7ff fbca 	bl	8000894 <HAL_GetTick>
 8001100:	0002      	movs	r2, r0
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	4a91      	ldr	r2, [pc, #580]	; (800134c <HAL_RCC_OscConfig+0x62c>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e116      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001110:	4b8d      	ldr	r3, [pc, #564]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	2202      	movs	r2, #2
 8001116:	4013      	ands	r3, r2
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800111a:	231f      	movs	r3, #31
 800111c:	18fb      	adds	r3, r7, r3
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d105      	bne.n	8001130 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001124:	4b88      	ldr	r3, [pc, #544]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001126:	69da      	ldr	r2, [r3, #28]
 8001128:	4b87      	ldr	r3, [pc, #540]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 800112a:	4989      	ldr	r1, [pc, #548]	; (8001350 <HAL_RCC_OscConfig+0x630>)
 800112c:	400a      	ands	r2, r1
 800112e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2210      	movs	r2, #16
 8001136:	4013      	ands	r3, r2
 8001138:	d063      	beq.n	8001202 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d12a      	bne.n	8001198 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001142:	4b81      	ldr	r3, [pc, #516]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001146:	4b80      	ldr	r3, [pc, #512]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001148:	2104      	movs	r1, #4
 800114a:	430a      	orrs	r2, r1
 800114c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800114e:	4b7e      	ldr	r3, [pc, #504]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001152:	4b7d      	ldr	r3, [pc, #500]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001154:	2101      	movs	r1, #1
 8001156:	430a      	orrs	r2, r1
 8001158:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff fb9b 	bl	8000894 <HAL_GetTick>
 800115e:	0003      	movs	r3, r0
 8001160:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001164:	f7ff fb96 	bl	8000894 <HAL_GetTick>
 8001168:	0002      	movs	r2, r0
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e0e3      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001176:	4b74      	ldr	r3, [pc, #464]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117a:	2202      	movs	r2, #2
 800117c:	4013      	ands	r3, r2
 800117e:	d0f1      	beq.n	8001164 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001180:	4b71      	ldr	r3, [pc, #452]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001184:	22f8      	movs	r2, #248	; 0xf8
 8001186:	4393      	bics	r3, r2
 8001188:	0019      	movs	r1, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	00da      	lsls	r2, r3, #3
 8001190:	4b6d      	ldr	r3, [pc, #436]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001192:	430a      	orrs	r2, r1
 8001194:	635a      	str	r2, [r3, #52]	; 0x34
 8001196:	e034      	b.n	8001202 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	3305      	adds	r3, #5
 800119e:	d111      	bne.n	80011c4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011a0:	4b69      	ldr	r3, [pc, #420]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80011a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a4:	4b68      	ldr	r3, [pc, #416]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80011a6:	2104      	movs	r1, #4
 80011a8:	438a      	bics	r2, r1
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011ac:	4b66      	ldr	r3, [pc, #408]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80011ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b0:	22f8      	movs	r2, #248	; 0xf8
 80011b2:	4393      	bics	r3, r2
 80011b4:	0019      	movs	r1, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	00da      	lsls	r2, r3, #3
 80011bc:	4b62      	ldr	r3, [pc, #392]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80011be:	430a      	orrs	r2, r1
 80011c0:	635a      	str	r2, [r3, #52]	; 0x34
 80011c2:	e01e      	b.n	8001202 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011c4:	4b60      	ldr	r3, [pc, #384]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80011c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c8:	4b5f      	ldr	r3, [pc, #380]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80011ca:	2104      	movs	r1, #4
 80011cc:	430a      	orrs	r2, r1
 80011ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80011d0:	4b5d      	ldr	r3, [pc, #372]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80011d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d4:	4b5c      	ldr	r3, [pc, #368]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80011d6:	2101      	movs	r1, #1
 80011d8:	438a      	bics	r2, r1
 80011da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011dc:	f7ff fb5a 	bl	8000894 <HAL_GetTick>
 80011e0:	0003      	movs	r3, r0
 80011e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011e6:	f7ff fb55 	bl	8000894 <HAL_GetTick>
 80011ea:	0002      	movs	r2, r0
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e0a2      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011f8:	4b53      	ldr	r3, [pc, #332]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80011fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fc:	2202      	movs	r2, #2
 80011fe:	4013      	ands	r3, r2
 8001200:	d1f1      	bne.n	80011e6 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d100      	bne.n	800120c <HAL_RCC_OscConfig+0x4ec>
 800120a:	e097      	b.n	800133c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800120c:	4b4e      	ldr	r3, [pc, #312]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	220c      	movs	r2, #12
 8001212:	4013      	ands	r3, r2
 8001214:	2b08      	cmp	r3, #8
 8001216:	d100      	bne.n	800121a <HAL_RCC_OscConfig+0x4fa>
 8001218:	e06b      	b.n	80012f2 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d14c      	bne.n	80012bc <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001222:	4b49      	ldr	r3, [pc, #292]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4b48      	ldr	r3, [pc, #288]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001228:	494a      	ldr	r1, [pc, #296]	; (8001354 <HAL_RCC_OscConfig+0x634>)
 800122a:	400a      	ands	r2, r1
 800122c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122e:	f7ff fb31 	bl	8000894 <HAL_GetTick>
 8001232:	0003      	movs	r3, r0
 8001234:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001238:	f7ff fb2c 	bl	8000894 <HAL_GetTick>
 800123c:	0002      	movs	r2, r0
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e079      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800124a:	4b3f      	ldr	r3, [pc, #252]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	049b      	lsls	r3, r3, #18
 8001252:	4013      	ands	r3, r2
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001256:	4b3c      	ldr	r3, [pc, #240]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125a:	220f      	movs	r2, #15
 800125c:	4393      	bics	r3, r2
 800125e:	0019      	movs	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001264:	4b38      	ldr	r3, [pc, #224]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001266:	430a      	orrs	r2, r1
 8001268:	62da      	str	r2, [r3, #44]	; 0x2c
 800126a:	4b37      	ldr	r3, [pc, #220]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4a3a      	ldr	r2, [pc, #232]	; (8001358 <HAL_RCC_OscConfig+0x638>)
 8001270:	4013      	ands	r3, r2
 8001272:	0019      	movs	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	431a      	orrs	r2, r3
 800127e:	4b32      	ldr	r3, [pc, #200]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001280:	430a      	orrs	r2, r1
 8001282:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 800128a:	2180      	movs	r1, #128	; 0x80
 800128c:	0449      	lsls	r1, r1, #17
 800128e:	430a      	orrs	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001292:	f7ff faff 	bl	8000894 <HAL_GetTick>
 8001296:	0003      	movs	r3, r0
 8001298:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800129c:	f7ff fafa 	bl	8000894 <HAL_GetTick>
 80012a0:	0002      	movs	r2, r0
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e047      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	049b      	lsls	r3, r3, #18
 80012b6:	4013      	ands	r3, r2
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0x57c>
 80012ba:	e03f      	b.n	800133c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80012c2:	4924      	ldr	r1, [pc, #144]	; (8001354 <HAL_RCC_OscConfig+0x634>)
 80012c4:	400a      	ands	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fae4 	bl	8000894 <HAL_GetTick>
 80012cc:	0003      	movs	r3, r0
 80012ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d2:	f7ff fadf 	bl	8000894 <HAL_GetTick>
 80012d6:	0002      	movs	r2, r0
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e02c      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	049b      	lsls	r3, r3, #18
 80012ec:	4013      	ands	r3, r2
 80012ee:	d1f0      	bne.n	80012d2 <HAL_RCC_OscConfig+0x5b2>
 80012f0:	e024      	b.n	800133c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e01f      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001304:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_RCC_OscConfig+0x628>)
 8001306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001308:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	23c0      	movs	r3, #192	; 0xc0
 800130e:	025b      	lsls	r3, r3, #9
 8001310:	401a      	ands	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	429a      	cmp	r2, r3
 8001318:	d10e      	bne.n	8001338 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	220f      	movs	r2, #15
 800131e:	401a      	ands	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001324:	429a      	cmp	r2, r3
 8001326:	d107      	bne.n	8001338 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	23f0      	movs	r3, #240	; 0xf0
 800132c:	039b      	lsls	r3, r3, #14
 800132e:	401a      	ands	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001334:	429a      	cmp	r2, r3
 8001336:	d001      	beq.n	800133c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	0018      	movs	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	b008      	add	sp, #32
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	40021000 	.word	0x40021000
 800134c:	00001388 	.word	0x00001388
 8001350:	efffffff 	.word	0xefffffff
 8001354:	feffffff 	.word	0xfeffffff
 8001358:	ffc27fff 	.word	0xffc27fff

0800135c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0b3      	b.n	80014d8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001370:	4b5b      	ldr	r3, [pc, #364]	; (80014e0 <HAL_RCC_ClockConfig+0x184>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2201      	movs	r2, #1
 8001376:	4013      	ands	r3, r2
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d911      	bls.n	80013a2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137e:	4b58      	ldr	r3, [pc, #352]	; (80014e0 <HAL_RCC_ClockConfig+0x184>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2201      	movs	r2, #1
 8001384:	4393      	bics	r3, r2
 8001386:	0019      	movs	r1, r3
 8001388:	4b55      	ldr	r3, [pc, #340]	; (80014e0 <HAL_RCC_ClockConfig+0x184>)
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001390:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <HAL_RCC_ClockConfig+0x184>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2201      	movs	r2, #1
 8001396:	4013      	ands	r3, r2
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d001      	beq.n	80013a2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e09a      	b.n	80014d8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2202      	movs	r2, #2
 80013a8:	4013      	ands	r3, r2
 80013aa:	d015      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2204      	movs	r2, #4
 80013b2:	4013      	ands	r3, r2
 80013b4:	d006      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013b6:	4b4b      	ldr	r3, [pc, #300]	; (80014e4 <HAL_RCC_ClockConfig+0x188>)
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	4b4a      	ldr	r3, [pc, #296]	; (80014e4 <HAL_RCC_ClockConfig+0x188>)
 80013bc:	21e0      	movs	r1, #224	; 0xe0
 80013be:	00c9      	lsls	r1, r1, #3
 80013c0:	430a      	orrs	r2, r1
 80013c2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c4:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <HAL_RCC_ClockConfig+0x188>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	22f0      	movs	r2, #240	; 0xf0
 80013ca:	4393      	bics	r3, r2
 80013cc:	0019      	movs	r1, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	4b44      	ldr	r3, [pc, #272]	; (80014e4 <HAL_RCC_ClockConfig+0x188>)
 80013d4:	430a      	orrs	r2, r1
 80013d6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2201      	movs	r2, #1
 80013de:	4013      	ands	r3, r2
 80013e0:	d040      	beq.n	8001464 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d107      	bne.n	80013fa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	4b3e      	ldr	r3, [pc, #248]	; (80014e4 <HAL_RCC_ClockConfig+0x188>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	029b      	lsls	r3, r3, #10
 80013f2:	4013      	ands	r3, r2
 80013f4:	d114      	bne.n	8001420 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e06e      	b.n	80014d8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d107      	bne.n	8001412 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001402:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <HAL_RCC_ClockConfig+0x188>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	049b      	lsls	r3, r3, #18
 800140a:	4013      	ands	r3, r2
 800140c:	d108      	bne.n	8001420 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e062      	b.n	80014d8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001412:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <HAL_RCC_ClockConfig+0x188>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2202      	movs	r2, #2
 8001418:	4013      	ands	r3, r2
 800141a:	d101      	bne.n	8001420 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e05b      	b.n	80014d8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001420:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <HAL_RCC_ClockConfig+0x188>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2203      	movs	r2, #3
 8001426:	4393      	bics	r3, r2
 8001428:	0019      	movs	r1, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <HAL_RCC_ClockConfig+0x188>)
 8001430:	430a      	orrs	r2, r1
 8001432:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001434:	f7ff fa2e 	bl	8000894 <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143c:	e009      	b.n	8001452 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800143e:	f7ff fa29 	bl	8000894 <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	4a27      	ldr	r2, [pc, #156]	; (80014e8 <HAL_RCC_ClockConfig+0x18c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e042      	b.n	80014d8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001452:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <HAL_RCC_ClockConfig+0x188>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	220c      	movs	r2, #12
 8001458:	401a      	ands	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	429a      	cmp	r2, r3
 8001462:	d1ec      	bne.n	800143e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <HAL_RCC_ClockConfig+0x184>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2201      	movs	r2, #1
 800146a:	4013      	ands	r3, r2
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d211      	bcs.n	8001496 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_RCC_ClockConfig+0x184>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2201      	movs	r2, #1
 8001478:	4393      	bics	r3, r2
 800147a:	0019      	movs	r1, r3
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_RCC_ClockConfig+0x184>)
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_RCC_ClockConfig+0x184>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2201      	movs	r2, #1
 800148a:	4013      	ands	r3, r2
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d001      	beq.n	8001496 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e020      	b.n	80014d8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2204      	movs	r2, #4
 800149c:	4013      	ands	r3, r2
 800149e:	d009      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <HAL_RCC_ClockConfig+0x188>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4a11      	ldr	r2, [pc, #68]	; (80014ec <HAL_RCC_ClockConfig+0x190>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	0019      	movs	r1, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <HAL_RCC_ClockConfig+0x188>)
 80014b0:	430a      	orrs	r2, r1
 80014b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014b4:	f000 f820 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
 80014b8:	0001      	movs	r1, r0
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_RCC_ClockConfig+0x188>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	091b      	lsrs	r3, r3, #4
 80014c0:	220f      	movs	r2, #15
 80014c2:	4013      	ands	r3, r2
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_RCC_ClockConfig+0x194>)
 80014c6:	5cd3      	ldrb	r3, [r2, r3]
 80014c8:	000a      	movs	r2, r1
 80014ca:	40da      	lsrs	r2, r3
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_RCC_ClockConfig+0x198>)
 80014ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80014d0:	2003      	movs	r0, #3
 80014d2:	f7ff f8e3 	bl	800069c <HAL_InitTick>
  
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	0018      	movs	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	b004      	add	sp, #16
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40022000 	.word	0x40022000
 80014e4:	40021000 	.word	0x40021000
 80014e8:	00001388 	.word	0x00001388
 80014ec:	fffff8ff 	.word	0xfffff8ff
 80014f0:	08004b64 	.word	0x08004b64
 80014f4:	20000000 	.word	0x20000000

080014f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b08f      	sub	sp, #60	; 0x3c
 80014fc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80014fe:	2314      	movs	r3, #20
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	4a2c      	ldr	r2, [pc, #176]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001504:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001506:	c313      	stmia	r3!, {r0, r1, r4}
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	4a2a      	ldr	r2, [pc, #168]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001510:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001512:	c313      	stmia	r3!, {r0, r1, r4}
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800151c:	2300      	movs	r3, #0
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001520:	2300      	movs	r3, #0
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800152c:	4b23      	ldr	r3, [pc, #140]	; (80015bc <HAL_RCC_GetSysClockFreq+0xc4>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001534:	220c      	movs	r2, #12
 8001536:	4013      	ands	r3, r2
 8001538:	2b04      	cmp	r3, #4
 800153a:	d002      	beq.n	8001542 <HAL_RCC_GetSysClockFreq+0x4a>
 800153c:	2b08      	cmp	r3, #8
 800153e:	d003      	beq.n	8001548 <HAL_RCC_GetSysClockFreq+0x50>
 8001540:	e02f      	b.n	80015a2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001544:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001546:	e02f      	b.n	80015a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154a:	0c9b      	lsrs	r3, r3, #18
 800154c:	220f      	movs	r2, #15
 800154e:	4013      	ands	r3, r2
 8001550:	2214      	movs	r2, #20
 8001552:	18ba      	adds	r2, r7, r2
 8001554:	5cd3      	ldrb	r3, [r2, r3]
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <HAL_RCC_GetSysClockFreq+0xc4>)
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	220f      	movs	r2, #15
 800155e:	4013      	ands	r3, r2
 8001560:	1d3a      	adds	r2, r7, #4
 8001562:	5cd3      	ldrb	r3, [r2, r3]
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001568:	23c0      	movs	r3, #192	; 0xc0
 800156a:	025b      	lsls	r3, r3, #9
 800156c:	401a      	ands	r2, r3
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	025b      	lsls	r3, r3, #9
 8001572:	429a      	cmp	r2, r3
 8001574:	d109      	bne.n	800158a <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001576:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001578:	4811      	ldr	r0, [pc, #68]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800157a:	f7fe fdd7 	bl	800012c <__udivsi3>
 800157e:	0003      	movs	r3, r0
 8001580:	001a      	movs	r2, r3
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	4353      	muls	r3, r2
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
 8001588:	e008      	b.n	800159c <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800158a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800158e:	f7fe fdcd 	bl	800012c <__udivsi3>
 8001592:	0003      	movs	r3, r0
 8001594:	001a      	movs	r2, r3
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	4353      	muls	r3, r2
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800159c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015a0:	e002      	b.n	80015a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015a6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b00f      	add	sp, #60	; 0x3c
 80015b0:	bd90      	pop	{r4, r7, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	08004b3c 	.word	0x08004b3c
 80015b8:	08004b4c 	.word	0x08004b4c
 80015bc:	40021000 	.word	0x40021000
 80015c0:	007a1200 	.word	0x007a1200

080015c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015c8:	4b02      	ldr	r3, [pc, #8]	; (80015d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	0018      	movs	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	20000000 	.word	0x20000000

080015d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80015dc:	f7ff fff2 	bl	80015c4 <HAL_RCC_GetHCLKFreq>
 80015e0:	0001      	movs	r1, r0
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	0a1b      	lsrs	r3, r3, #8
 80015e8:	2207      	movs	r2, #7
 80015ea:	4013      	ands	r3, r2
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80015ee:	5cd3      	ldrb	r3, [r2, r3]
 80015f0:	40d9      	lsrs	r1, r3
 80015f2:	000b      	movs	r3, r1
}    
 80015f4:	0018      	movs	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	40021000 	.word	0x40021000
 8001600:	08004b74 	.word	0x08004b74

08001604 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2207      	movs	r2, #7
 8001612:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_RCC_GetClockConfig+0x4c>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2203      	movs	r2, #3
 800161a:	401a      	ands	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCC_GetClockConfig+0x4c>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	22f0      	movs	r2, #240	; 0xf0
 8001626:	401a      	ands	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_RCC_GetClockConfig+0x4c>)
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	23e0      	movs	r3, #224	; 0xe0
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	401a      	ands	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_RCC_GetClockConfig+0x50>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2201      	movs	r2, #1
 8001640:	401a      	ands	r2, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	601a      	str	r2, [r3, #0]
}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	b002      	add	sp, #8
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	40021000 	.word	0x40021000
 8001654:	40022000 	.word	0x40022000

08001658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e042      	b.n	80016f0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	223d      	movs	r2, #61	; 0x3d
 800166e:	5c9b      	ldrb	r3, [r3, r2]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d107      	bne.n	8001686 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	223c      	movs	r2, #60	; 0x3c
 800167a:	2100      	movs	r1, #0
 800167c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	0018      	movs	r0, r3
 8001682:	f000 f839 	bl	80016f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	223d      	movs	r2, #61	; 0x3d
 800168a:	2102      	movs	r1, #2
 800168c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3304      	adds	r3, #4
 8001696:	0019      	movs	r1, r3
 8001698:	0010      	movs	r0, r2
 800169a:	f000 f9b7 	bl	8001a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2246      	movs	r2, #70	; 0x46
 80016a2:	2101      	movs	r1, #1
 80016a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	223e      	movs	r2, #62	; 0x3e
 80016aa:	2101      	movs	r1, #1
 80016ac:	5499      	strb	r1, [r3, r2]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	223f      	movs	r2, #63	; 0x3f
 80016b2:	2101      	movs	r1, #1
 80016b4:	5499      	strb	r1, [r3, r2]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2240      	movs	r2, #64	; 0x40
 80016ba:	2101      	movs	r1, #1
 80016bc:	5499      	strb	r1, [r3, r2]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2241      	movs	r2, #65	; 0x41
 80016c2:	2101      	movs	r1, #1
 80016c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2242      	movs	r2, #66	; 0x42
 80016ca:	2101      	movs	r1, #1
 80016cc:	5499      	strb	r1, [r3, r2]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2243      	movs	r2, #67	; 0x43
 80016d2:	2101      	movs	r1, #1
 80016d4:	5499      	strb	r1, [r3, r2]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2244      	movs	r2, #68	; 0x44
 80016da:	2101      	movs	r1, #1
 80016dc:	5499      	strb	r1, [r3, r2]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2245      	movs	r2, #69	; 0x45
 80016e2:	2101      	movs	r1, #1
 80016e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	223d      	movs	r2, #61	; 0x3d
 80016ea:	2101      	movs	r1, #1
 80016ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	0018      	movs	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b002      	add	sp, #8
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b002      	add	sp, #8
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	223d      	movs	r2, #61	; 0x3d
 8001714:	5c9b      	ldrb	r3, [r3, r2]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b01      	cmp	r3, #1
 800171a:	d001      	beq.n	8001720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e035      	b.n	800178c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	223d      	movs	r2, #61	; 0x3d
 8001724:	2102      	movs	r1, #2
 8001726:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2101      	movs	r1, #1
 8001734:	430a      	orrs	r2, r1
 8001736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a15      	ldr	r2, [pc, #84]	; (8001794 <HAL_TIM_Base_Start_IT+0x8c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d009      	beq.n	8001756 <HAL_TIM_Base_Start_IT+0x4e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a14      	ldr	r2, [pc, #80]	; (8001798 <HAL_TIM_Base_Start_IT+0x90>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d004      	beq.n	8001756 <HAL_TIM_Base_Start_IT+0x4e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a12      	ldr	r2, [pc, #72]	; (800179c <HAL_TIM_Base_Start_IT+0x94>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d111      	bne.n	800177a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2207      	movs	r2, #7
 800175e:	4013      	ands	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2b06      	cmp	r3, #6
 8001766:	d010      	beq.n	800178a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2101      	movs	r1, #1
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001778:	e007      	b.n	800178a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2101      	movs	r1, #1
 8001786:	430a      	orrs	r2, r1
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b004      	add	sp, #16
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40012c00 	.word	0x40012c00
 8001798:	40000400 	.word	0x40000400
 800179c:	40014000 	.word	0x40014000

080017a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	2202      	movs	r2, #2
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d124      	bne.n	8001800 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	2202      	movs	r2, #2
 80017be:	4013      	ands	r3, r2
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d11d      	bne.n	8001800 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2203      	movs	r2, #3
 80017ca:	4252      	negs	r2, r2
 80017cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	2203      	movs	r2, #3
 80017dc:	4013      	ands	r3, r2
 80017de:	d004      	beq.n	80017ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	0018      	movs	r0, r3
 80017e4:	f000 f8fa 	bl	80019dc <HAL_TIM_IC_CaptureCallback>
 80017e8:	e007      	b.n	80017fa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	0018      	movs	r0, r3
 80017ee:	f000 f8ed 	bl	80019cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	0018      	movs	r0, r3
 80017f6:	f000 f8f9 	bl	80019ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	2204      	movs	r2, #4
 8001808:	4013      	ands	r3, r2
 800180a:	2b04      	cmp	r3, #4
 800180c:	d125      	bne.n	800185a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2204      	movs	r2, #4
 8001816:	4013      	ands	r3, r2
 8001818:	2b04      	cmp	r3, #4
 800181a:	d11e      	bne.n	800185a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2205      	movs	r2, #5
 8001822:	4252      	negs	r2, r2
 8001824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2202      	movs	r2, #2
 800182a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699a      	ldr	r2, [r3, #24]
 8001832:	23c0      	movs	r3, #192	; 0xc0
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4013      	ands	r3, r2
 8001838:	d004      	beq.n	8001844 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	0018      	movs	r0, r3
 800183e:	f000 f8cd 	bl	80019dc <HAL_TIM_IC_CaptureCallback>
 8001842:	e007      	b.n	8001854 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	0018      	movs	r0, r3
 8001848:	f000 f8c0 	bl	80019cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	0018      	movs	r0, r3
 8001850:	f000 f8cc 	bl	80019ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	2208      	movs	r2, #8
 8001862:	4013      	ands	r3, r2
 8001864:	2b08      	cmp	r3, #8
 8001866:	d124      	bne.n	80018b2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2208      	movs	r2, #8
 8001870:	4013      	ands	r3, r2
 8001872:	2b08      	cmp	r3, #8
 8001874:	d11d      	bne.n	80018b2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2209      	movs	r2, #9
 800187c:	4252      	negs	r2, r2
 800187e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2204      	movs	r2, #4
 8001884:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	2203      	movs	r2, #3
 800188e:	4013      	ands	r3, r2
 8001890:	d004      	beq.n	800189c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	0018      	movs	r0, r3
 8001896:	f000 f8a1 	bl	80019dc <HAL_TIM_IC_CaptureCallback>
 800189a:	e007      	b.n	80018ac <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 f894 	bl	80019cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	0018      	movs	r0, r3
 80018a8:	f000 f8a0 	bl	80019ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	2210      	movs	r2, #16
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b10      	cmp	r3, #16
 80018be:	d125      	bne.n	800190c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2210      	movs	r2, #16
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d11e      	bne.n	800190c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2211      	movs	r2, #17
 80018d4:	4252      	negs	r2, r2
 80018d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2208      	movs	r2, #8
 80018dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	69da      	ldr	r2, [r3, #28]
 80018e4:	23c0      	movs	r3, #192	; 0xc0
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4013      	ands	r3, r2
 80018ea:	d004      	beq.n	80018f6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	0018      	movs	r0, r3
 80018f0:	f000 f874 	bl	80019dc <HAL_TIM_IC_CaptureCallback>
 80018f4:	e007      	b.n	8001906 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	0018      	movs	r0, r3
 80018fa:	f000 f867 	bl	80019cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	0018      	movs	r0, r3
 8001902:	f000 f873 	bl	80019ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	2201      	movs	r2, #1
 8001914:	4013      	ands	r3, r2
 8001916:	2b01      	cmp	r3, #1
 8001918:	d10f      	bne.n	800193a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2201      	movs	r2, #1
 8001922:	4013      	ands	r3, r2
 8001924:	2b01      	cmp	r3, #1
 8001926:	d108      	bne.n	800193a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2202      	movs	r2, #2
 800192e:	4252      	negs	r2, r2
 8001930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	0018      	movs	r0, r3
 8001936:	f7fe fe23 	bl	8000580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	4013      	ands	r3, r2
 8001944:	2b80      	cmp	r3, #128	; 0x80
 8001946:	d10f      	bne.n	8001968 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2280      	movs	r2, #128	; 0x80
 8001950:	4013      	ands	r3, r2
 8001952:	2b80      	cmp	r3, #128	; 0x80
 8001954:	d108      	bne.n	8001968 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2281      	movs	r2, #129	; 0x81
 800195c:	4252      	negs	r2, r2
 800195e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	0018      	movs	r0, r3
 8001964:	f000 f8d0 	bl	8001b08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	2240      	movs	r2, #64	; 0x40
 8001970:	4013      	ands	r3, r2
 8001972:	2b40      	cmp	r3, #64	; 0x40
 8001974:	d10f      	bne.n	8001996 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2240      	movs	r2, #64	; 0x40
 800197e:	4013      	ands	r3, r2
 8001980:	2b40      	cmp	r3, #64	; 0x40
 8001982:	d108      	bne.n	8001996 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2241      	movs	r2, #65	; 0x41
 800198a:	4252      	negs	r2, r2
 800198c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	0018      	movs	r0, r3
 8001992:	f000 f833 	bl	80019fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	2220      	movs	r2, #32
 800199e:	4013      	ands	r3, r2
 80019a0:	2b20      	cmp	r3, #32
 80019a2:	d10f      	bne.n	80019c4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2220      	movs	r2, #32
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	d108      	bne.n	80019c4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2221      	movs	r2, #33	; 0x21
 80019b8:	4252      	negs	r2, r2
 80019ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	0018      	movs	r0, r3
 80019c0:	f000 f89a 	bl	8001af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019c4:	46c0      	nop			; (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b002      	add	sp, #8
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b002      	add	sp, #8
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019e4:	46c0      	nop			; (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b002      	add	sp, #8
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b002      	add	sp, #8
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a04:	46c0      	nop			; (mov r8, r8)
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b002      	add	sp, #8
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a2f      	ldr	r2, [pc, #188]	; (8001adc <TIM_Base_SetConfig+0xd0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d003      	beq.n	8001a2c <TIM_Base_SetConfig+0x20>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a2e      	ldr	r2, [pc, #184]	; (8001ae0 <TIM_Base_SetConfig+0xd4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d108      	bne.n	8001a3e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2270      	movs	r2, #112	; 0x70
 8001a30:	4393      	bics	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a26      	ldr	r2, [pc, #152]	; (8001adc <TIM_Base_SetConfig+0xd0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <TIM_Base_SetConfig+0x62>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a25      	ldr	r2, [pc, #148]	; (8001ae0 <TIM_Base_SetConfig+0xd4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00f      	beq.n	8001a6e <TIM_Base_SetConfig+0x62>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a24      	ldr	r2, [pc, #144]	; (8001ae4 <TIM_Base_SetConfig+0xd8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00b      	beq.n	8001a6e <TIM_Base_SetConfig+0x62>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a23      	ldr	r2, [pc, #140]	; (8001ae8 <TIM_Base_SetConfig+0xdc>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d007      	beq.n	8001a6e <TIM_Base_SetConfig+0x62>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a22      	ldr	r2, [pc, #136]	; (8001aec <TIM_Base_SetConfig+0xe0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d003      	beq.n	8001a6e <TIM_Base_SetConfig+0x62>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a21      	ldr	r2, [pc, #132]	; (8001af0 <TIM_Base_SetConfig+0xe4>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d108      	bne.n	8001a80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4a20      	ldr	r2, [pc, #128]	; (8001af4 <TIM_Base_SetConfig+0xe8>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	4393      	bics	r3, r2
 8001a86:	001a      	movs	r2, r3
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <TIM_Base_SetConfig+0xd0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00b      	beq.n	8001ac6 <TIM_Base_SetConfig+0xba>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <TIM_Base_SetConfig+0xdc>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d007      	beq.n	8001ac6 <TIM_Base_SetConfig+0xba>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a0c      	ldr	r2, [pc, #48]	; (8001aec <TIM_Base_SetConfig+0xe0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d003      	beq.n	8001ac6 <TIM_Base_SetConfig+0xba>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <TIM_Base_SetConfig+0xe4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d103      	bne.n	8001ace <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	691a      	ldr	r2, [r3, #16]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	615a      	str	r2, [r3, #20]
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b004      	add	sp, #16
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40012c00 	.word	0x40012c00
 8001ae0:	40000400 	.word	0x40000400
 8001ae4:	40002000 	.word	0x40002000
 8001ae8:	40014000 	.word	0x40014000
 8001aec:	40014400 	.word	0x40014400
 8001af0:	40014800 	.word	0x40014800
 8001af4:	fffffcff 	.word	0xfffffcff

08001af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b00:	46c0      	nop			; (mov r8, r8)
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b002      	add	sp, #8
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b002      	add	sp, #8
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e044      	b.n	8001bb4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d107      	bne.n	8001b42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2274      	movs	r2, #116	; 0x74
 8001b36:	2100      	movs	r1, #0
 8001b38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f7fe fd61 	bl	8000604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2224      	movs	r2, #36	; 0x24
 8001b46:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2101      	movs	r1, #1
 8001b54:	438a      	bics	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f000 f8da 	bl	8001d14 <UART_SetConfig>
 8001b60:	0003      	movs	r3, r0
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e024      	b.n	8001bb4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f000 fa25 	bl	8001fc4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	490d      	ldr	r1, [pc, #52]	; (8001bbc <HAL_UART_Init+0xa4>)
 8001b86:	400a      	ands	r2, r1
 8001b88:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2108      	movs	r1, #8
 8001b96:	438a      	bics	r2, r1
 8001b98:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f000 fabd 	bl	800212c <UART_CheckIdleState>
 8001bb2:	0003      	movs	r3, r0
}
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b002      	add	sp, #8
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	fffff7ff 	.word	0xfffff7ff

08001bc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	1dbb      	adds	r3, r7, #6
 8001bce:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001bd4:	2b20      	cmp	r3, #32
 8001bd6:	d000      	beq.n	8001bda <HAL_UART_Transmit+0x1a>
 8001bd8:	e096      	b.n	8001d08 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_UART_Transmit+0x28>
 8001be0:	1dbb      	adds	r3, r7, #6
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e08e      	b.n	8001d0a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	015b      	lsls	r3, r3, #5
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d109      	bne.n	8001c0c <HAL_UART_Transmit+0x4c>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d105      	bne.n	8001c0c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2201      	movs	r2, #1
 8001c04:	4013      	ands	r3, r2
 8001c06:	d001      	beq.n	8001c0c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e07e      	b.n	8001d0a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2274      	movs	r2, #116	; 0x74
 8001c10:	5c9b      	ldrb	r3, [r3, r2]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_UART_Transmit+0x5a>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e077      	b.n	8001d0a <HAL_UART_Transmit+0x14a>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2274      	movs	r2, #116	; 0x74
 8001c1e:	2101      	movs	r1, #1
 8001c20:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2280      	movs	r2, #128	; 0x80
 8001c26:	2100      	movs	r1, #0
 8001c28:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2221      	movs	r2, #33	; 0x21
 8001c2e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c30:	f7fe fe30 	bl	8000894 <HAL_GetTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1dba      	adds	r2, r7, #6
 8001c3c:	2150      	movs	r1, #80	; 0x50
 8001c3e:	8812      	ldrh	r2, [r2, #0]
 8001c40:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1dba      	adds	r2, r7, #6
 8001c46:	2152      	movs	r1, #82	; 0x52
 8001c48:	8812      	ldrh	r2, [r2, #0]
 8001c4a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	015b      	lsls	r3, r3, #5
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d108      	bne.n	8001c6a <HAL_UART_Transmit+0xaa>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d104      	bne.n	8001c6a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	e003      	b.n	8001c72 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2274      	movs	r2, #116	; 0x74
 8001c76:	2100      	movs	r1, #0
 8001c78:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001c7a:	e02d      	b.n	8001cd8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	0013      	movs	r3, r2
 8001c86:	2200      	movs	r2, #0
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	f000 fa97 	bl	80021bc <UART_WaitOnFlagUntilTimeout>
 8001c8e:	1e03      	subs	r3, r0, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e039      	b.n	8001d0a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	881a      	ldrh	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	05d2      	lsls	r2, r2, #23
 8001ca6:	0dd2      	lsrs	r2, r2, #23
 8001ca8:	b292      	uxth	r2, r2
 8001caa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	3302      	adds	r3, #2
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	e008      	b.n	8001cc6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	781a      	ldrb	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	b292      	uxth	r2, r2
 8001cbe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2252      	movs	r2, #82	; 0x52
 8001cca:	5a9b      	ldrh	r3, [r3, r2]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b299      	uxth	r1, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2252      	movs	r2, #82	; 0x52
 8001cd6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2252      	movs	r2, #82	; 0x52
 8001cdc:	5a9b      	ldrh	r3, [r3, r2]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1cb      	bne.n	8001c7c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	0013      	movs	r3, r2
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2140      	movs	r1, #64	; 0x40
 8001cf2:	f000 fa63 	bl	80021bc <UART_WaitOnFlagUntilTimeout>
 8001cf6:	1e03      	subs	r3, r0, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e005      	b.n	8001d0a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2220      	movs	r2, #32
 8001d02:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e000      	b.n	8001d0a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001d08:	2302      	movs	r3, #2
  }
}
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b008      	add	sp, #32
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d1c:	231e      	movs	r3, #30
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a97      	ldr	r2, [pc, #604]	; (8001fa0 <UART_SetConfig+0x28c>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	0019      	movs	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a92      	ldr	r2, [pc, #584]	; (8001fa4 <UART_SetConfig+0x290>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a89      	ldr	r2, [pc, #548]	; (8001fa8 <UART_SetConfig+0x294>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a85      	ldr	r2, [pc, #532]	; (8001fac <UART_SetConfig+0x298>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d127      	bne.n	8001dea <UART_SetConfig+0xd6>
 8001d9a:	4b85      	ldr	r3, [pc, #532]	; (8001fb0 <UART_SetConfig+0x29c>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	2203      	movs	r2, #3
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d00d      	beq.n	8001dc2 <UART_SetConfig+0xae>
 8001da6:	d81b      	bhi.n	8001de0 <UART_SetConfig+0xcc>
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d014      	beq.n	8001dd6 <UART_SetConfig+0xc2>
 8001dac:	d818      	bhi.n	8001de0 <UART_SetConfig+0xcc>
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <UART_SetConfig+0xa4>
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d00a      	beq.n	8001dcc <UART_SetConfig+0xb8>
 8001db6:	e013      	b.n	8001de0 <UART_SetConfig+0xcc>
 8001db8:	231f      	movs	r3, #31
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	e035      	b.n	8001e2e <UART_SetConfig+0x11a>
 8001dc2:	231f      	movs	r3, #31
 8001dc4:	18fb      	adds	r3, r7, r3
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	e030      	b.n	8001e2e <UART_SetConfig+0x11a>
 8001dcc:	231f      	movs	r3, #31
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	e02b      	b.n	8001e2e <UART_SetConfig+0x11a>
 8001dd6:	231f      	movs	r3, #31
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	2208      	movs	r2, #8
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	e026      	b.n	8001e2e <UART_SetConfig+0x11a>
 8001de0:	231f      	movs	r3, #31
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	2210      	movs	r2, #16
 8001de6:	701a      	strb	r2, [r3, #0]
 8001de8:	e021      	b.n	8001e2e <UART_SetConfig+0x11a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a71      	ldr	r2, [pc, #452]	; (8001fb4 <UART_SetConfig+0x2a0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d104      	bne.n	8001dfe <UART_SetConfig+0xea>
 8001df4:	231f      	movs	r3, #31
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
 8001dfc:	e017      	b.n	8001e2e <UART_SetConfig+0x11a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a6d      	ldr	r2, [pc, #436]	; (8001fb8 <UART_SetConfig+0x2a4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d104      	bne.n	8001e12 <UART_SetConfig+0xfe>
 8001e08:	231f      	movs	r3, #31
 8001e0a:	18fb      	adds	r3, r7, r3
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	e00d      	b.n	8001e2e <UART_SetConfig+0x11a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a69      	ldr	r2, [pc, #420]	; (8001fbc <UART_SetConfig+0x2a8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d104      	bne.n	8001e26 <UART_SetConfig+0x112>
 8001e1c:	231f      	movs	r3, #31
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
 8001e24:	e003      	b.n	8001e2e <UART_SetConfig+0x11a>
 8001e26:	231f      	movs	r3, #31
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	2210      	movs	r2, #16
 8001e2c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69da      	ldr	r2, [r3, #28]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d15d      	bne.n	8001ef6 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8001e3a:	231f      	movs	r3, #31
 8001e3c:	18fb      	adds	r3, r7, r3
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d015      	beq.n	8001e70 <UART_SetConfig+0x15c>
 8001e44:	dc18      	bgt.n	8001e78 <UART_SetConfig+0x164>
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d00d      	beq.n	8001e66 <UART_SetConfig+0x152>
 8001e4a:	dc15      	bgt.n	8001e78 <UART_SetConfig+0x164>
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <UART_SetConfig+0x142>
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d005      	beq.n	8001e60 <UART_SetConfig+0x14c>
 8001e54:	e010      	b.n	8001e78 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e56:	f7ff fbbf 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	61bb      	str	r3, [r7, #24]
        break;
 8001e5e:	e012      	b.n	8001e86 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e60:	4b57      	ldr	r3, [pc, #348]	; (8001fc0 <UART_SetConfig+0x2ac>)
 8001e62:	61bb      	str	r3, [r7, #24]
        break;
 8001e64:	e00f      	b.n	8001e86 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e66:	f7ff fb47 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	61bb      	str	r3, [r7, #24]
        break;
 8001e6e:	e00a      	b.n	8001e86 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	61bb      	str	r3, [r7, #24]
        break;
 8001e76:	e006      	b.n	8001e86 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e7c:	231e      	movs	r3, #30
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
        break;
 8001e84:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d100      	bne.n	8001e8e <UART_SetConfig+0x17a>
 8001e8c:	e07b      	b.n	8001f86 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	005a      	lsls	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	085b      	lsrs	r3, r3, #1
 8001e98:	18d2      	adds	r2, r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	0010      	movs	r0, r2
 8001ea2:	f7fe f943 	bl	800012c <__udivsi3>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	2b0f      	cmp	r3, #15
 8001eb0:	d91c      	bls.n	8001eec <UART_SetConfig+0x1d8>
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	025b      	lsls	r3, r3, #9
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d217      	bcs.n	8001eec <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	200e      	movs	r0, #14
 8001ec2:	183b      	adds	r3, r7, r0
 8001ec4:	210f      	movs	r1, #15
 8001ec6:	438a      	bics	r2, r1
 8001ec8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	b299      	uxth	r1, r3
 8001ed6:	183b      	adds	r3, r7, r0
 8001ed8:	183a      	adds	r2, r7, r0
 8001eda:	8812      	ldrh	r2, [r2, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	183a      	adds	r2, r7, r0
 8001ee6:	8812      	ldrh	r2, [r2, #0]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	e04c      	b.n	8001f86 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8001eec:	231e      	movs	r3, #30
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	e047      	b.n	8001f86 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001ef6:	231f      	movs	r3, #31
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d015      	beq.n	8001f2c <UART_SetConfig+0x218>
 8001f00:	dc18      	bgt.n	8001f34 <UART_SetConfig+0x220>
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d00d      	beq.n	8001f22 <UART_SetConfig+0x20e>
 8001f06:	dc15      	bgt.n	8001f34 <UART_SetConfig+0x220>
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <UART_SetConfig+0x1fe>
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d005      	beq.n	8001f1c <UART_SetConfig+0x208>
 8001f10:	e010      	b.n	8001f34 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f12:	f7ff fb61 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8001f16:	0003      	movs	r3, r0
 8001f18:	61bb      	str	r3, [r7, #24]
        break;
 8001f1a:	e012      	b.n	8001f42 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f1c:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <UART_SetConfig+0x2ac>)
 8001f1e:	61bb      	str	r3, [r7, #24]
        break;
 8001f20:	e00f      	b.n	8001f42 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f22:	f7ff fae9 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
 8001f26:	0003      	movs	r3, r0
 8001f28:	61bb      	str	r3, [r7, #24]
        break;
 8001f2a:	e00a      	b.n	8001f42 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	61bb      	str	r3, [r7, #24]
        break;
 8001f32:	e006      	b.n	8001f42 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f38:	231e      	movs	r3, #30
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
        break;
 8001f40:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01e      	beq.n	8001f86 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	085a      	lsrs	r2, r3, #1
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	18d2      	adds	r2, r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	0019      	movs	r1, r3
 8001f58:	0010      	movs	r0, r2
 8001f5a:	f7fe f8e7 	bl	800012c <__udivsi3>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	d909      	bls.n	8001f7e <UART_SetConfig+0x26a>
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	025b      	lsls	r3, r3, #9
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d204      	bcs.n	8001f7e <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	60da      	str	r2, [r3, #12]
 8001f7c:	e003      	b.n	8001f86 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8001f7e:	231e      	movs	r3, #30
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001f92:	231e      	movs	r3, #30
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	781b      	ldrb	r3, [r3, #0]
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b008      	add	sp, #32
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	efff69f3 	.word	0xefff69f3
 8001fa4:	ffffcfff 	.word	0xffffcfff
 8001fa8:	fffff4ff 	.word	0xfffff4ff
 8001fac:	40013800 	.word	0x40013800
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40004400 	.word	0x40004400
 8001fb8:	40004800 	.word	0x40004800
 8001fbc:	40004c00 	.word	0x40004c00
 8001fc0:	007a1200 	.word	0x007a1200

08001fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a4a      	ldr	r2, [pc, #296]	; (8002108 <UART_AdvFeatureConfig+0x144>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d00b      	beq.n	8002010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4a43      	ldr	r2, [pc, #268]	; (800210c <UART_AdvFeatureConfig+0x148>)
 8002000:	4013      	ands	r3, r2
 8002002:	0019      	movs	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	2204      	movs	r2, #4
 8002016:	4013      	ands	r3, r2
 8002018:	d00b      	beq.n	8002032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4a3b      	ldr	r2, [pc, #236]	; (8002110 <UART_AdvFeatureConfig+0x14c>)
 8002022:	4013      	ands	r3, r2
 8002024:	0019      	movs	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	2208      	movs	r2, #8
 8002038:	4013      	ands	r3, r2
 800203a:	d00b      	beq.n	8002054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4a34      	ldr	r2, [pc, #208]	; (8002114 <UART_AdvFeatureConfig+0x150>)
 8002044:	4013      	ands	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	2210      	movs	r2, #16
 800205a:	4013      	ands	r3, r2
 800205c:	d00b      	beq.n	8002076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a2c      	ldr	r2, [pc, #176]	; (8002118 <UART_AdvFeatureConfig+0x154>)
 8002066:	4013      	ands	r3, r2
 8002068:	0019      	movs	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2220      	movs	r2, #32
 800207c:	4013      	ands	r3, r2
 800207e:	d00b      	beq.n	8002098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	4a25      	ldr	r2, [pc, #148]	; (800211c <UART_AdvFeatureConfig+0x158>)
 8002088:	4013      	ands	r3, r2
 800208a:	0019      	movs	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	2240      	movs	r2, #64	; 0x40
 800209e:	4013      	ands	r3, r2
 80020a0:	d01d      	beq.n	80020de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <UART_AdvFeatureConfig+0x15c>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	0019      	movs	r1, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	035b      	lsls	r3, r3, #13
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d10b      	bne.n	80020de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4a15      	ldr	r2, [pc, #84]	; (8002124 <UART_AdvFeatureConfig+0x160>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	2280      	movs	r2, #128	; 0x80
 80020e4:	4013      	ands	r3, r2
 80020e6:	d00b      	beq.n	8002100 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <UART_AdvFeatureConfig+0x164>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	0019      	movs	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	605a      	str	r2, [r3, #4]
  }
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}
 8002108:	fffdffff 	.word	0xfffdffff
 800210c:	fffeffff 	.word	0xfffeffff
 8002110:	fffbffff 	.word	0xfffbffff
 8002114:	ffff7fff 	.word	0xffff7fff
 8002118:	ffffefff 	.word	0xffffefff
 800211c:	ffffdfff 	.word	0xffffdfff
 8002120:	ffefffff 	.word	0xffefffff
 8002124:	ff9fffff 	.word	0xff9fffff
 8002128:	fff7ffff 	.word	0xfff7ffff

0800212c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af02      	add	r7, sp, #8
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2280      	movs	r2, #128	; 0x80
 8002138:	2100      	movs	r1, #0
 800213a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800213c:	f7fe fbaa 	bl	8000894 <HAL_GetTick>
 8002140:	0003      	movs	r3, r0
 8002142:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2208      	movs	r2, #8
 800214c:	4013      	ands	r3, r2
 800214e:	2b08      	cmp	r3, #8
 8002150:	d10c      	bne.n	800216c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	0391      	lsls	r1, r2, #14
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4a17      	ldr	r2, [pc, #92]	; (80021b8 <UART_CheckIdleState+0x8c>)
 800215c:	9200      	str	r2, [sp, #0]
 800215e:	2200      	movs	r2, #0
 8002160:	f000 f82c 	bl	80021bc <UART_WaitOnFlagUntilTimeout>
 8002164:	1e03      	subs	r3, r0, #0
 8002166:	d001      	beq.n	800216c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e021      	b.n	80021b0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2204      	movs	r2, #4
 8002174:	4013      	ands	r3, r2
 8002176:	2b04      	cmp	r3, #4
 8002178:	d10c      	bne.n	8002194 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2280      	movs	r2, #128	; 0x80
 800217e:	03d1      	lsls	r1, r2, #15
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <UART_CheckIdleState+0x8c>)
 8002184:	9200      	str	r2, [sp, #0]
 8002186:	2200      	movs	r2, #0
 8002188:	f000 f818 	bl	80021bc <UART_WaitOnFlagUntilTimeout>
 800218c:	1e03      	subs	r3, r0, #0
 800218e:	d001      	beq.n	8002194 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e00d      	b.n	80021b0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2220      	movs	r2, #32
 800219e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2274      	movs	r2, #116	; 0x74
 80021aa:	2100      	movs	r1, #0
 80021ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b004      	add	sp, #16
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	01ffffff 	.word	0x01ffffff

080021bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b094      	sub	sp, #80	; 0x50
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	1dfb      	adds	r3, r7, #7
 80021ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021cc:	e0a3      	b.n	8002316 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021d0:	3301      	adds	r3, #1
 80021d2:	d100      	bne.n	80021d6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80021d4:	e09f      	b.n	8002316 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d6:	f7fe fb5d 	bl	8000894 <HAL_GetTick>
 80021da:	0002      	movs	r2, r0
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d302      	bcc.n	80021ec <UART_WaitOnFlagUntilTimeout+0x30>
 80021e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d13d      	bne.n	8002268 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021ec:	f3ef 8310 	mrs	r3, PRIMASK
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80021f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021f4:	647b      	str	r3, [r7, #68]	; 0x44
 80021f6:	2301      	movs	r3, #1
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	f383 8810 	msr	PRIMASK, r3
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	494c      	ldr	r1, [pc, #304]	; (8002340 <UART_WaitOnFlagUntilTimeout+0x184>)
 800220e:	400a      	ands	r2, r1
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002214:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	f383 8810 	msr	PRIMASK, r3
}
 800221c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800221e:	f3ef 8310 	mrs	r3, PRIMASK
 8002222:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002226:	643b      	str	r3, [r7, #64]	; 0x40
 8002228:	2301      	movs	r3, #1
 800222a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222e:	f383 8810 	msr	PRIMASK, r3
}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2101      	movs	r1, #1
 8002240:	438a      	bics	r2, r1
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800224a:	f383 8810 	msr	PRIMASK, r3
}
 800224e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2220      	movs	r2, #32
 800225a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2274      	movs	r2, #116	; 0x74
 8002260:	2100      	movs	r1, #0
 8002262:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e067      	b.n	8002338 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2204      	movs	r2, #4
 8002270:	4013      	ands	r3, r2
 8002272:	d050      	beq.n	8002316 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	401a      	ands	r2, r3
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	429a      	cmp	r2, r3
 8002286:	d146      	bne.n	8002316 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2280      	movs	r2, #128	; 0x80
 800228e:	0112      	lsls	r2, r2, #4
 8002290:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002292:	f3ef 8310 	mrs	r3, PRIMASK
 8002296:	613b      	str	r3, [r7, #16]
  return(result);
 8002298:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800229a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800229c:	2301      	movs	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f383 8810 	msr	PRIMASK, r3
}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4923      	ldr	r1, [pc, #140]	; (8002340 <UART_WaitOnFlagUntilTimeout+0x184>)
 80022b4:	400a      	ands	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	f383 8810 	msr	PRIMASK, r3
}
 80022c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022c4:	f3ef 8310 	mrs	r3, PRIMASK
 80022c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80022ca:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80022ce:	2301      	movs	r3, #1
 80022d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	f383 8810 	msr	PRIMASK, r3
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2101      	movs	r1, #1
 80022e6:	438a      	bics	r2, r1
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	f383 8810 	msr	PRIMASK, r3
}
 80022f4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2220      	movs	r2, #32
 80022fa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2280      	movs	r2, #128	; 0x80
 8002306:	2120      	movs	r1, #32
 8002308:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2274      	movs	r2, #116	; 0x74
 800230e:	2100      	movs	r1, #0
 8002310:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e010      	b.n	8002338 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	4013      	ands	r3, r2
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	425a      	negs	r2, r3
 8002326:	4153      	adcs	r3, r2
 8002328:	b2db      	uxtb	r3, r3
 800232a:	001a      	movs	r2, r3
 800232c:	1dfb      	adds	r3, r7, #7
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d100      	bne.n	8002336 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002334:	e74b      	b.n	80021ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b014      	add	sp, #80	; 0x50
 800233e:	bd80      	pop	{r7, pc}
 8002340:	fffffe5f 	.word	0xfffffe5f

08002344 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	0002      	movs	r2, r0
 800234c:	1dbb      	adds	r3, r7, #6
 800234e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002354:	1dbb      	adds	r3, r7, #6
 8002356:	2200      	movs	r2, #0
 8002358:	5e9b      	ldrsh	r3, [r3, r2]
 800235a:	2b84      	cmp	r3, #132	; 0x84
 800235c:	d006      	beq.n	800236c <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800235e:	1dbb      	adds	r3, r7, #6
 8002360:	2200      	movs	r2, #0
 8002362:	5e9a      	ldrsh	r2, [r3, r2]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	18d3      	adds	r3, r2, r3
 8002368:	3303      	adds	r3, #3
 800236a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800236c:	68fb      	ldr	r3, [r7, #12]
}
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	b004      	add	sp, #16
 8002374:	bd80      	pop	{r7, pc}

08002376 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800237c:	f3ef 8305 	mrs	r3, IPSR
 8002380:	607b      	str	r3, [r7, #4]
  return(result);
 8002382:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002384:	1e5a      	subs	r2, r3, #1
 8002386:	4193      	sbcs	r3, r2
 8002388:	b2db      	uxtb	r3, r3
}
 800238a:	0018      	movs	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	b002      	add	sp, #8
 8002390:	bd80      	pop	{r7, pc}

08002392 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002396:	f000 ff9d 	bl	80032d4 <vTaskStartScheduler>
  
  return osOK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80023a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a4:	b089      	sub	sp, #36	; 0x24
 80023a6:	af04      	add	r7, sp, #16
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d020      	beq.n	80023f6 <osThreadCreate+0x54>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01c      	beq.n	80023f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685c      	ldr	r4, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681d      	ldr	r5, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691e      	ldr	r6, [r3, #16]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2208      	movs	r2, #8
 80023cc:	5e9b      	ldrsh	r3, [r3, r2]
 80023ce:	0018      	movs	r0, r3
 80023d0:	f7ff ffb8 	bl	8002344 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023dc:	6839      	ldr	r1, [r7, #0]
 80023de:	9302      	str	r3, [sp, #8]
 80023e0:	9201      	str	r2, [sp, #4]
 80023e2:	9000      	str	r0, [sp, #0]
 80023e4:	000b      	movs	r3, r1
 80023e6:	0032      	movs	r2, r6
 80023e8:	0029      	movs	r1, r5
 80023ea:	0020      	movs	r0, r4
 80023ec:	f000 fe04 	bl	8002ff8 <xTaskCreateStatic>
 80023f0:	0003      	movs	r3, r0
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	e01d      	b.n	8002432 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685c      	ldr	r4, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002402:	b29e      	uxth	r6, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2208      	movs	r2, #8
 8002408:	5e9b      	ldrsh	r3, [r3, r2]
 800240a:	0018      	movs	r0, r3
 800240c:	f7ff ff9a 	bl	8002344 <makeFreeRtosPriority>
 8002410:	0001      	movs	r1, r0
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	230c      	movs	r3, #12
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	9301      	str	r3, [sp, #4]
 800241a:	9100      	str	r1, [sp, #0]
 800241c:	0013      	movs	r3, r2
 800241e:	0032      	movs	r2, r6
 8002420:	0029      	movs	r1, r5
 8002422:	0020      	movs	r0, r4
 8002424:	f000 fe2b 	bl	800307e <xTaskCreate>
 8002428:	0003      	movs	r3, r0
 800242a:	2b01      	cmp	r3, #1
 800242c:	d001      	beq.n	8002432 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800242e:	2300      	movs	r3, #0
 8002430:	e000      	b.n	8002434 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002432:	68fb      	ldr	r3, [r7, #12]
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b005      	add	sp, #20
 800243a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800243c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b085      	sub	sp, #20
 8002440:	af02      	add	r7, sp, #8
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d011      	beq.n	8002472 <osMessageCreate+0x36>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00d      	beq.n	8002472 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6859      	ldr	r1, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	2400      	movs	r4, #0
 8002468:	9400      	str	r4, [sp, #0]
 800246a:	f000 f9b8 	bl	80027de <xQueueGenericCreateStatic>
 800246e:	0003      	movs	r3, r0
 8002470:	e008      	b.n	8002484 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	0019      	movs	r1, r3
 800247e:	f000 f9f9 	bl	8002874 <xQueueGenericCreate>
 8002482:	0003      	movs	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002484:	0018      	movs	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	b003      	add	sp, #12
 800248a:	bd90      	pop	{r4, r7, pc}

0800248c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <osMessagePut+0x1e>
    ticks = 1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80024aa:	f7ff ff64 	bl	8002376 <inHandlerMode>
 80024ae:	1e03      	subs	r3, r0, #0
 80024b0:	d014      	beq.n	80024dc <osMessagePut+0x50>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80024b2:	2310      	movs	r3, #16
 80024b4:	18fa      	adds	r2, r7, r3
 80024b6:	2308      	movs	r3, #8
 80024b8:	18f9      	adds	r1, r7, r3
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	2300      	movs	r3, #0
 80024be:	f000 faf5 	bl	8002aac <xQueueGenericSendFromISR>
 80024c2:	0003      	movs	r3, r0
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d001      	beq.n	80024cc <osMessagePut+0x40>
      return osErrorOS;
 80024c8:	23ff      	movs	r3, #255	; 0xff
 80024ca:	e014      	b.n	80024f6 <osMessagePut+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d010      	beq.n	80024f4 <osMessagePut+0x68>
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <osMessagePut+0x74>)
 80024d4:	2280      	movs	r2, #128	; 0x80
 80024d6:	0552      	lsls	r2, r2, #21
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	e00b      	b.n	80024f4 <osMessagePut+0x68>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	2308      	movs	r3, #8
 80024e0:	18f9      	adds	r1, r7, r3
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	2300      	movs	r3, #0
 80024e6:	f000 fa1d 	bl	8002924 <xQueueGenericSend>
 80024ea:	0003      	movs	r3, r0
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d001      	beq.n	80024f4 <osMessagePut+0x68>
      return osErrorOS;
 80024f0:	23ff      	movs	r3, #255	; 0xff
 80024f2:	e000      	b.n	80024f6 <osMessagePut+0x6a>
    }
  }
  
  return osOK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	0018      	movs	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b006      	add	sp, #24
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	e000ed04 	.word	0xe000ed04

08002504 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b08b      	sub	sp, #44	; 0x2c
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002510:	2114      	movs	r1, #20
 8002512:	187b      	adds	r3, r7, r1
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	609a      	str	r2, [r3, #8]
  event.value.v = 0;
 8002518:	187b      	adds	r3, r7, r1
 800251a:	2200      	movs	r2, #0
 800251c:	605a      	str	r2, [r3, #4]
  
  if (queue_id == NULL) {
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d107      	bne.n	8002534 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002524:	187b      	adds	r3, r7, r1
 8002526:	2280      	movs	r2, #128	; 0x80
 8002528:	601a      	str	r2, [r3, #0]
    return event;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	187a      	adds	r2, r7, r1
 800252e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002530:	c313      	stmia	r3!, {r0, r1, r4}
 8002532:	e051      	b.n	80025d8 <osMessageGet+0xd4>
  }
  
  taskWoken = pdFALSE;
 8002534:	2300      	movs	r3, #0
 8002536:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3301      	adds	r3, #1
 8002540:	d103      	bne.n	800254a <osMessageGet+0x46>
    ticks = portMAX_DELAY;
 8002542:	2301      	movs	r3, #1
 8002544:	425b      	negs	r3, r3
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
 8002548:	e009      	b.n	800255e <osMessageGet+0x5a>
  }
  else if (millisec != 0) {
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d006      	beq.n	800255e <osMessageGet+0x5a>
    ticks = millisec / portTICK_PERIOD_MS;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <osMessageGet+0x5a>
      ticks = 1;
 800255a:	2301      	movs	r3, #1
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800255e:	f7ff ff0a 	bl	8002376 <inHandlerMode>
 8002562:	1e03      	subs	r3, r0, #0
 8002564:	d01b      	beq.n	800259e <osMessageGet+0x9a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002566:	2320      	movs	r3, #32
 8002568:	18fa      	adds	r2, r7, r3
 800256a:	2414      	movs	r4, #20
 800256c:	193b      	adds	r3, r7, r4
 800256e:	1d19      	adds	r1, r3, #4
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	0018      	movs	r0, r3
 8002574:	f000 fbc0 	bl	8002cf8 <xQueueReceiveFromISR>
 8002578:	0003      	movs	r3, r0
 800257a:	2b01      	cmp	r3, #1
 800257c:	d103      	bne.n	8002586 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
 800257e:	193b      	adds	r3, r7, r4
 8002580:	2210      	movs	r2, #16
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e003      	b.n	800258e <osMessageGet+0x8a>
    }
    else {
      event.status = osOK;
 8002586:	2314      	movs	r3, #20
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d01c      	beq.n	80025ce <osMessageGet+0xca>
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <osMessageGet+0xdc>)
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	0552      	lsls	r2, r2, #21
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e017      	b.n	80025ce <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800259e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a0:	2414      	movs	r4, #20
 80025a2:	193b      	adds	r3, r7, r4
 80025a4:	1d19      	adds	r1, r3, #4
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	0018      	movs	r0, r3
 80025aa:	f000 faf0 	bl	8002b8e <xQueueReceive>
 80025ae:	0003      	movs	r3, r0
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d103      	bne.n	80025bc <osMessageGet+0xb8>
      /* We have mail */
      event.status = osEventMessage;
 80025b4:	193b      	adds	r3, r7, r4
 80025b6:	2210      	movs	r2, #16
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e008      	b.n	80025ce <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <osMessageGet+0xc2>
 80025c2:	2200      	movs	r2, #0
 80025c4:	e000      	b.n	80025c8 <osMessageGet+0xc4>
 80025c6:	2240      	movs	r2, #64	; 0x40
 80025c8:	2314      	movs	r3, #20
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	601a      	str	r2, [r3, #0]
    }
  }
  
  return event;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2214      	movs	r2, #20
 80025d2:	18ba      	adds	r2, r7, r2
 80025d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025d6:	c313      	stmia	r3!, {r0, r1, r4}
}
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	46bd      	mov	sp, r7
 80025dc:	b00b      	add	sp, #44	; 0x2c
 80025de:	bd90      	pop	{r4, r7, pc}
 80025e0:	e000ed04 	.word	0xe000ed04

080025e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3308      	adds	r3, #8
 80025f0:	001a      	movs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	4252      	negs	r2, r2
 80025fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3308      	adds	r3, #8
 8002602:	001a      	movs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3308      	adds	r3, #8
 800260c:	001a      	movs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b002      	add	sp, #8
 800261e:	bd80      	pop	{r7, pc}

08002620 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	b002      	add	sp, #8
 8002634:	bd80      	pop	{r7, pc}

08002636 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	601a      	str	r2, [r3, #0]
}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	46bd      	mov	sp, r7
 8002676:	b004      	add	sp, #16
 8002678:	bd80      	pop	{r7, pc}

0800267a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	3301      	adds	r3, #1
 800268e:	d103      	bne.n	8002698 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	e00c      	b.n	80026b2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3308      	adds	r3, #8
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	e002      	b.n	80026a6 <vListInsert+0x2c>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d2f6      	bcs.n	80026a0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	601a      	str	r2, [r3, #0]
}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b004      	add	sp, #16
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b084      	sub	sp, #16
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6892      	ldr	r2, [r2, #8]
 80026fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6852      	ldr	r2, [r2, #4]
 8002706:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	429a      	cmp	r2, r3
 8002710:	d103      	bne.n	800271a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	1e5a      	subs	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b004      	add	sp, #16
 8002734:	bd80      	pop	{r7, pc}

08002736 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <xQueueGenericReset+0x18>
 800274a:	b672      	cpsid	i
 800274c:	e7fe      	b.n	800274c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800274e:	f001 fac7 	bl	8003ce0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	434b      	muls	r3, r1
 8002760:	18d2      	adds	r2, r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277c:	1e59      	subs	r1, r3, #1
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	434b      	muls	r3, r1
 8002784:	18d2      	adds	r2, r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2244      	movs	r2, #68	; 0x44
 800278e:	21ff      	movs	r1, #255	; 0xff
 8002790:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2245      	movs	r2, #69	; 0x45
 8002796:	21ff      	movs	r1, #255	; 0xff
 8002798:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10d      	bne.n	80027bc <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3310      	adds	r3, #16
 80027ac:	0018      	movs	r0, r3
 80027ae:	f000 ff9b 	bl	80036e8 <xTaskRemoveFromEventList>
 80027b2:	1e03      	subs	r3, r0, #0
 80027b4:	d00c      	beq.n	80027d0 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027b6:	f001 fa83 	bl	8003cc0 <vPortYield>
 80027ba:	e009      	b.n	80027d0 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3310      	adds	r3, #16
 80027c0:	0018      	movs	r0, r3
 80027c2:	f7ff ff0f 	bl	80025e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	3324      	adds	r3, #36	; 0x24
 80027ca:	0018      	movs	r0, r3
 80027cc:	f7ff ff0a 	bl	80025e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027d0:	f001 fa98 	bl	8003d04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027d4:	2301      	movs	r3, #1
}
 80027d6:	0018      	movs	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	b004      	add	sp, #16
 80027dc:	bd80      	pop	{r7, pc}

080027de <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027de:	b590      	push	{r4, r7, lr}
 80027e0:	b089      	sub	sp, #36	; 0x24
 80027e2:	af02      	add	r7, sp, #8
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
 80027ea:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <xQueueGenericCreateStatic+0x18>
 80027f2:	b672      	cpsid	i
 80027f4:	e7fe      	b.n	80027f4 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <xQueueGenericCreateStatic+0x22>
 80027fc:	b672      	cpsid	i
 80027fe:	e7fe      	b.n	80027fe <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <xQueueGenericCreateStatic+0x2e>
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <xQueueGenericCreateStatic+0x32>
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <xQueueGenericCreateStatic+0x34>
 8002810:	2300      	movs	r3, #0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <xQueueGenericCreateStatic+0x3c>
 8002816:	b672      	cpsid	i
 8002818:	e7fe      	b.n	8002818 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <xQueueGenericCreateStatic+0x48>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <xQueueGenericCreateStatic+0x4c>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <xQueueGenericCreateStatic+0x4e>
 800282a:	2300      	movs	r3, #0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <xQueueGenericCreateStatic+0x56>
 8002830:	b672      	cpsid	i
 8002832:	e7fe      	b.n	8002832 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002834:	2348      	movs	r3, #72	; 0x48
 8002836:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b48      	cmp	r3, #72	; 0x48
 800283c:	d001      	beq.n	8002842 <xQueueGenericCreateStatic+0x64>
 800283e:	b672      	cpsid	i
 8002840:	e7fe      	b.n	8002840 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00e      	beq.n	800286a <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2246      	movs	r2, #70	; 0x46
 8002850:	2101      	movs	r1, #1
 8002852:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002854:	2328      	movs	r3, #40	; 0x28
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	781c      	ldrb	r4, [r3, #0]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	0023      	movs	r3, r4
 8002866:	f000 f83b 	bl	80028e0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800286a:	697b      	ldr	r3, [r7, #20]
	}
 800286c:	0018      	movs	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	b007      	add	sp, #28
 8002872:	bd90      	pop	{r4, r7, pc}

08002874 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b08b      	sub	sp, #44	; 0x2c
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	1dfb      	adds	r3, r7, #7
 8002880:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <xQueueGenericCreate+0x18>
 8002888:	b672      	cpsid	i
 800288a:	e7fe      	b.n	800288a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d102      	bne.n	8002898 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	e003      	b.n	80028a0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	4353      	muls	r3, r2
 800289e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	3348      	adds	r3, #72	; 0x48
 80028a4:	0018      	movs	r0, r3
 80028a6:	f001 fab3 	bl	8003e10 <pvPortMalloc>
 80028aa:	0003      	movs	r3, r0
 80028ac:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d010      	beq.n	80028d6 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	3348      	adds	r3, #72	; 0x48
 80028b8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	2246      	movs	r2, #70	; 0x46
 80028be:	2100      	movs	r1, #0
 80028c0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028c2:	1dfb      	adds	r3, r7, #7
 80028c4:	781c      	ldrb	r4, [r3, #0]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	0023      	movs	r3, r4
 80028d2:	f000 f805 	bl	80028e0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80028d6:	69bb      	ldr	r3, [r7, #24]
	}
 80028d8:	0018      	movs	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	b009      	add	sp, #36	; 0x24
 80028de:	bd90      	pop	{r4, r7, pc}

080028e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	001a      	movs	r2, r3
 80028ee:	1cfb      	adds	r3, r7, #3
 80028f0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d103      	bne.n	8002900 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	e002      	b.n	8002906 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2101      	movs	r1, #1
 8002916:	0018      	movs	r0, r3
 8002918:	f7ff ff0d 	bl	8002736 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b004      	add	sp, #16
 8002922:	bd80      	pop	{r7, pc}

08002924 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002932:	2300      	movs	r3, #0
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <xQueueGenericSend+0x20>
 8002940:	b672      	cpsid	i
 8002942:	e7fe      	b.n	8002942 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d103      	bne.n	8002952 <xQueueGenericSend+0x2e>
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <xQueueGenericSend+0x32>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <xQueueGenericSend+0x34>
 8002956:	2300      	movs	r3, #0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <xQueueGenericSend+0x3c>
 800295c:	b672      	cpsid	i
 800295e:	e7fe      	b.n	800295e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d103      	bne.n	800296e <xQueueGenericSend+0x4a>
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <xQueueGenericSend+0x4e>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <xQueueGenericSend+0x50>
 8002972:	2300      	movs	r3, #0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <xQueueGenericSend+0x58>
 8002978:	b672      	cpsid	i
 800297a:	e7fe      	b.n	800297a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800297c:	f001 f84c 	bl	8003a18 <xTaskGetSchedulerState>
 8002980:	1e03      	subs	r3, r0, #0
 8002982:	d102      	bne.n	800298a <xQueueGenericSend+0x66>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <xQueueGenericSend+0x6a>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <xQueueGenericSend+0x6c>
 800298e:	2300      	movs	r3, #0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <xQueueGenericSend+0x74>
 8002994:	b672      	cpsid	i
 8002996:	e7fe      	b.n	8002996 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002998:	f001 f9a2 	bl	8003ce0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d302      	bcc.n	80029ae <xQueueGenericSend+0x8a>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d11e      	bne.n	80029ec <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	0018      	movs	r0, r3
 80029b6:	f000 fa02 	bl	8002dbe <prvCopyDataToQueue>
 80029ba:	0003      	movs	r3, r0
 80029bc:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	3324      	adds	r3, #36	; 0x24
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 fe8c 	bl	80036e8 <xTaskRemoveFromEventList>
 80029d0:	1e03      	subs	r3, r0, #0
 80029d2:	d007      	beq.n	80029e4 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029d4:	f001 f974 	bl	8003cc0 <vPortYield>
 80029d8:	e004      	b.n	80029e4 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80029e0:	f001 f96e 	bl	8003cc0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80029e4:	f001 f98e 	bl	8003d04 <vPortExitCritical>
				return pdPASS;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e05b      	b.n	8002aa4 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d103      	bne.n	80029fa <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029f2:	f001 f987 	bl	8003d04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e054      	b.n	8002aa4 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d106      	bne.n	8002a0e <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a00:	2314      	movs	r3, #20
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	0018      	movs	r0, r3
 8002a06:	f000 fecb 	bl	80037a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a0e:	f001 f979 	bl	8003d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a12:	f000 fcad 	bl	8003370 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a16:	f001 f963 	bl	8003ce0 <vPortEnterCritical>
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	2244      	movs	r2, #68	; 0x44
 8002a1e:	5c9b      	ldrb	r3, [r3, r2]
 8002a20:	b25b      	sxtb	r3, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	d103      	bne.n	8002a2e <xQueueGenericSend+0x10a>
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	2244      	movs	r2, #68	; 0x44
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	5499      	strb	r1, [r3, r2]
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	2245      	movs	r2, #69	; 0x45
 8002a32:	5c9b      	ldrb	r3, [r3, r2]
 8002a34:	b25b      	sxtb	r3, r3
 8002a36:	3301      	adds	r3, #1
 8002a38:	d103      	bne.n	8002a42 <xQueueGenericSend+0x11e>
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	2245      	movs	r2, #69	; 0x45
 8002a3e:	2100      	movs	r1, #0
 8002a40:	5499      	strb	r1, [r3, r2]
 8002a42:	f001 f95f 	bl	8003d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a46:	1d3a      	adds	r2, r7, #4
 8002a48:	2314      	movs	r3, #20
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	0011      	movs	r1, r2
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 feba 	bl	80037c8 <xTaskCheckForTimeOut>
 8002a54:	1e03      	subs	r3, r0, #0
 8002a56:	d11e      	bne.n	8002a96 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 fab4 	bl	8002fc8 <prvIsQueueFull>
 8002a60:	1e03      	subs	r3, r0, #0
 8002a62:	d011      	beq.n	8002a88 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	3310      	adds	r3, #16
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	0011      	movs	r1, r2
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f000 fe1d 	bl	80036ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 fa33 	bl	8002ee0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a7a:	f000 fc85 	bl	8003388 <xTaskResumeAll>
 8002a7e:	1e03      	subs	r3, r0, #0
 8002a80:	d18a      	bne.n	8002998 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8002a82:	f001 f91d 	bl	8003cc0 <vPortYield>
 8002a86:	e787      	b.n	8002998 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f000 fa28 	bl	8002ee0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a90:	f000 fc7a 	bl	8003388 <xTaskResumeAll>
 8002a94:	e780      	b.n	8002998 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f000 fa21 	bl	8002ee0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a9e:	f000 fc73 	bl	8003388 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002aa2:	2300      	movs	r3, #0
		}
	}
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b00a      	add	sp, #40	; 0x28
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b089      	sub	sp, #36	; 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <xQueueGenericSendFromISR+0x1c>
 8002ac4:	b672      	cpsid	i
 8002ac6:	e7fe      	b.n	8002ac6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d103      	bne.n	8002ad6 <xQueueGenericSendFromISR+0x2a>
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <xQueueGenericSendFromISR+0x2e>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <xQueueGenericSendFromISR+0x30>
 8002ada:	2300      	movs	r3, #0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <xQueueGenericSendFromISR+0x38>
 8002ae0:	b672      	cpsid	i
 8002ae2:	e7fe      	b.n	8002ae2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d103      	bne.n	8002af2 <xQueueGenericSendFromISR+0x46>
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <xQueueGenericSendFromISR+0x4a>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <xQueueGenericSendFromISR+0x4c>
 8002af6:	2300      	movs	r3, #0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <xQueueGenericSendFromISR+0x54>
 8002afc:	b672      	cpsid	i
 8002afe:	e7fe      	b.n	8002afe <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b00:	f001 f918 	bl	8003d34 <ulSetInterruptMaskFromISR>
 8002b04:	0003      	movs	r3, r0
 8002b06:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d302      	bcc.n	8002b1a <xQueueGenericSendFromISR+0x6e>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d12e      	bne.n	8002b78 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b1a:	2413      	movs	r4, #19
 8002b1c:	193b      	adds	r3, r7, r4
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	2145      	movs	r1, #69	; 0x45
 8002b22:	5c52      	ldrb	r2, [r2, r1]
 8002b24:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 f946 	bl	8002dbe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b32:	193b      	adds	r3, r7, r4
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	b25b      	sxtb	r3, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	d111      	bne.n	8002b60 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d016      	beq.n	8002b72 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	3324      	adds	r3, #36	; 0x24
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f000 fdcd 	bl	80036e8 <xTaskRemoveFromEventList>
 8002b4e:	1e03      	subs	r3, r0, #0
 8002b50:	d00f      	beq.n	8002b72 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00c      	beq.n	8002b72 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e008      	b.n	8002b72 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b60:	2313      	movs	r3, #19
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	3301      	adds	r3, #1
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	b259      	sxtb	r1, r3
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2245      	movs	r2, #69	; 0x45
 8002b70:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002b72:	2301      	movs	r3, #1
 8002b74:	61fb      	str	r3, [r7, #28]
		{
 8002b76:	e001      	b.n	8002b7c <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f001 f8de 	bl	8003d40 <vClearInterruptMaskFromISR>

	return xReturn;
 8002b84:	69fb      	ldr	r3, [r7, #28]
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b009      	add	sp, #36	; 0x24
 8002b8c:	bd90      	pop	{r4, r7, pc}

08002b8e <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b08a      	sub	sp, #40	; 0x28
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <xQueueReceive+0x1e>
 8002ba8:	b672      	cpsid	i
 8002baa:	e7fe      	b.n	8002baa <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <xQueueReceive+0x2c>
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <xQueueReceive+0x30>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <xQueueReceive+0x32>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <xQueueReceive+0x3a>
 8002bc4:	b672      	cpsid	i
 8002bc6:	e7fe      	b.n	8002bc6 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bc8:	f000 ff26 	bl	8003a18 <xTaskGetSchedulerState>
 8002bcc:	1e03      	subs	r3, r0, #0
 8002bce:	d102      	bne.n	8002bd6 <xQueueReceive+0x48>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <xQueueReceive+0x4c>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <xQueueReceive+0x4e>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <xQueueReceive+0x56>
 8002be0:	b672      	cpsid	i
 8002be2:	e7fe      	b.n	8002be2 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002be4:	f001 f87c 	bl	8003ce0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bec:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01a      	beq.n	8002c2a <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	0011      	movs	r1, r2
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f000 f94a 	bl	8002e94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	1e5a      	subs	r2, r3, #1
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	3310      	adds	r3, #16
 8002c14:	0018      	movs	r0, r3
 8002c16:	f000 fd67 	bl	80036e8 <xTaskRemoveFromEventList>
 8002c1a:	1e03      	subs	r3, r0, #0
 8002c1c:	d001      	beq.n	8002c22 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002c1e:	f001 f84f 	bl	8003cc0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c22:	f001 f86f 	bl	8003d04 <vPortExitCritical>
				return pdPASS;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e062      	b.n	8002cf0 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d103      	bne.n	8002c38 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c30:	f001 f868 	bl	8003d04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e05b      	b.n	8002cf0 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c3e:	2314      	movs	r3, #20
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	0018      	movs	r0, r3
 8002c44:	f000 fdac 	bl	80037a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c4c:	f001 f85a 	bl	8003d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c50:	f000 fb8e 	bl	8003370 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c54:	f001 f844 	bl	8003ce0 <vPortEnterCritical>
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	2244      	movs	r2, #68	; 0x44
 8002c5c:	5c9b      	ldrb	r3, [r3, r2]
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	3301      	adds	r3, #1
 8002c62:	d103      	bne.n	8002c6c <xQueueReceive+0xde>
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	2244      	movs	r2, #68	; 0x44
 8002c68:	2100      	movs	r1, #0
 8002c6a:	5499      	strb	r1, [r3, r2]
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	2245      	movs	r2, #69	; 0x45
 8002c70:	5c9b      	ldrb	r3, [r3, r2]
 8002c72:	b25b      	sxtb	r3, r3
 8002c74:	3301      	adds	r3, #1
 8002c76:	d103      	bne.n	8002c80 <xQueueReceive+0xf2>
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	2245      	movs	r2, #69	; 0x45
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	5499      	strb	r1, [r3, r2]
 8002c80:	f001 f840 	bl	8003d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c84:	1d3a      	adds	r2, r7, #4
 8002c86:	2314      	movs	r3, #20
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	0011      	movs	r1, r2
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f000 fd9b 	bl	80037c8 <xTaskCheckForTimeOut>
 8002c92:	1e03      	subs	r3, r0, #0
 8002c94:	d11e      	bne.n	8002cd4 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f000 f97f 	bl	8002f9c <prvIsQueueEmpty>
 8002c9e:	1e03      	subs	r3, r0, #0
 8002ca0:	d011      	beq.n	8002cc6 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	3324      	adds	r3, #36	; 0x24
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	0011      	movs	r1, r2
 8002caa:	0018      	movs	r0, r3
 8002cac:	f000 fcfe 	bl	80036ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f000 f914 	bl	8002ee0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002cb8:	f000 fb66 	bl	8003388 <xTaskResumeAll>
 8002cbc:	1e03      	subs	r3, r0, #0
 8002cbe:	d191      	bne.n	8002be4 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8002cc0:	f000 fffe 	bl	8003cc0 <vPortYield>
 8002cc4:	e78e      	b.n	8002be4 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f000 f909 	bl	8002ee0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cce:	f000 fb5b 	bl	8003388 <xTaskResumeAll>
 8002cd2:	e787      	b.n	8002be4 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f000 f902 	bl	8002ee0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cdc:	f000 fb54 	bl	8003388 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 f95a 	bl	8002f9c <prvIsQueueEmpty>
 8002ce8:	1e03      	subs	r3, r0, #0
 8002cea:	d100      	bne.n	8002cee <xQueueReceive+0x160>
 8002cec:	e77a      	b.n	8002be4 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002cee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b00a      	add	sp, #40	; 0x28
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b08b      	sub	sp, #44	; 0x2c
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <xQueueReceiveFromISR+0x1a>
 8002d0e:	b672      	cpsid	i
 8002d10:	e7fe      	b.n	8002d10 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d103      	bne.n	8002d20 <xQueueReceiveFromISR+0x28>
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <xQueueReceiveFromISR+0x2c>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <xQueueReceiveFromISR+0x2e>
 8002d24:	2300      	movs	r3, #0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <xQueueReceiveFromISR+0x36>
 8002d2a:	b672      	cpsid	i
 8002d2c:	e7fe      	b.n	8002d2c <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d2e:	f001 f801 	bl	8003d34 <ulSetInterruptMaskFromISR>
 8002d32:	0003      	movs	r3, r0
 8002d34:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d032      	beq.n	8002da8 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002d42:	2417      	movs	r4, #23
 8002d44:	193b      	adds	r3, r7, r4
 8002d46:	6a3a      	ldr	r2, [r7, #32]
 8002d48:	2144      	movs	r1, #68	; 0x44
 8002d4a:	5c52      	ldrb	r2, [r2, r1]
 8002d4c:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	0011      	movs	r1, r2
 8002d54:	0018      	movs	r0, r3
 8002d56:	f000 f89d 	bl	8002e94 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1e5a      	subs	r2, r3, #1
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002d62:	193b      	adds	r3, r7, r4
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b25b      	sxtb	r3, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	d111      	bne.n	8002d90 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d016      	beq.n	8002da2 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	3310      	adds	r3, #16
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 fcb5 	bl	80036e8 <xTaskRemoveFromEventList>
 8002d7e:	1e03      	subs	r3, r0, #0
 8002d80:	d00f      	beq.n	8002da2 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00c      	beq.n	8002da2 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e008      	b.n	8002da2 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002d90:	2317      	movs	r3, #23
 8002d92:	18fb      	adds	r3, r7, r3
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	3301      	adds	r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	b259      	sxtb	r1, r3
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	2244      	movs	r2, #68	; 0x44
 8002da0:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002da2:	2301      	movs	r3, #1
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
 8002da6:	e001      	b.n	8002dac <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	0018      	movs	r0, r3
 8002db0:	f000 ffc6 	bl	8003d40 <vClearInterruptMaskFromISR>

	return xReturn;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002db6:	0018      	movs	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b00b      	add	sp, #44	; 0x2c
 8002dbc:	bd90      	pop	{r4, r7, pc}

08002dbe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10e      	bne.n	8002dfa <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d14e      	bne.n	8002e82 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	0018      	movs	r0, r3
 8002dea:	f000 fe31 	bl	8003a50 <xTaskPriorityDisinherit>
 8002dee:	0003      	movs	r3, r0
 8002df0:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	e043      	b.n	8002e82 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d119      	bne.n	8002e34 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6898      	ldr	r0, [r3, #8]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	f001 f9d0 	bl	80041b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	18d2      	adds	r2, r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d32b      	bcc.n	8002e82 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	e026      	b.n	8002e82 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	68d8      	ldr	r0, [r3, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	0019      	movs	r1, r3
 8002e40:	f001 f9b6 	bl	80041b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	425b      	negs	r3, r3
 8002e4e:	18d2      	adds	r2, r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d207      	bcs.n	8002e70 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	425b      	negs	r3, r3
 8002e6a:	18d2      	adds	r2, r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d105      	bne.n	8002e82 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e8a:	697b      	ldr	r3, [r7, #20]
}
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b006      	add	sp, #24
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d018      	beq.n	8002ed8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	18d2      	adds	r2, r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d303      	bcc.n	8002ec8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68d9      	ldr	r1, [r3, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f001 f96c 	bl	80041b0 <memcpy>
	}
}
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b002      	add	sp, #8
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ee8:	f000 fefa 	bl	8003ce0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002eec:	230f      	movs	r3, #15
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	2145      	movs	r1, #69	; 0x45
 8002ef4:	5c52      	ldrb	r2, [r2, r1]
 8002ef6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ef8:	e013      	b.n	8002f22 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d016      	beq.n	8002f30 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3324      	adds	r3, #36	; 0x24
 8002f06:	0018      	movs	r0, r3
 8002f08:	f000 fbee 	bl	80036e8 <xTaskRemoveFromEventList>
 8002f0c:	1e03      	subs	r3, r0, #0
 8002f0e:	d001      	beq.n	8002f14 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f10:	f000 fcaa 	bl	8003868 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f14:	210f      	movs	r1, #15
 8002f16:	187b      	adds	r3, r7, r1
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	187b      	adds	r3, r7, r1
 8002f20:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f22:	230f      	movs	r3, #15
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	b25b      	sxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	dce5      	bgt.n	8002efa <prvUnlockQueue+0x1a>
 8002f2e:	e000      	b.n	8002f32 <prvUnlockQueue+0x52>
					break;
 8002f30:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2245      	movs	r2, #69	; 0x45
 8002f36:	21ff      	movs	r1, #255	; 0xff
 8002f38:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002f3a:	f000 fee3 	bl	8003d04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f3e:	f000 fecf 	bl	8003ce0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f42:	230e      	movs	r3, #14
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	2144      	movs	r1, #68	; 0x44
 8002f4a:	5c52      	ldrb	r2, [r2, r1]
 8002f4c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f4e:	e013      	b.n	8002f78 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d016      	beq.n	8002f86 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3310      	adds	r3, #16
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f000 fbc3 	bl	80036e8 <xTaskRemoveFromEventList>
 8002f62:	1e03      	subs	r3, r0, #0
 8002f64:	d001      	beq.n	8002f6a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8002f66:	f000 fc7f 	bl	8003868 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f6a:	210e      	movs	r1, #14
 8002f6c:	187b      	adds	r3, r7, r1
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	187b      	adds	r3, r7, r1
 8002f76:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f78:	230e      	movs	r3, #14
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	b25b      	sxtb	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	dce5      	bgt.n	8002f50 <prvUnlockQueue+0x70>
 8002f84:	e000      	b.n	8002f88 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8002f86:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2244      	movs	r2, #68	; 0x44
 8002f8c:	21ff      	movs	r1, #255	; 0xff
 8002f8e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002f90:	f000 feb8 	bl	8003d04 <vPortExitCritical>
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b004      	add	sp, #16
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fa4:	f000 fe9c 	bl	8003ce0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e001      	b.n	8002fba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fba:	f000 fea3 	bl	8003d04 <vPortExitCritical>

	return xReturn;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b004      	add	sp, #16
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fd0:	f000 fe86 	bl	8003ce0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d102      	bne.n	8002fe6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	e001      	b.n	8002fea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fea:	f000 fe8b 	bl	8003d04 <vPortExitCritical>

	return xReturn;
 8002fee:	68fb      	ldr	r3, [r7, #12]
}
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b004      	add	sp, #16
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ff8:	b590      	push	{r4, r7, lr}
 8002ffa:	b08d      	sub	sp, #52	; 0x34
 8002ffc:	af04      	add	r7, sp, #16
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <xTaskCreateStatic+0x18>
 800300c:	b672      	cpsid	i
 800300e:	e7fe      	b.n	800300e <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8003010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <xTaskCreateStatic+0x22>
 8003016:	b672      	cpsid	i
 8003018:	e7fe      	b.n	8003018 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800301a:	2354      	movs	r3, #84	; 0x54
 800301c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b54      	cmp	r3, #84	; 0x54
 8003022:	d001      	beq.n	8003028 <xTaskCreateStatic+0x30>
 8003024:	b672      	cpsid	i
 8003026:	e7fe      	b.n	8003026 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302a:	2b00      	cmp	r3, #0
 800302c:	d020      	beq.n	8003070 <xTaskCreateStatic+0x78>
 800302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01d      	beq.n	8003070 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800303c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	2251      	movs	r2, #81	; 0x51
 8003042:	2102      	movs	r1, #2
 8003044:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003046:	683c      	ldr	r4, [r7, #0]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	2300      	movs	r3, #0
 8003050:	9303      	str	r3, [sp, #12]
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	9302      	str	r3, [sp, #8]
 8003056:	2318      	movs	r3, #24
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	9301      	str	r3, [sp, #4]
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	0023      	movs	r3, r4
 8003062:	f000 f859 	bl	8003118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	0018      	movs	r0, r3
 800306a:	f000 f8cf 	bl	800320c <prvAddNewTaskToReadyList>
 800306e:	e001      	b.n	8003074 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8003070:	2300      	movs	r3, #0
 8003072:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003074:	69bb      	ldr	r3, [r7, #24]
	}
 8003076:	0018      	movs	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	b009      	add	sp, #36	; 0x24
 800307c:	bd90      	pop	{r4, r7, pc}

0800307e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800307e:	b590      	push	{r4, r7, lr}
 8003080:	b08d      	sub	sp, #52	; 0x34
 8003082:	af04      	add	r7, sp, #16
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	1dbb      	adds	r3, r7, #6
 800308c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800308e:	1dbb      	adds	r3, r7, #6
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	0018      	movs	r0, r3
 8003096:	f000 febb 	bl	8003e10 <pvPortMalloc>
 800309a:	0003      	movs	r3, r0
 800309c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d010      	beq.n	80030c6 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80030a4:	2054      	movs	r0, #84	; 0x54
 80030a6:	f000 feb3 	bl	8003e10 <pvPortMalloc>
 80030aa:	0003      	movs	r3, r0
 80030ac:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
 80030ba:	e006      	b.n	80030ca <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	0018      	movs	r0, r3
 80030c0:	f000 ff4c 	bl	8003f5c <vPortFree>
 80030c4:	e001      	b.n	80030ca <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01a      	beq.n	8003106 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2251      	movs	r2, #81	; 0x51
 80030d4:	2100      	movs	r1, #0
 80030d6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030d8:	1dbb      	adds	r3, r7, #6
 80030da:	881a      	ldrh	r2, [r3, #0]
 80030dc:	683c      	ldr	r4, [r7, #0]
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	2300      	movs	r3, #0
 80030e4:	9303      	str	r3, [sp, #12]
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	9302      	str	r3, [sp, #8]
 80030ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	0023      	movs	r3, r4
 80030f4:	f000 f810 	bl	8003118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	0018      	movs	r0, r3
 80030fc:	f000 f886 	bl	800320c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003100:	2301      	movs	r3, #1
 8003102:	61bb      	str	r3, [r7, #24]
 8003104:	e002      	b.n	800310c <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003106:	2301      	movs	r3, #1
 8003108:	425b      	negs	r3, r3
 800310a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800310c:	69bb      	ldr	r3, [r7, #24]
	}
 800310e:	0018      	movs	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	b009      	add	sp, #36	; 0x24
 8003114:	bd90      	pop	{r4, r7, pc}
	...

08003118 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4936      	ldr	r1, [pc, #216]	; (8003208 <prvInitialiseNewTask+0xf0>)
 800312e:	468c      	mov	ip, r1
 8003130:	4463      	add	r3, ip
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	18d3      	adds	r3, r2, r3
 8003136:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	2207      	movs	r2, #7
 800313c:	4393      	bics	r3, r2
 800313e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	2207      	movs	r2, #7
 8003144:	4013      	ands	r3, r2
 8003146:	d001      	beq.n	800314c <prvInitialiseNewTask+0x34>
 8003148:	b672      	cpsid	i
 800314a:	e7fe      	b.n	800314a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	e013      	b.n	800317a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	18d3      	adds	r3, r2, r3
 8003158:	7818      	ldrb	r0, [r3, #0]
 800315a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800315c:	2134      	movs	r1, #52	; 0x34
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	18d3      	adds	r3, r2, r3
 8003162:	185b      	adds	r3, r3, r1
 8003164:	1c02      	adds	r2, r0, #0
 8003166:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	18d3      	adds	r3, r2, r3
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d006      	beq.n	8003182 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	3301      	adds	r3, #1
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b0f      	cmp	r3, #15
 800317e:	d9e8      	bls.n	8003152 <prvInitialiseNewTask+0x3a>
 8003180:	e000      	b.n	8003184 <prvInitialiseNewTask+0x6c>
		{
			break;
 8003182:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	2243      	movs	r2, #67	; 0x43
 8003188:	2100      	movs	r1, #0
 800318a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	2b06      	cmp	r3, #6
 8003190:	d901      	bls.n	8003196 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003192:	2306      	movs	r3, #6
 8003194:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003198:	6a3a      	ldr	r2, [r7, #32]
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800319c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319e:	6a3a      	ldr	r2, [r7, #32]
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	2200      	movs	r2, #0
 80031a6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	3304      	adds	r3, #4
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7ff fa37 	bl	8002620 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	3318      	adds	r3, #24
 80031b6:	0018      	movs	r0, r3
 80031b8:	f7ff fa32 	bl	8002620 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	2207      	movs	r2, #7
 80031c6:	1ad2      	subs	r2, r2, r3
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	2200      	movs	r2, #0
 80031d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	2250      	movs	r2, #80	; 0x50
 80031dc:	2100      	movs	r1, #0
 80031de:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	68f9      	ldr	r1, [r7, #12]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	0018      	movs	r0, r3
 80031e8:	f000 fce2 	bl	8003bb0 <pxPortInitialiseStack>
 80031ec:	0002      	movs	r2, r0
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	46bd      	mov	sp, r7
 8003202:	b006      	add	sp, #24
 8003204:	bd80      	pop	{r7, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	3fffffff 	.word	0x3fffffff

0800320c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003214:	f000 fd64 	bl	8003ce0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003218:	4b28      	ldr	r3, [pc, #160]	; (80032bc <prvAddNewTaskToReadyList+0xb0>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	4b27      	ldr	r3, [pc, #156]	; (80032bc <prvAddNewTaskToReadyList+0xb0>)
 8003220:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003222:	4b27      	ldr	r3, [pc, #156]	; (80032c0 <prvAddNewTaskToReadyList+0xb4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800322a:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <prvAddNewTaskToReadyList+0xb4>)
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003230:	4b22      	ldr	r3, [pc, #136]	; (80032bc <prvAddNewTaskToReadyList+0xb0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d110      	bne.n	800325a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003238:	f000 fb30 	bl	800389c <prvInitialiseTaskLists>
 800323c:	e00d      	b.n	800325a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800323e:	4b21      	ldr	r3, [pc, #132]	; (80032c4 <prvAddNewTaskToReadyList+0xb8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003246:	4b1e      	ldr	r3, [pc, #120]	; (80032c0 <prvAddNewTaskToReadyList+0xb4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	429a      	cmp	r2, r3
 8003252:	d802      	bhi.n	800325a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003254:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <prvAddNewTaskToReadyList+0xb4>)
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800325a:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <prvAddNewTaskToReadyList+0xbc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <prvAddNewTaskToReadyList+0xbc>)
 8003262:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003268:	4b18      	ldr	r3, [pc, #96]	; (80032cc <prvAddNewTaskToReadyList+0xc0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d903      	bls.n	8003278 <prvAddNewTaskToReadyList+0x6c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003274:	4b15      	ldr	r3, [pc, #84]	; (80032cc <prvAddNewTaskToReadyList+0xc0>)
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327c:	0013      	movs	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	189b      	adds	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4a12      	ldr	r2, [pc, #72]	; (80032d0 <prvAddNewTaskToReadyList+0xc4>)
 8003286:	189a      	adds	r2, r3, r2
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3304      	adds	r3, #4
 800328c:	0019      	movs	r1, r3
 800328e:	0010      	movs	r0, r2
 8003290:	f7ff f9d1 	bl	8002636 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003294:	f000 fd36 	bl	8003d04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003298:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <prvAddNewTaskToReadyList+0xb8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032a0:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <prvAddNewTaskToReadyList+0xb4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d201      	bcs.n	80032b2 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80032ae:	f000 fd07 	bl	8003cc0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b002      	add	sp, #8
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	200004c0 	.word	0x200004c0
 80032c0:	200003c0 	.word	0x200003c0
 80032c4:	200004cc 	.word	0x200004cc
 80032c8:	200004dc 	.word	0x200004dc
 80032cc:	200004c8 	.word	0x200004c8
 80032d0:	200003c4 	.word	0x200003c4

080032d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b089      	sub	sp, #36	; 0x24
 80032d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80032e2:	003a      	movs	r2, r7
 80032e4:	1d39      	adds	r1, r7, #4
 80032e6:	2308      	movs	r3, #8
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	0018      	movs	r0, r3
 80032ec:	f7fc ffaa 	bl	8000244 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80032f0:	683c      	ldr	r4, [r7, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	4918      	ldr	r1, [pc, #96]	; (8003358 <vTaskStartScheduler+0x84>)
 80032f8:	4818      	ldr	r0, [pc, #96]	; (800335c <vTaskStartScheduler+0x88>)
 80032fa:	9202      	str	r2, [sp, #8]
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	2300      	movs	r3, #0
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	2300      	movs	r3, #0
 8003304:	0022      	movs	r2, r4
 8003306:	f7ff fe77 	bl	8002ff8 <xTaskCreateStatic>
 800330a:	0002      	movs	r2, r0
 800330c:	4b14      	ldr	r3, [pc, #80]	; (8003360 <vTaskStartScheduler+0x8c>)
 800330e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003310:	4b13      	ldr	r3, [pc, #76]	; (8003360 <vTaskStartScheduler+0x8c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003318:	2301      	movs	r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	e001      	b.n	8003322 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d10d      	bne.n	8003344 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003328:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800332a:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <vTaskStartScheduler+0x90>)
 800332c:	2201      	movs	r2, #1
 800332e:	4252      	negs	r2, r2
 8003330:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <vTaskStartScheduler+0x94>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <vTaskStartScheduler+0x98>)
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800333e:	f000 fc9b 	bl	8003c78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003342:	e004      	b.n	800334e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3301      	adds	r3, #1
 8003348:	d101      	bne.n	800334e <vTaskStartScheduler+0x7a>
 800334a:	b672      	cpsid	i
 800334c:	e7fe      	b.n	800334c <vTaskStartScheduler+0x78>
}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	46bd      	mov	sp, r7
 8003352:	b005      	add	sp, #20
 8003354:	bd90      	pop	{r4, r7, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	08004b5c 	.word	0x08004b5c
 800335c:	0800387d 	.word	0x0800387d
 8003360:	200004e4 	.word	0x200004e4
 8003364:	200004e0 	.word	0x200004e0
 8003368:	200004cc 	.word	0x200004cc
 800336c:	200004c4 	.word	0x200004c4

08003370 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <vTaskSuspendAll+0x14>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	4b02      	ldr	r3, [pc, #8]	; (8003384 <vTaskSuspendAll+0x14>)
 800337c:	601a      	str	r2, [r3, #0]
}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	200004e8 	.word	0x200004e8

08003388 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003396:	4b3a      	ldr	r3, [pc, #232]	; (8003480 <xTaskResumeAll+0xf8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <xTaskResumeAll+0x1a>
 800339e:	b672      	cpsid	i
 80033a0:	e7fe      	b.n	80033a0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80033a2:	f000 fc9d 	bl	8003ce0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80033a6:	4b36      	ldr	r3, [pc, #216]	; (8003480 <xTaskResumeAll+0xf8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	1e5a      	subs	r2, r3, #1
 80033ac:	4b34      	ldr	r3, [pc, #208]	; (8003480 <xTaskResumeAll+0xf8>)
 80033ae:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033b0:	4b33      	ldr	r3, [pc, #204]	; (8003480 <xTaskResumeAll+0xf8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d15b      	bne.n	8003470 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033b8:	4b32      	ldr	r3, [pc, #200]	; (8003484 <xTaskResumeAll+0xfc>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d057      	beq.n	8003470 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033c0:	e02f      	b.n	8003422 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80033c2:	4b31      	ldr	r3, [pc, #196]	; (8003488 <xTaskResumeAll+0x100>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	3318      	adds	r3, #24
 80033ce:	0018      	movs	r0, r3
 80033d0:	f7ff f989 	bl	80026e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3304      	adds	r3, #4
 80033d8:	0018      	movs	r0, r3
 80033da:	f7ff f984 	bl	80026e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e2:	4b2a      	ldr	r3, [pc, #168]	; (800348c <xTaskResumeAll+0x104>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d903      	bls.n	80033f2 <xTaskResumeAll+0x6a>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ee:	4b27      	ldr	r3, [pc, #156]	; (800348c <xTaskResumeAll+0x104>)
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f6:	0013      	movs	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	189b      	adds	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4a24      	ldr	r2, [pc, #144]	; (8003490 <xTaskResumeAll+0x108>)
 8003400:	189a      	adds	r2, r3, r2
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3304      	adds	r3, #4
 8003406:	0019      	movs	r1, r3
 8003408:	0010      	movs	r0, r2
 800340a:	f7ff f914 	bl	8002636 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003412:	4b20      	ldr	r3, [pc, #128]	; (8003494 <xTaskResumeAll+0x10c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	429a      	cmp	r2, r3
 800341a:	d302      	bcc.n	8003422 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800341c:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <xTaskResumeAll+0x110>)
 800341e:	2201      	movs	r2, #1
 8003420:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003422:	4b19      	ldr	r3, [pc, #100]	; (8003488 <xTaskResumeAll+0x100>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1cb      	bne.n	80033c2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003430:	f000 face 	bl	80039d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003434:	4b19      	ldr	r3, [pc, #100]	; (800349c <xTaskResumeAll+0x114>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00f      	beq.n	8003460 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003440:	f000 f82e 	bl	80034a0 <xTaskIncrementTick>
 8003444:	1e03      	subs	r3, r0, #0
 8003446:	d002      	beq.n	800344e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8003448:	4b13      	ldr	r3, [pc, #76]	; (8003498 <xTaskResumeAll+0x110>)
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3b01      	subs	r3, #1
 8003452:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f2      	bne.n	8003440 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <xTaskResumeAll+0x114>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <xTaskResumeAll+0x110>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003468:	2301      	movs	r3, #1
 800346a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800346c:	f000 fc28 	bl	8003cc0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003470:	f000 fc48 	bl	8003d04 <vPortExitCritical>

	return xAlreadyYielded;
 8003474:	68bb      	ldr	r3, [r7, #8]
}
 8003476:	0018      	movs	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	b004      	add	sp, #16
 800347c:	bd80      	pop	{r7, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	200004e8 	.word	0x200004e8
 8003484:	200004c0 	.word	0x200004c0
 8003488:	20000480 	.word	0x20000480
 800348c:	200004c8 	.word	0x200004c8
 8003490:	200003c4 	.word	0x200003c4
 8003494:	200003c0 	.word	0x200003c0
 8003498:	200004d4 	.word	0x200004d4
 800349c:	200004d0 	.word	0x200004d0

080034a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034aa:	4b4c      	ldr	r3, [pc, #304]	; (80035dc <xTaskIncrementTick+0x13c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d000      	beq.n	80034b4 <xTaskIncrementTick+0x14>
 80034b2:	e083      	b.n	80035bc <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034b4:	4b4a      	ldr	r3, [pc, #296]	; (80035e0 <xTaskIncrementTick+0x140>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3301      	adds	r3, #1
 80034ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80034bc:	4b48      	ldr	r3, [pc, #288]	; (80035e0 <xTaskIncrementTick+0x140>)
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d117      	bne.n	80034f8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80034c8:	4b46      	ldr	r3, [pc, #280]	; (80035e4 <xTaskIncrementTick+0x144>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <xTaskIncrementTick+0x36>
 80034d2:	b672      	cpsid	i
 80034d4:	e7fe      	b.n	80034d4 <xTaskIncrementTick+0x34>
 80034d6:	4b43      	ldr	r3, [pc, #268]	; (80035e4 <xTaskIncrementTick+0x144>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	4b42      	ldr	r3, [pc, #264]	; (80035e8 <xTaskIncrementTick+0x148>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4b40      	ldr	r3, [pc, #256]	; (80035e4 <xTaskIncrementTick+0x144>)
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	4b40      	ldr	r3, [pc, #256]	; (80035e8 <xTaskIncrementTick+0x148>)
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	4b40      	ldr	r3, [pc, #256]	; (80035ec <xTaskIncrementTick+0x14c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	4b3e      	ldr	r3, [pc, #248]	; (80035ec <xTaskIncrementTick+0x14c>)
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	f000 fa6c 	bl	80039d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034f8:	4b3d      	ldr	r3, [pc, #244]	; (80035f0 <xTaskIncrementTick+0x150>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d34e      	bcc.n	80035a0 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003502:	4b38      	ldr	r3, [pc, #224]	; (80035e4 <xTaskIncrementTick+0x144>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <xTaskIncrementTick+0x70>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <xTaskIncrementTick+0x72>
 8003510:	2300      	movs	r3, #0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d004      	beq.n	8003520 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003516:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <xTaskIncrementTick+0x150>)
 8003518:	2201      	movs	r2, #1
 800351a:	4252      	negs	r2, r2
 800351c:	601a      	str	r2, [r3, #0]
					break;
 800351e:	e03f      	b.n	80035a0 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003520:	4b30      	ldr	r3, [pc, #192]	; (80035e4 <xTaskIncrementTick+0x144>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	429a      	cmp	r2, r3
 8003536:	d203      	bcs.n	8003540 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003538:	4b2d      	ldr	r3, [pc, #180]	; (80035f0 <xTaskIncrementTick+0x150>)
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	601a      	str	r2, [r3, #0]
						break;
 800353e:	e02f      	b.n	80035a0 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	3304      	adds	r3, #4
 8003544:	0018      	movs	r0, r3
 8003546:	f7ff f8ce 	bl	80026e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	3318      	adds	r3, #24
 8003556:	0018      	movs	r0, r3
 8003558:	f7ff f8c5 	bl	80026e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003560:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <xTaskIncrementTick+0x154>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d903      	bls.n	8003570 <xTaskIncrementTick+0xd0>
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356c:	4b21      	ldr	r3, [pc, #132]	; (80035f4 <xTaskIncrementTick+0x154>)
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	0013      	movs	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	189b      	adds	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4a1e      	ldr	r2, [pc, #120]	; (80035f8 <xTaskIncrementTick+0x158>)
 800357e:	189a      	adds	r2, r3, r2
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	3304      	adds	r3, #4
 8003584:	0019      	movs	r1, r3
 8003586:	0010      	movs	r0, r2
 8003588:	f7ff f855 	bl	8002636 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <xTaskIncrementTick+0x15c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	429a      	cmp	r2, r3
 8003598:	d3b3      	bcc.n	8003502 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800359a:	2301      	movs	r3, #1
 800359c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800359e:	e7b0      	b.n	8003502 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035a0:	4b16      	ldr	r3, [pc, #88]	; (80035fc <xTaskIncrementTick+0x15c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a6:	4914      	ldr	r1, [pc, #80]	; (80035f8 <xTaskIncrementTick+0x158>)
 80035a8:	0013      	movs	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	189b      	adds	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	585b      	ldr	r3, [r3, r1]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d907      	bls.n	80035c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80035b6:	2301      	movs	r3, #1
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	e004      	b.n	80035c6 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80035bc:	4b10      	ldr	r3, [pc, #64]	; (8003600 <xTaskIncrementTick+0x160>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <xTaskIncrementTick+0x160>)
 80035c4:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80035c6:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <xTaskIncrementTick+0x164>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80035ce:	2301      	movs	r3, #1
 80035d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80035d2:	697b      	ldr	r3, [r7, #20]
}
 80035d4:	0018      	movs	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b006      	add	sp, #24
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	200004e8 	.word	0x200004e8
 80035e0:	200004c4 	.word	0x200004c4
 80035e4:	20000478 	.word	0x20000478
 80035e8:	2000047c 	.word	0x2000047c
 80035ec:	200004d8 	.word	0x200004d8
 80035f0:	200004e0 	.word	0x200004e0
 80035f4:	200004c8 	.word	0x200004c8
 80035f8:	200003c4 	.word	0x200003c4
 80035fc:	200003c0 	.word	0x200003c0
 8003600:	200004d0 	.word	0x200004d0
 8003604:	200004d4 	.word	0x200004d4

08003608 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800360e:	4b22      	ldr	r3, [pc, #136]	; (8003698 <vTaskSwitchContext+0x90>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003616:	4b21      	ldr	r3, [pc, #132]	; (800369c <vTaskSwitchContext+0x94>)
 8003618:	2201      	movs	r2, #1
 800361a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800361c:	e037      	b.n	800368e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800361e:	4b1f      	ldr	r3, [pc, #124]	; (800369c <vTaskSwitchContext+0x94>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003624:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <vTaskSwitchContext+0x98>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	e007      	b.n	800363c <vTaskSwitchContext+0x34>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <vTaskSwitchContext+0x2e>
 8003632:	b672      	cpsid	i
 8003634:	e7fe      	b.n	8003634 <vTaskSwitchContext+0x2c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3b01      	subs	r3, #1
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	4919      	ldr	r1, [pc, #100]	; (80036a4 <vTaskSwitchContext+0x9c>)
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	0013      	movs	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	189b      	adds	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	585b      	ldr	r3, [r3, r1]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0ee      	beq.n	800362c <vTaskSwitchContext+0x24>
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	0013      	movs	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	189b      	adds	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <vTaskSwitchContext+0x9c>)
 800365a:	189b      	adds	r3, r3, r2
 800365c:	603b      	str	r3, [r7, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	605a      	str	r2, [r3, #4]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	3308      	adds	r3, #8
 8003670:	429a      	cmp	r2, r3
 8003672:	d104      	bne.n	800367e <vTaskSwitchContext+0x76>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <vTaskSwitchContext+0xa0>)
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <vTaskSwitchContext+0x98>)
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	601a      	str	r2, [r3, #0]
}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	46bd      	mov	sp, r7
 8003692:	b002      	add	sp, #8
 8003694:	bd80      	pop	{r7, pc}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	200004e8 	.word	0x200004e8
 800369c:	200004d4 	.word	0x200004d4
 80036a0:	200004c8 	.word	0x200004c8
 80036a4:	200003c4 	.word	0x200003c4
 80036a8:	200003c0 	.word	0x200003c0

080036ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <vTaskPlaceOnEventList+0x14>
 80036bc:	b672      	cpsid	i
 80036be:	e7fe      	b.n	80036be <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036c0:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <vTaskPlaceOnEventList+0x38>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3318      	adds	r3, #24
 80036c6:	001a      	movs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	0011      	movs	r1, r2
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7fe ffd4 	bl	800267a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2101      	movs	r1, #1
 80036d6:	0018      	movs	r0, r3
 80036d8:	f000 fa16 	bl	8003b08 <prvAddCurrentTaskToDelayedList>
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b002      	add	sp, #8
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	200003c0 	.word	0x200003c0

080036e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <xTaskRemoveFromEventList+0x1a>
 80036fe:	b672      	cpsid	i
 8003700:	e7fe      	b.n	8003700 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	3318      	adds	r3, #24
 8003706:	0018      	movs	r0, r3
 8003708:	f7fe ffed 	bl	80026e6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800370c:	4b1e      	ldr	r3, [pc, #120]	; (8003788 <xTaskRemoveFromEventList+0xa0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d11d      	bne.n	8003750 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	3304      	adds	r3, #4
 8003718:	0018      	movs	r0, r3
 800371a:	f7fe ffe4 	bl	80026e6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003722:	4b1a      	ldr	r3, [pc, #104]	; (800378c <xTaskRemoveFromEventList+0xa4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d903      	bls.n	8003732 <xTaskRemoveFromEventList+0x4a>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372e:	4b17      	ldr	r3, [pc, #92]	; (800378c <xTaskRemoveFromEventList+0xa4>)
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003736:	0013      	movs	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	189b      	adds	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4a14      	ldr	r2, [pc, #80]	; (8003790 <xTaskRemoveFromEventList+0xa8>)
 8003740:	189a      	adds	r2, r3, r2
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	3304      	adds	r3, #4
 8003746:	0019      	movs	r1, r3
 8003748:	0010      	movs	r0, r2
 800374a:	f7fe ff74 	bl	8002636 <vListInsertEnd>
 800374e:	e007      	b.n	8003760 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	3318      	adds	r3, #24
 8003754:	001a      	movs	r2, r3
 8003756:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <xTaskRemoveFromEventList+0xac>)
 8003758:	0011      	movs	r1, r2
 800375a:	0018      	movs	r0, r3
 800375c:	f7fe ff6b 	bl	8002636 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <xTaskRemoveFromEventList+0xb0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	429a      	cmp	r2, r3
 800376c:	d905      	bls.n	800377a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800376e:	2301      	movs	r3, #1
 8003770:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <xTaskRemoveFromEventList+0xb4>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e001      	b.n	800377e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800377e:	68fb      	ldr	r3, [r7, #12]
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	b004      	add	sp, #16
 8003786:	bd80      	pop	{r7, pc}
 8003788:	200004e8 	.word	0x200004e8
 800378c:	200004c8 	.word	0x200004c8
 8003790:	200003c4 	.word	0x200003c4
 8003794:	20000480 	.word	0x20000480
 8003798:	200003c0 	.word	0x200003c0
 800379c:	200004d4 	.word	0x200004d4

080037a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <vTaskInternalSetTimeOutState+0x20>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <vTaskInternalSetTimeOutState+0x24>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	605a      	str	r2, [r3, #4]
}
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b002      	add	sp, #8
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	200004d8 	.word	0x200004d8
 80037c4:	200004c4 	.word	0x200004c4

080037c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <xTaskCheckForTimeOut+0x14>
 80037d8:	b672      	cpsid	i
 80037da:	e7fe      	b.n	80037da <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <xTaskCheckForTimeOut+0x1e>
 80037e2:	b672      	cpsid	i
 80037e4:	e7fe      	b.n	80037e4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80037e6:	f000 fa7b 	bl	8003ce0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80037ea:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <xTaskCheckForTimeOut+0x98>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3301      	adds	r3, #1
 8003800:	d102      	bne.n	8003808 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	e024      	b.n	8003852 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b15      	ldr	r3, [pc, #84]	; (8003864 <xTaskCheckForTimeOut+0x9c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d007      	beq.n	8003824 <xTaskCheckForTimeOut+0x5c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800381e:	2301      	movs	r3, #1
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	e016      	b.n	8003852 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	429a      	cmp	r2, r3
 800382c:	d20c      	bcs.n	8003848 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1ad2      	subs	r2, r2, r3
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	0018      	movs	r0, r3
 800383e:	f7ff ffaf 	bl	80037a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	e004      	b.n	8003852 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800384e:	2301      	movs	r3, #1
 8003850:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8003852:	f000 fa57 	bl	8003d04 <vPortExitCritical>

	return xReturn;
 8003856:	697b      	ldr	r3, [r7, #20]
}
 8003858:	0018      	movs	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	b006      	add	sp, #24
 800385e:	bd80      	pop	{r7, pc}
 8003860:	200004c4 	.word	0x200004c4
 8003864:	200004d8 	.word	0x200004d8

08003868 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800386c:	4b02      	ldr	r3, [pc, #8]	; (8003878 <vTaskMissedYield+0x10>)
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]
}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	200004d4 	.word	0x200004d4

0800387c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003884:	f000 f84e 	bl	8003924 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003888:	4b03      	ldr	r3, [pc, #12]	; (8003898 <prvIdleTask+0x1c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d9f9      	bls.n	8003884 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003890:	f000 fa16 	bl	8003cc0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003894:	e7f6      	b.n	8003884 <prvIdleTask+0x8>
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	200003c4 	.word	0x200003c4

0800389c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038a2:	2300      	movs	r3, #0
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	e00c      	b.n	80038c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	0013      	movs	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	189b      	adds	r3, r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4a14      	ldr	r2, [pc, #80]	; (8003904 <prvInitialiseTaskLists+0x68>)
 80038b4:	189b      	adds	r3, r3, r2
 80038b6:	0018      	movs	r0, r3
 80038b8:	f7fe fe94 	bl	80025e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3301      	adds	r3, #1
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b06      	cmp	r3, #6
 80038c6:	d9ef      	bls.n	80038a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80038c8:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <prvInitialiseTaskLists+0x6c>)
 80038ca:	0018      	movs	r0, r3
 80038cc:	f7fe fe8a 	bl	80025e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80038d0:	4b0e      	ldr	r3, [pc, #56]	; (800390c <prvInitialiseTaskLists+0x70>)
 80038d2:	0018      	movs	r0, r3
 80038d4:	f7fe fe86 	bl	80025e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80038d8:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <prvInitialiseTaskLists+0x74>)
 80038da:	0018      	movs	r0, r3
 80038dc:	f7fe fe82 	bl	80025e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <prvInitialiseTaskLists+0x78>)
 80038e2:	0018      	movs	r0, r3
 80038e4:	f7fe fe7e 	bl	80025e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <prvInitialiseTaskLists+0x7c>)
 80038ea:	0018      	movs	r0, r3
 80038ec:	f7fe fe7a 	bl	80025e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80038f0:	4b0a      	ldr	r3, [pc, #40]	; (800391c <prvInitialiseTaskLists+0x80>)
 80038f2:	4a05      	ldr	r2, [pc, #20]	; (8003908 <prvInitialiseTaskLists+0x6c>)
 80038f4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038f6:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <prvInitialiseTaskLists+0x84>)
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <prvInitialiseTaskLists+0x70>)
 80038fa:	601a      	str	r2, [r3, #0]
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}
 8003904:	200003c4 	.word	0x200003c4
 8003908:	20000450 	.word	0x20000450
 800390c:	20000464 	.word	0x20000464
 8003910:	20000480 	.word	0x20000480
 8003914:	20000494 	.word	0x20000494
 8003918:	200004ac 	.word	0x200004ac
 800391c:	20000478 	.word	0x20000478
 8003920:	2000047c 	.word	0x2000047c

08003924 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800392a:	e01a      	b.n	8003962 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800392c:	f000 f9d8 	bl	8003ce0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003930:	4b10      	ldr	r3, [pc, #64]	; (8003974 <prvCheckTasksWaitingTermination+0x50>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3304      	adds	r3, #4
 800393c:	0018      	movs	r0, r3
 800393e:	f7fe fed2 	bl	80026e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003942:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <prvCheckTasksWaitingTermination+0x54>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	1e5a      	subs	r2, r3, #1
 8003948:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <prvCheckTasksWaitingTermination+0x54>)
 800394a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <prvCheckTasksWaitingTermination+0x58>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	1e5a      	subs	r2, r3, #1
 8003952:	4b0a      	ldr	r3, [pc, #40]	; (800397c <prvCheckTasksWaitingTermination+0x58>)
 8003954:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003956:	f000 f9d5 	bl	8003d04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	0018      	movs	r0, r3
 800395e:	f000 f80f 	bl	8003980 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <prvCheckTasksWaitingTermination+0x58>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e0      	bne.n	800392c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	46c0      	nop			; (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	b002      	add	sp, #8
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20000494 	.word	0x20000494
 8003978:	200004c0 	.word	0x200004c0
 800397c:	200004a8 	.word	0x200004a8

08003980 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2251      	movs	r2, #81	; 0x51
 800398c:	5c9b      	ldrb	r3, [r3, r2]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	0018      	movs	r0, r3
 8003998:	f000 fae0 	bl	8003f5c <vPortFree>
				vPortFree( pxTCB );
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	0018      	movs	r0, r3
 80039a0:	f000 fadc 	bl	8003f5c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039a4:	e010      	b.n	80039c8 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2251      	movs	r2, #81	; 0x51
 80039aa:	5c9b      	ldrb	r3, [r3, r2]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d104      	bne.n	80039ba <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	0018      	movs	r0, r3
 80039b4:	f000 fad2 	bl	8003f5c <vPortFree>
	}
 80039b8:	e006      	b.n	80039c8 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2251      	movs	r2, #81	; 0x51
 80039be:	5c9b      	ldrb	r3, [r3, r2]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d001      	beq.n	80039c8 <prvDeleteTCB+0x48>
 80039c4:	b672      	cpsid	i
 80039c6:	e7fe      	b.n	80039c6 <prvDeleteTCB+0x46>
	}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039d6:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <prvResetNextTaskUnblockTime+0x40>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <prvResetNextTaskUnblockTime+0x14>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <prvResetNextTaskUnblockTime+0x16>
 80039e4:	2300      	movs	r3, #0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d004      	beq.n	80039f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80039ea:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <prvResetNextTaskUnblockTime+0x44>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	4252      	negs	r2, r2
 80039f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80039f2:	e008      	b.n	8003a06 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039f4:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <prvResetNextTaskUnblockTime+0x40>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <prvResetNextTaskUnblockTime+0x44>)
 8003a04:	601a      	str	r2, [r3, #0]
}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b002      	add	sp, #8
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	20000478 	.word	0x20000478
 8003a14:	200004e0 	.word	0x200004e0

08003a18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <xTaskGetSchedulerState+0x30>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d102      	bne.n	8003a2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a26:	2301      	movs	r3, #1
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	e008      	b.n	8003a3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a2c:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <xTaskGetSchedulerState+0x34>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a34:	2302      	movs	r3, #2
 8003a36:	607b      	str	r3, [r7, #4]
 8003a38:	e001      	b.n	8003a3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a3e:	687b      	ldr	r3, [r7, #4]
	}
 8003a40:	0018      	movs	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b002      	add	sp, #8
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	200004cc 	.word	0x200004cc
 8003a4c:	200004e8 	.word	0x200004e8

08003a50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d044      	beq.n	8003af0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a66:	4b25      	ldr	r3, [pc, #148]	; (8003afc <xTaskPriorityDisinherit+0xac>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <xTaskPriorityDisinherit+0x24>
 8003a70:	b672      	cpsid	i
 8003a72:	e7fe      	b.n	8003a72 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <xTaskPriorityDisinherit+0x30>
 8003a7c:	b672      	cpsid	i
 8003a7e:	e7fe      	b.n	8003a7e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a84:	1e5a      	subs	r2, r3, #1
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d02c      	beq.n	8003af0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d128      	bne.n	8003af0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f7fe fe1f 	bl	80026e6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	2207      	movs	r2, #7
 8003ab6:	1ad2      	subs	r2, r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <xTaskPriorityDisinherit+0xb0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d903      	bls.n	8003ad0 <xTaskPriorityDisinherit+0x80>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <xTaskPriorityDisinherit+0xb0>)
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad4:	0013      	movs	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	189b      	adds	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4a09      	ldr	r2, [pc, #36]	; (8003b04 <xTaskPriorityDisinherit+0xb4>)
 8003ade:	189a      	adds	r2, r3, r2
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	0010      	movs	r0, r2
 8003ae8:	f7fe fda5 	bl	8002636 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003aec:	2301      	movs	r3, #1
 8003aee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003af0:	68fb      	ldr	r3, [r7, #12]
	}
 8003af2:	0018      	movs	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b004      	add	sp, #16
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	200003c0 	.word	0x200003c0
 8003b00:	200004c8 	.word	0x200004c8
 8003b04:	200003c4 	.word	0x200003c4

08003b08 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b12:	4b21      	ldr	r3, [pc, #132]	; (8003b98 <prvAddCurrentTaskToDelayedList+0x90>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b18:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f7fe fde1 	bl	80026e6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3301      	adds	r3, #1
 8003b28:	d10b      	bne.n	8003b42 <prvAddCurrentTaskToDelayedList+0x3a>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b30:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	1d1a      	adds	r2, r3, #4
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <prvAddCurrentTaskToDelayedList+0x98>)
 8003b38:	0011      	movs	r1, r2
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7fe fd7b 	bl	8002636 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b40:	e026      	b.n	8003b90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	18d3      	adds	r3, r2, r3
 8003b48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b4a:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d209      	bcs.n	8003b6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3304      	adds	r3, #4
 8003b64:	0019      	movs	r1, r3
 8003b66:	0010      	movs	r0, r2
 8003b68:	f7fe fd87 	bl	800267a <vListInsert>
}
 8003b6c:	e010      	b.n	8003b90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3304      	adds	r3, #4
 8003b78:	0019      	movs	r1, r3
 8003b7a:	0010      	movs	r0, r2
 8003b7c:	f7fe fd7d 	bl	800267a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b80:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d202      	bcs.n	8003b90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003b8a:	4b08      	ldr	r3, [pc, #32]	; (8003bac <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	601a      	str	r2, [r3, #0]
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b004      	add	sp, #16
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	200004c4 	.word	0x200004c4
 8003b9c:	200003c0 	.word	0x200003c0
 8003ba0:	200004ac 	.word	0x200004ac
 8003ba4:	2000047c 	.word	0x2000047c
 8003ba8:	20000478 	.word	0x20000478
 8003bac:	200004e0 	.word	0x200004e0

08003bb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3b04      	subs	r3, #4
 8003bc0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2280      	movs	r2, #128	; 0x80
 8003bc6:	0452      	lsls	r2, r2, #17
 8003bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3b04      	subs	r3, #4
 8003bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3b04      	subs	r3, #4
 8003bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003bdc:	4a08      	ldr	r2, [pc, #32]	; (8003c00 <pxPortInitialiseStack+0x50>)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3b14      	subs	r3, #20
 8003be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3b20      	subs	r3, #32
 8003bf2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
}
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	b004      	add	sp, #16
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	08003c05 	.word	0x08003c05

08003c04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c0e:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <prvTaskExitError+0x2c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3301      	adds	r3, #1
 8003c14:	d001      	beq.n	8003c1a <prvTaskExitError+0x16>
 8003c16:	b672      	cpsid	i
 8003c18:	e7fe      	b.n	8003c18 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003c1a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003c1c:	46c0      	nop			; (mov r8, r8)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0fc      	beq.n	8003c1e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c24:	46c0      	nop			; (mov r8, r8)
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b002      	add	sp, #8
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	20000008 	.word	0x20000008

08003c34 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003c40:	4a0b      	ldr	r2, [pc, #44]	; (8003c70 <pxCurrentTCBConst2>)
 8003c42:	6813      	ldr	r3, [r2, #0]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	3020      	adds	r0, #32
 8003c48:	f380 8809 	msr	PSP, r0
 8003c4c:	2002      	movs	r0, #2
 8003c4e:	f380 8814 	msr	CONTROL, r0
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003c58:	46ae      	mov	lr, r5
 8003c5a:	bc08      	pop	{r3}
 8003c5c:	bc04      	pop	{r2}
 8003c5e:	b662      	cpsie	i
 8003c60:	4718      	bx	r3
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	46c0      	nop			; (mov r8, r8)
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	46c0      	nop			; (mov r8, r8)

08003c70 <pxCurrentTCBConst2>:
 8003c70:	200003c0 	.word	0x200003c0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	46c0      	nop			; (mov r8, r8)

08003c78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003c7c:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <xPortStartScheduler+0x40>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <xPortStartScheduler+0x40>)
 8003c82:	21ff      	movs	r1, #255	; 0xff
 8003c84:	0409      	lsls	r1, r1, #16
 8003c86:	430a      	orrs	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <xPortStartScheduler+0x40>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <xPortStartScheduler+0x40>)
 8003c90:	21ff      	movs	r1, #255	; 0xff
 8003c92:	0609      	lsls	r1, r1, #24
 8003c94:	430a      	orrs	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003c98:	f000 f898 	bl	8003dcc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c9c:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <xPortStartScheduler+0x44>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003ca2:	f7ff ffcd 	bl	8003c40 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ca6:	f7ff fcaf 	bl	8003608 <vTaskSwitchContext>
	prvTaskExitError();
 8003caa:	f7ff ffab 	bl	8003c04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	e000ed20 	.word	0xe000ed20
 8003cbc:	20000008 	.word	0x20000008

08003cc0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <vPortYield+0x1c>)
 8003cc6:	2280      	movs	r2, #128	; 0x80
 8003cc8:	0552      	lsls	r2, r2, #21
 8003cca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8003ccc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003cd0:	f3bf 8f6f 	isb	sy
}
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	e000ed04 	.word	0xe000ed04

08003ce0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003ce4:	b672      	cpsid	i
    uxCriticalNesting++;
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <vPortEnterCritical+0x20>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <vPortEnterCritical+0x20>)
 8003cee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003cf0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003cf4:	f3bf 8f6f 	isb	sy
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	20000008 	.word	0x20000008

08003d04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <vPortExitCritical+0x2c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <vPortExitCritical+0x10>
 8003d10:	b672      	cpsid	i
 8003d12:	e7fe      	b.n	8003d12 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <vPortExitCritical+0x2c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	1e5a      	subs	r2, r3, #1
 8003d1a:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <vPortExitCritical+0x2c>)
 8003d1c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8003d1e:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <vPortExitCritical+0x2c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d100      	bne.n	8003d28 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003d26:	b662      	cpsie	i
    }
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	20000008 	.word	0x20000008

08003d34 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003d34:	f3ef 8010 	mrs	r0, PRIMASK
 8003d38:	b672      	cpsid	i
 8003d3a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	0018      	movs	r0, r3

08003d40 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003d40:	f380 8810 	msr	PRIMASK, r0
 8003d44:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003d46:	46c0      	nop			; (mov r8, r8)
	...

08003d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d50:	f3ef 8009 	mrs	r0, PSP
 8003d54:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <pxCurrentTCBConst>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	3820      	subs	r0, #32
 8003d5a:	6010      	str	r0, [r2, #0]
 8003d5c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003d5e:	4644      	mov	r4, r8
 8003d60:	464d      	mov	r5, r9
 8003d62:	4656      	mov	r6, sl
 8003d64:	465f      	mov	r7, fp
 8003d66:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003d68:	b508      	push	{r3, lr}
 8003d6a:	b672      	cpsid	i
 8003d6c:	f7ff fc4c 	bl	8003608 <vTaskSwitchContext>
 8003d70:	b662      	cpsie	i
 8003d72:	bc0c      	pop	{r2, r3}
 8003d74:	6811      	ldr	r1, [r2, #0]
 8003d76:	6808      	ldr	r0, [r1, #0]
 8003d78:	3010      	adds	r0, #16
 8003d7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003d7c:	46a0      	mov	r8, r4
 8003d7e:	46a9      	mov	r9, r5
 8003d80:	46b2      	mov	sl, r6
 8003d82:	46bb      	mov	fp, r7
 8003d84:	f380 8809 	msr	PSP, r0
 8003d88:	3820      	subs	r0, #32
 8003d8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003d8c:	4718      	bx	r3
 8003d8e:	46c0      	nop			; (mov r8, r8)

08003d90 <pxCurrentTCBConst>:
 8003d90:	200003c0 	.word	0x200003c0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	46c0      	nop			; (mov r8, r8)

08003d98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d9e:	f7ff ffc9 	bl	8003d34 <ulSetInterruptMaskFromISR>
 8003da2:	0003      	movs	r3, r0
 8003da4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003da6:	f7ff fb7b 	bl	80034a0 <xTaskIncrementTick>
 8003daa:	1e03      	subs	r3, r0, #0
 8003dac:	d003      	beq.n	8003db6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <SysTick_Handler+0x30>)
 8003db0:	2280      	movs	r2, #128	; 0x80
 8003db2:	0552      	lsls	r2, r2, #21
 8003db4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7ff ffc1 	bl	8003d40 <vClearInterruptMaskFromISR>
}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b002      	add	sp, #8
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <prvSetupTimerInterrupt+0x34>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <prvSetupTimerInterrupt+0x38>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <prvSetupTimerInterrupt+0x3c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	22fa      	movs	r2, #250	; 0xfa
 8003de2:	0091      	lsls	r1, r2, #2
 8003de4:	0018      	movs	r0, r3
 8003de6:	f7fc f9a1 	bl	800012c <__udivsi3>
 8003dea:	0003      	movs	r3, r0
 8003dec:	001a      	movs	r2, r3
 8003dee:	4b07      	ldr	r3, [pc, #28]	; (8003e0c <prvSetupTimerInterrupt+0x40>)
 8003df0:	3a01      	subs	r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003df4:	4b02      	ldr	r3, [pc, #8]	; (8003e00 <prvSetupTimerInterrupt+0x34>)
 8003df6:	2207      	movs	r2, #7
 8003df8:	601a      	str	r2, [r3, #0]
}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	e000e010 	.word	0xe000e010
 8003e04:	e000e018 	.word	0xe000e018
 8003e08:	20000000 	.word	0x20000000
 8003e0c:	e000e014 	.word	0xe000e014

08003e10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8003e1c:	f7ff faa8 	bl	8003370 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e20:	4b49      	ldr	r3, [pc, #292]	; (8003f48 <pvPortMalloc+0x138>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e28:	f000 f8e0 	bl	8003fec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e2c:	4b47      	ldr	r3, [pc, #284]	; (8003f4c <pvPortMalloc+0x13c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	4013      	ands	r3, r2
 8003e34:	d000      	beq.n	8003e38 <pvPortMalloc+0x28>
 8003e36:	e079      	b.n	8003f2c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d012      	beq.n	8003e64 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8003e3e:	2208      	movs	r2, #8
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	189b      	adds	r3, r3, r2
 8003e44:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2207      	movs	r2, #7
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d00a      	beq.n	8003e64 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2207      	movs	r2, #7
 8003e52:	4393      	bics	r3, r2
 8003e54:	3308      	adds	r3, #8
 8003e56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2207      	movs	r2, #7
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d001      	beq.n	8003e64 <pvPortMalloc+0x54>
 8003e60:	b672      	cpsid	i
 8003e62:	e7fe      	b.n	8003e62 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d060      	beq.n	8003f2c <pvPortMalloc+0x11c>
 8003e6a:	4b39      	ldr	r3, [pc, #228]	; (8003f50 <pvPortMalloc+0x140>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d85b      	bhi.n	8003f2c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e74:	4b37      	ldr	r3, [pc, #220]	; (8003f54 <pvPortMalloc+0x144>)
 8003e76:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003e78:	4b36      	ldr	r3, [pc, #216]	; (8003f54 <pvPortMalloc+0x144>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e7e:	e004      	b.n	8003e8a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d903      	bls.n	8003e9c <pvPortMalloc+0x8c>
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1f1      	bne.n	8003e80 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003e9c:	4b2a      	ldr	r3, [pc, #168]	; (8003f48 <pvPortMalloc+0x138>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d042      	beq.n	8003f2c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2208      	movs	r2, #8
 8003eac:	189b      	adds	r3, r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	1ad2      	subs	r2, r2, r3
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d916      	bls.n	8003ef6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	18d3      	adds	r3, r2, r3
 8003ece:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2207      	movs	r2, #7
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d001      	beq.n	8003edc <pvPortMalloc+0xcc>
 8003ed8:	b672      	cpsid	i
 8003eda:	e7fe      	b.n	8003eda <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	1ad2      	subs	r2, r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f000 f8db 	bl	80040ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ef6:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <pvPortMalloc+0x140>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	1ad2      	subs	r2, r2, r3
 8003f00:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <pvPortMalloc+0x140>)
 8003f02:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f04:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <pvPortMalloc+0x140>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <pvPortMalloc+0x148>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d203      	bcs.n	8003f18 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f10:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <pvPortMalloc+0x140>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <pvPortMalloc+0x148>)
 8003f16:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <pvPortMalloc+0x13c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f2c:	f7ff fa2c 	bl	8003388 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2207      	movs	r2, #7
 8003f34:	4013      	ands	r3, r2
 8003f36:	d001      	beq.n	8003f3c <pvPortMalloc+0x12c>
 8003f38:	b672      	cpsid	i
 8003f3a:	e7fe      	b.n	8003f3a <pvPortMalloc+0x12a>
	return pvReturn;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
}
 8003f3e:	0018      	movs	r0, r3
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b006      	add	sp, #24
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	200010f4 	.word	0x200010f4
 8003f4c:	20001100 	.word	0x20001100
 8003f50:	200010f8 	.word	0x200010f8
 8003f54:	200010ec 	.word	0x200010ec
 8003f58:	200010fc 	.word	0x200010fc

08003f5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d035      	beq.n	8003fda <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f6e:	2308      	movs	r3, #8
 8003f70:	425b      	negs	r3, r3
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	18d3      	adds	r3, r2, r3
 8003f76:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	4b18      	ldr	r3, [pc, #96]	; (8003fe4 <vPortFree+0x88>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4013      	ands	r3, r2
 8003f86:	d101      	bne.n	8003f8c <vPortFree+0x30>
 8003f88:	b672      	cpsid	i
 8003f8a:	e7fe      	b.n	8003f8a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <vPortFree+0x3c>
 8003f94:	b672      	cpsid	i
 8003f96:	e7fe      	b.n	8003f96 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <vPortFree+0x88>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d01a      	beq.n	8003fda <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d116      	bne.n	8003fda <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <vPortFree+0x88>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003fbc:	f7ff f9d8 	bl	8003370 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <vPortFree+0x8c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	18d2      	adds	r2, r2, r3
 8003fca:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <vPortFree+0x8c>)
 8003fcc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f000 f86b 	bl	80040ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003fd6:	f7ff f9d7 	bl	8003388 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b004      	add	sp, #16
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	20001100 	.word	0x20001100
 8003fe8:	200010f8 	.word	0x200010f8

08003fec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ff2:	23c0      	movs	r3, #192	; 0xc0
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ff8:	4b26      	ldr	r3, [pc, #152]	; (8004094 <prvHeapInit+0xa8>)
 8003ffa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2207      	movs	r2, #7
 8004000:	4013      	ands	r3, r2
 8004002:	d00c      	beq.n	800401e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3307      	adds	r3, #7
 8004008:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2207      	movs	r2, #7
 800400e:	4393      	bics	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	1ad2      	subs	r2, r2, r3
 8004018:	4b1e      	ldr	r3, [pc, #120]	; (8004094 <prvHeapInit+0xa8>)
 800401a:	18d3      	adds	r3, r2, r3
 800401c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004022:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <prvHeapInit+0xac>)
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004028:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <prvHeapInit+0xac>)
 800402a:	2200      	movs	r2, #0
 800402c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	18d3      	adds	r3, r2, r3
 8004034:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004036:	2208      	movs	r2, #8
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2207      	movs	r2, #7
 8004042:	4393      	bics	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4b14      	ldr	r3, [pc, #80]	; (800409c <prvHeapInit+0xb0>)
 800404a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800404c:	4b13      	ldr	r3, [pc, #76]	; (800409c <prvHeapInit+0xb0>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2200      	movs	r2, #0
 8004052:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004054:	4b11      	ldr	r3, [pc, #68]	; (800409c <prvHeapInit+0xb0>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	1ad2      	subs	r2, r2, r3
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <prvHeapInit+0xb0>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <prvHeapInit+0xb4>)
 8004078:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <prvHeapInit+0xb8>)
 8004080:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004082:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <prvHeapInit+0xbc>)
 8004084:	2280      	movs	r2, #128	; 0x80
 8004086:	0612      	lsls	r2, r2, #24
 8004088:	601a      	str	r2, [r3, #0]
}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	46bd      	mov	sp, r7
 800408e:	b004      	add	sp, #16
 8004090:	bd80      	pop	{r7, pc}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	200004ec 	.word	0x200004ec
 8004098:	200010ec 	.word	0x200010ec
 800409c:	200010f4 	.word	0x200010f4
 80040a0:	200010fc 	.word	0x200010fc
 80040a4:	200010f8 	.word	0x200010f8
 80040a8:	20001100 	.word	0x20001100

080040ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040b4:	4b27      	ldr	r3, [pc, #156]	; (8004154 <prvInsertBlockIntoFreeList+0xa8>)
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	e002      	b.n	80040c0 <prvInsertBlockIntoFreeList+0x14>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d8f7      	bhi.n	80040ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	18d3      	adds	r3, r2, r3
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d108      	bne.n	80040ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	18d2      	adds	r2, r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	18d2      	adds	r2, r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d118      	bne.n	8004134 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <prvInsertBlockIntoFreeList+0xac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d00d      	beq.n	800412a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	18d2      	adds	r2, r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e008      	b.n	800413c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <prvInsertBlockIntoFreeList+0xac>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	e003      	b.n	800413c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	429a      	cmp	r2, r3
 8004142:	d002      	beq.n	800414a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	46bd      	mov	sp, r7
 800414e:	b004      	add	sp, #16
 8004150:	bd80      	pop	{r7, pc}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	200010ec 	.word	0x200010ec
 8004158:	200010f4 	.word	0x200010f4

0800415c <__errno>:
 800415c:	4b01      	ldr	r3, [pc, #4]	; (8004164 <__errno+0x8>)
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	4770      	bx	lr
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	2000000c 	.word	0x2000000c

08004168 <__libc_init_array>:
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	2600      	movs	r6, #0
 800416c:	4d0c      	ldr	r5, [pc, #48]	; (80041a0 <__libc_init_array+0x38>)
 800416e:	4c0d      	ldr	r4, [pc, #52]	; (80041a4 <__libc_init_array+0x3c>)
 8004170:	1b64      	subs	r4, r4, r5
 8004172:	10a4      	asrs	r4, r4, #2
 8004174:	42a6      	cmp	r6, r4
 8004176:	d109      	bne.n	800418c <__libc_init_array+0x24>
 8004178:	2600      	movs	r6, #0
 800417a:	f000 fc8b 	bl	8004a94 <_init>
 800417e:	4d0a      	ldr	r5, [pc, #40]	; (80041a8 <__libc_init_array+0x40>)
 8004180:	4c0a      	ldr	r4, [pc, #40]	; (80041ac <__libc_init_array+0x44>)
 8004182:	1b64      	subs	r4, r4, r5
 8004184:	10a4      	asrs	r4, r4, #2
 8004186:	42a6      	cmp	r6, r4
 8004188:	d105      	bne.n	8004196 <__libc_init_array+0x2e>
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	00b3      	lsls	r3, r6, #2
 800418e:	58eb      	ldr	r3, [r5, r3]
 8004190:	4798      	blx	r3
 8004192:	3601      	adds	r6, #1
 8004194:	e7ee      	b.n	8004174 <__libc_init_array+0xc>
 8004196:	00b3      	lsls	r3, r6, #2
 8004198:	58eb      	ldr	r3, [r5, r3]
 800419a:	4798      	blx	r3
 800419c:	3601      	adds	r6, #1
 800419e:	e7f2      	b.n	8004186 <__libc_init_array+0x1e>
 80041a0:	08004bb0 	.word	0x08004bb0
 80041a4:	08004bb0 	.word	0x08004bb0
 80041a8:	08004bb0 	.word	0x08004bb0
 80041ac:	08004bb4 	.word	0x08004bb4

080041b0 <memcpy>:
 80041b0:	2300      	movs	r3, #0
 80041b2:	b510      	push	{r4, lr}
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d100      	bne.n	80041ba <memcpy+0xa>
 80041b8:	bd10      	pop	{r4, pc}
 80041ba:	5ccc      	ldrb	r4, [r1, r3]
 80041bc:	54c4      	strb	r4, [r0, r3]
 80041be:	3301      	adds	r3, #1
 80041c0:	e7f8      	b.n	80041b4 <memcpy+0x4>

080041c2 <memset>:
 80041c2:	0003      	movs	r3, r0
 80041c4:	1882      	adds	r2, r0, r2
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d100      	bne.n	80041cc <memset+0xa>
 80041ca:	4770      	bx	lr
 80041cc:	7019      	strb	r1, [r3, #0]
 80041ce:	3301      	adds	r3, #1
 80041d0:	e7f9      	b.n	80041c6 <memset+0x4>
	...

080041d4 <siprintf>:
 80041d4:	b40e      	push	{r1, r2, r3}
 80041d6:	b500      	push	{lr}
 80041d8:	490b      	ldr	r1, [pc, #44]	; (8004208 <siprintf+0x34>)
 80041da:	b09c      	sub	sp, #112	; 0x70
 80041dc:	ab1d      	add	r3, sp, #116	; 0x74
 80041de:	9002      	str	r0, [sp, #8]
 80041e0:	9006      	str	r0, [sp, #24]
 80041e2:	9107      	str	r1, [sp, #28]
 80041e4:	9104      	str	r1, [sp, #16]
 80041e6:	4809      	ldr	r0, [pc, #36]	; (800420c <siprintf+0x38>)
 80041e8:	4909      	ldr	r1, [pc, #36]	; (8004210 <siprintf+0x3c>)
 80041ea:	cb04      	ldmia	r3!, {r2}
 80041ec:	9105      	str	r1, [sp, #20]
 80041ee:	6800      	ldr	r0, [r0, #0]
 80041f0:	a902      	add	r1, sp, #8
 80041f2:	9301      	str	r3, [sp, #4]
 80041f4:	f000 f870 	bl	80042d8 <_svfiprintf_r>
 80041f8:	2300      	movs	r3, #0
 80041fa:	9a02      	ldr	r2, [sp, #8]
 80041fc:	7013      	strb	r3, [r2, #0]
 80041fe:	b01c      	add	sp, #112	; 0x70
 8004200:	bc08      	pop	{r3}
 8004202:	b003      	add	sp, #12
 8004204:	4718      	bx	r3
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	7fffffff 	.word	0x7fffffff
 800420c:	2000000c 	.word	0x2000000c
 8004210:	ffff0208 	.word	0xffff0208

08004214 <__ssputs_r>:
 8004214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004216:	688e      	ldr	r6, [r1, #8]
 8004218:	b085      	sub	sp, #20
 800421a:	0007      	movs	r7, r0
 800421c:	000c      	movs	r4, r1
 800421e:	9203      	str	r2, [sp, #12]
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	429e      	cmp	r6, r3
 8004224:	d83c      	bhi.n	80042a0 <__ssputs_r+0x8c>
 8004226:	2390      	movs	r3, #144	; 0x90
 8004228:	898a      	ldrh	r2, [r1, #12]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	421a      	tst	r2, r3
 800422e:	d034      	beq.n	800429a <__ssputs_r+0x86>
 8004230:	6909      	ldr	r1, [r1, #16]
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	6960      	ldr	r0, [r4, #20]
 8004236:	1a5b      	subs	r3, r3, r1
 8004238:	9302      	str	r3, [sp, #8]
 800423a:	2303      	movs	r3, #3
 800423c:	4343      	muls	r3, r0
 800423e:	0fdd      	lsrs	r5, r3, #31
 8004240:	18ed      	adds	r5, r5, r3
 8004242:	9b01      	ldr	r3, [sp, #4]
 8004244:	9802      	ldr	r0, [sp, #8]
 8004246:	3301      	adds	r3, #1
 8004248:	181b      	adds	r3, r3, r0
 800424a:	106d      	asrs	r5, r5, #1
 800424c:	42ab      	cmp	r3, r5
 800424e:	d900      	bls.n	8004252 <__ssputs_r+0x3e>
 8004250:	001d      	movs	r5, r3
 8004252:	0553      	lsls	r3, r2, #21
 8004254:	d532      	bpl.n	80042bc <__ssputs_r+0xa8>
 8004256:	0029      	movs	r1, r5
 8004258:	0038      	movs	r0, r7
 800425a:	f000 fb49 	bl	80048f0 <_malloc_r>
 800425e:	1e06      	subs	r6, r0, #0
 8004260:	d109      	bne.n	8004276 <__ssputs_r+0x62>
 8004262:	230c      	movs	r3, #12
 8004264:	603b      	str	r3, [r7, #0]
 8004266:	2340      	movs	r3, #64	; 0x40
 8004268:	2001      	movs	r0, #1
 800426a:	89a2      	ldrh	r2, [r4, #12]
 800426c:	4240      	negs	r0, r0
 800426e:	4313      	orrs	r3, r2
 8004270:	81a3      	strh	r3, [r4, #12]
 8004272:	b005      	add	sp, #20
 8004274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004276:	9a02      	ldr	r2, [sp, #8]
 8004278:	6921      	ldr	r1, [r4, #16]
 800427a:	f7ff ff99 	bl	80041b0 <memcpy>
 800427e:	89a3      	ldrh	r3, [r4, #12]
 8004280:	4a14      	ldr	r2, [pc, #80]	; (80042d4 <__ssputs_r+0xc0>)
 8004282:	401a      	ands	r2, r3
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	4313      	orrs	r3, r2
 8004288:	81a3      	strh	r3, [r4, #12]
 800428a:	9b02      	ldr	r3, [sp, #8]
 800428c:	6126      	str	r6, [r4, #16]
 800428e:	18f6      	adds	r6, r6, r3
 8004290:	6026      	str	r6, [r4, #0]
 8004292:	6165      	str	r5, [r4, #20]
 8004294:	9e01      	ldr	r6, [sp, #4]
 8004296:	1aed      	subs	r5, r5, r3
 8004298:	60a5      	str	r5, [r4, #8]
 800429a:	9b01      	ldr	r3, [sp, #4]
 800429c:	429e      	cmp	r6, r3
 800429e:	d900      	bls.n	80042a2 <__ssputs_r+0x8e>
 80042a0:	9e01      	ldr	r6, [sp, #4]
 80042a2:	0032      	movs	r2, r6
 80042a4:	9903      	ldr	r1, [sp, #12]
 80042a6:	6820      	ldr	r0, [r4, #0]
 80042a8:	f000 faa3 	bl	80047f2 <memmove>
 80042ac:	68a3      	ldr	r3, [r4, #8]
 80042ae:	2000      	movs	r0, #0
 80042b0:	1b9b      	subs	r3, r3, r6
 80042b2:	60a3      	str	r3, [r4, #8]
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	199e      	adds	r6, r3, r6
 80042b8:	6026      	str	r6, [r4, #0]
 80042ba:	e7da      	b.n	8004272 <__ssputs_r+0x5e>
 80042bc:	002a      	movs	r2, r5
 80042be:	0038      	movs	r0, r7
 80042c0:	f000 fb8c 	bl	80049dc <_realloc_r>
 80042c4:	1e06      	subs	r6, r0, #0
 80042c6:	d1e0      	bne.n	800428a <__ssputs_r+0x76>
 80042c8:	0038      	movs	r0, r7
 80042ca:	6921      	ldr	r1, [r4, #16]
 80042cc:	f000 faa4 	bl	8004818 <_free_r>
 80042d0:	e7c7      	b.n	8004262 <__ssputs_r+0x4e>
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	fffffb7f 	.word	0xfffffb7f

080042d8 <_svfiprintf_r>:
 80042d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042da:	b0a1      	sub	sp, #132	; 0x84
 80042dc:	9003      	str	r0, [sp, #12]
 80042de:	001d      	movs	r5, r3
 80042e0:	898b      	ldrh	r3, [r1, #12]
 80042e2:	000f      	movs	r7, r1
 80042e4:	0016      	movs	r6, r2
 80042e6:	061b      	lsls	r3, r3, #24
 80042e8:	d511      	bpl.n	800430e <_svfiprintf_r+0x36>
 80042ea:	690b      	ldr	r3, [r1, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10e      	bne.n	800430e <_svfiprintf_r+0x36>
 80042f0:	2140      	movs	r1, #64	; 0x40
 80042f2:	f000 fafd 	bl	80048f0 <_malloc_r>
 80042f6:	6038      	str	r0, [r7, #0]
 80042f8:	6138      	str	r0, [r7, #16]
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d105      	bne.n	800430a <_svfiprintf_r+0x32>
 80042fe:	230c      	movs	r3, #12
 8004300:	9a03      	ldr	r2, [sp, #12]
 8004302:	3801      	subs	r0, #1
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	b021      	add	sp, #132	; 0x84
 8004308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800430a:	2340      	movs	r3, #64	; 0x40
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	2300      	movs	r3, #0
 8004310:	ac08      	add	r4, sp, #32
 8004312:	6163      	str	r3, [r4, #20]
 8004314:	3320      	adds	r3, #32
 8004316:	7663      	strb	r3, [r4, #25]
 8004318:	3310      	adds	r3, #16
 800431a:	76a3      	strb	r3, [r4, #26]
 800431c:	9507      	str	r5, [sp, #28]
 800431e:	0035      	movs	r5, r6
 8004320:	782b      	ldrb	r3, [r5, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <_svfiprintf_r+0x52>
 8004326:	2b25      	cmp	r3, #37	; 0x25
 8004328:	d147      	bne.n	80043ba <_svfiprintf_r+0xe2>
 800432a:	1bab      	subs	r3, r5, r6
 800432c:	9305      	str	r3, [sp, #20]
 800432e:	42b5      	cmp	r5, r6
 8004330:	d00c      	beq.n	800434c <_svfiprintf_r+0x74>
 8004332:	0032      	movs	r2, r6
 8004334:	0039      	movs	r1, r7
 8004336:	9803      	ldr	r0, [sp, #12]
 8004338:	f7ff ff6c 	bl	8004214 <__ssputs_r>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	d100      	bne.n	8004342 <_svfiprintf_r+0x6a>
 8004340:	e0ae      	b.n	80044a0 <_svfiprintf_r+0x1c8>
 8004342:	6962      	ldr	r2, [r4, #20]
 8004344:	9b05      	ldr	r3, [sp, #20]
 8004346:	4694      	mov	ip, r2
 8004348:	4463      	add	r3, ip
 800434a:	6163      	str	r3, [r4, #20]
 800434c:	782b      	ldrb	r3, [r5, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d100      	bne.n	8004354 <_svfiprintf_r+0x7c>
 8004352:	e0a5      	b.n	80044a0 <_svfiprintf_r+0x1c8>
 8004354:	2201      	movs	r2, #1
 8004356:	2300      	movs	r3, #0
 8004358:	4252      	negs	r2, r2
 800435a:	6062      	str	r2, [r4, #4]
 800435c:	a904      	add	r1, sp, #16
 800435e:	3254      	adds	r2, #84	; 0x54
 8004360:	1852      	adds	r2, r2, r1
 8004362:	1c6e      	adds	r6, r5, #1
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	60e3      	str	r3, [r4, #12]
 8004368:	60a3      	str	r3, [r4, #8]
 800436a:	7013      	strb	r3, [r2, #0]
 800436c:	65a3      	str	r3, [r4, #88]	; 0x58
 800436e:	2205      	movs	r2, #5
 8004370:	7831      	ldrb	r1, [r6, #0]
 8004372:	4854      	ldr	r0, [pc, #336]	; (80044c4 <_svfiprintf_r+0x1ec>)
 8004374:	f000 fa32 	bl	80047dc <memchr>
 8004378:	1c75      	adds	r5, r6, #1
 800437a:	2800      	cmp	r0, #0
 800437c:	d11f      	bne.n	80043be <_svfiprintf_r+0xe6>
 800437e:	6822      	ldr	r2, [r4, #0]
 8004380:	06d3      	lsls	r3, r2, #27
 8004382:	d504      	bpl.n	800438e <_svfiprintf_r+0xb6>
 8004384:	2353      	movs	r3, #83	; 0x53
 8004386:	a904      	add	r1, sp, #16
 8004388:	185b      	adds	r3, r3, r1
 800438a:	2120      	movs	r1, #32
 800438c:	7019      	strb	r1, [r3, #0]
 800438e:	0713      	lsls	r3, r2, #28
 8004390:	d504      	bpl.n	800439c <_svfiprintf_r+0xc4>
 8004392:	2353      	movs	r3, #83	; 0x53
 8004394:	a904      	add	r1, sp, #16
 8004396:	185b      	adds	r3, r3, r1
 8004398:	212b      	movs	r1, #43	; 0x2b
 800439a:	7019      	strb	r1, [r3, #0]
 800439c:	7833      	ldrb	r3, [r6, #0]
 800439e:	2b2a      	cmp	r3, #42	; 0x2a
 80043a0:	d016      	beq.n	80043d0 <_svfiprintf_r+0xf8>
 80043a2:	0035      	movs	r5, r6
 80043a4:	2100      	movs	r1, #0
 80043a6:	200a      	movs	r0, #10
 80043a8:	68e3      	ldr	r3, [r4, #12]
 80043aa:	782a      	ldrb	r2, [r5, #0]
 80043ac:	1c6e      	adds	r6, r5, #1
 80043ae:	3a30      	subs	r2, #48	; 0x30
 80043b0:	2a09      	cmp	r2, #9
 80043b2:	d94e      	bls.n	8004452 <_svfiprintf_r+0x17a>
 80043b4:	2900      	cmp	r1, #0
 80043b6:	d111      	bne.n	80043dc <_svfiprintf_r+0x104>
 80043b8:	e017      	b.n	80043ea <_svfiprintf_r+0x112>
 80043ba:	3501      	adds	r5, #1
 80043bc:	e7b0      	b.n	8004320 <_svfiprintf_r+0x48>
 80043be:	4b41      	ldr	r3, [pc, #260]	; (80044c4 <_svfiprintf_r+0x1ec>)
 80043c0:	6822      	ldr	r2, [r4, #0]
 80043c2:	1ac0      	subs	r0, r0, r3
 80043c4:	2301      	movs	r3, #1
 80043c6:	4083      	lsls	r3, r0
 80043c8:	4313      	orrs	r3, r2
 80043ca:	002e      	movs	r6, r5
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	e7ce      	b.n	800436e <_svfiprintf_r+0x96>
 80043d0:	9b07      	ldr	r3, [sp, #28]
 80043d2:	1d19      	adds	r1, r3, #4
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	9107      	str	r1, [sp, #28]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	db01      	blt.n	80043e0 <_svfiprintf_r+0x108>
 80043dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80043de:	e004      	b.n	80043ea <_svfiprintf_r+0x112>
 80043e0:	425b      	negs	r3, r3
 80043e2:	60e3      	str	r3, [r4, #12]
 80043e4:	2302      	movs	r3, #2
 80043e6:	4313      	orrs	r3, r2
 80043e8:	6023      	str	r3, [r4, #0]
 80043ea:	782b      	ldrb	r3, [r5, #0]
 80043ec:	2b2e      	cmp	r3, #46	; 0x2e
 80043ee:	d10a      	bne.n	8004406 <_svfiprintf_r+0x12e>
 80043f0:	786b      	ldrb	r3, [r5, #1]
 80043f2:	2b2a      	cmp	r3, #42	; 0x2a
 80043f4:	d135      	bne.n	8004462 <_svfiprintf_r+0x18a>
 80043f6:	9b07      	ldr	r3, [sp, #28]
 80043f8:	3502      	adds	r5, #2
 80043fa:	1d1a      	adds	r2, r3, #4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	9207      	str	r2, [sp, #28]
 8004400:	2b00      	cmp	r3, #0
 8004402:	db2b      	blt.n	800445c <_svfiprintf_r+0x184>
 8004404:	9309      	str	r3, [sp, #36]	; 0x24
 8004406:	4e30      	ldr	r6, [pc, #192]	; (80044c8 <_svfiprintf_r+0x1f0>)
 8004408:	2203      	movs	r2, #3
 800440a:	0030      	movs	r0, r6
 800440c:	7829      	ldrb	r1, [r5, #0]
 800440e:	f000 f9e5 	bl	80047dc <memchr>
 8004412:	2800      	cmp	r0, #0
 8004414:	d006      	beq.n	8004424 <_svfiprintf_r+0x14c>
 8004416:	2340      	movs	r3, #64	; 0x40
 8004418:	1b80      	subs	r0, r0, r6
 800441a:	4083      	lsls	r3, r0
 800441c:	6822      	ldr	r2, [r4, #0]
 800441e:	3501      	adds	r5, #1
 8004420:	4313      	orrs	r3, r2
 8004422:	6023      	str	r3, [r4, #0]
 8004424:	7829      	ldrb	r1, [r5, #0]
 8004426:	2206      	movs	r2, #6
 8004428:	4828      	ldr	r0, [pc, #160]	; (80044cc <_svfiprintf_r+0x1f4>)
 800442a:	1c6e      	adds	r6, r5, #1
 800442c:	7621      	strb	r1, [r4, #24]
 800442e:	f000 f9d5 	bl	80047dc <memchr>
 8004432:	2800      	cmp	r0, #0
 8004434:	d03c      	beq.n	80044b0 <_svfiprintf_r+0x1d8>
 8004436:	4b26      	ldr	r3, [pc, #152]	; (80044d0 <_svfiprintf_r+0x1f8>)
 8004438:	2b00      	cmp	r3, #0
 800443a:	d125      	bne.n	8004488 <_svfiprintf_r+0x1b0>
 800443c:	2207      	movs	r2, #7
 800443e:	9b07      	ldr	r3, [sp, #28]
 8004440:	3307      	adds	r3, #7
 8004442:	4393      	bics	r3, r2
 8004444:	3308      	adds	r3, #8
 8004446:	9307      	str	r3, [sp, #28]
 8004448:	6963      	ldr	r3, [r4, #20]
 800444a:	9a04      	ldr	r2, [sp, #16]
 800444c:	189b      	adds	r3, r3, r2
 800444e:	6163      	str	r3, [r4, #20]
 8004450:	e765      	b.n	800431e <_svfiprintf_r+0x46>
 8004452:	4343      	muls	r3, r0
 8004454:	0035      	movs	r5, r6
 8004456:	2101      	movs	r1, #1
 8004458:	189b      	adds	r3, r3, r2
 800445a:	e7a6      	b.n	80043aa <_svfiprintf_r+0xd2>
 800445c:	2301      	movs	r3, #1
 800445e:	425b      	negs	r3, r3
 8004460:	e7d0      	b.n	8004404 <_svfiprintf_r+0x12c>
 8004462:	2300      	movs	r3, #0
 8004464:	200a      	movs	r0, #10
 8004466:	001a      	movs	r2, r3
 8004468:	3501      	adds	r5, #1
 800446a:	6063      	str	r3, [r4, #4]
 800446c:	7829      	ldrb	r1, [r5, #0]
 800446e:	1c6e      	adds	r6, r5, #1
 8004470:	3930      	subs	r1, #48	; 0x30
 8004472:	2909      	cmp	r1, #9
 8004474:	d903      	bls.n	800447e <_svfiprintf_r+0x1a6>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0c5      	beq.n	8004406 <_svfiprintf_r+0x12e>
 800447a:	9209      	str	r2, [sp, #36]	; 0x24
 800447c:	e7c3      	b.n	8004406 <_svfiprintf_r+0x12e>
 800447e:	4342      	muls	r2, r0
 8004480:	0035      	movs	r5, r6
 8004482:	2301      	movs	r3, #1
 8004484:	1852      	adds	r2, r2, r1
 8004486:	e7f1      	b.n	800446c <_svfiprintf_r+0x194>
 8004488:	ab07      	add	r3, sp, #28
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	003a      	movs	r2, r7
 800448e:	0021      	movs	r1, r4
 8004490:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <_svfiprintf_r+0x1fc>)
 8004492:	9803      	ldr	r0, [sp, #12]
 8004494:	e000      	b.n	8004498 <_svfiprintf_r+0x1c0>
 8004496:	bf00      	nop
 8004498:	9004      	str	r0, [sp, #16]
 800449a:	9b04      	ldr	r3, [sp, #16]
 800449c:	3301      	adds	r3, #1
 800449e:	d1d3      	bne.n	8004448 <_svfiprintf_r+0x170>
 80044a0:	89bb      	ldrh	r3, [r7, #12]
 80044a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80044a4:	065b      	lsls	r3, r3, #25
 80044a6:	d400      	bmi.n	80044aa <_svfiprintf_r+0x1d2>
 80044a8:	e72d      	b.n	8004306 <_svfiprintf_r+0x2e>
 80044aa:	2001      	movs	r0, #1
 80044ac:	4240      	negs	r0, r0
 80044ae:	e72a      	b.n	8004306 <_svfiprintf_r+0x2e>
 80044b0:	ab07      	add	r3, sp, #28
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	003a      	movs	r2, r7
 80044b6:	0021      	movs	r1, r4
 80044b8:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <_svfiprintf_r+0x1fc>)
 80044ba:	9803      	ldr	r0, [sp, #12]
 80044bc:	f000 f87c 	bl	80045b8 <_printf_i>
 80044c0:	e7ea      	b.n	8004498 <_svfiprintf_r+0x1c0>
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	08004b7c 	.word	0x08004b7c
 80044c8:	08004b82 	.word	0x08004b82
 80044cc:	08004b86 	.word	0x08004b86
 80044d0:	00000000 	.word	0x00000000
 80044d4:	08004215 	.word	0x08004215

080044d8 <_printf_common>:
 80044d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044da:	0015      	movs	r5, r2
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	688a      	ldr	r2, [r1, #8]
 80044e0:	690b      	ldr	r3, [r1, #16]
 80044e2:	000c      	movs	r4, r1
 80044e4:	9000      	str	r0, [sp, #0]
 80044e6:	4293      	cmp	r3, r2
 80044e8:	da00      	bge.n	80044ec <_printf_common+0x14>
 80044ea:	0013      	movs	r3, r2
 80044ec:	0022      	movs	r2, r4
 80044ee:	602b      	str	r3, [r5, #0]
 80044f0:	3243      	adds	r2, #67	; 0x43
 80044f2:	7812      	ldrb	r2, [r2, #0]
 80044f4:	2a00      	cmp	r2, #0
 80044f6:	d001      	beq.n	80044fc <_printf_common+0x24>
 80044f8:	3301      	adds	r3, #1
 80044fa:	602b      	str	r3, [r5, #0]
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	069b      	lsls	r3, r3, #26
 8004500:	d502      	bpl.n	8004508 <_printf_common+0x30>
 8004502:	682b      	ldr	r3, [r5, #0]
 8004504:	3302      	adds	r3, #2
 8004506:	602b      	str	r3, [r5, #0]
 8004508:	6822      	ldr	r2, [r4, #0]
 800450a:	2306      	movs	r3, #6
 800450c:	0017      	movs	r7, r2
 800450e:	401f      	ands	r7, r3
 8004510:	421a      	tst	r2, r3
 8004512:	d027      	beq.n	8004564 <_printf_common+0x8c>
 8004514:	0023      	movs	r3, r4
 8004516:	3343      	adds	r3, #67	; 0x43
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	1e5a      	subs	r2, r3, #1
 800451c:	4193      	sbcs	r3, r2
 800451e:	6822      	ldr	r2, [r4, #0]
 8004520:	0692      	lsls	r2, r2, #26
 8004522:	d430      	bmi.n	8004586 <_printf_common+0xae>
 8004524:	0022      	movs	r2, r4
 8004526:	9901      	ldr	r1, [sp, #4]
 8004528:	9800      	ldr	r0, [sp, #0]
 800452a:	9e08      	ldr	r6, [sp, #32]
 800452c:	3243      	adds	r2, #67	; 0x43
 800452e:	47b0      	blx	r6
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d025      	beq.n	8004580 <_printf_common+0xa8>
 8004534:	2306      	movs	r3, #6
 8004536:	6820      	ldr	r0, [r4, #0]
 8004538:	682a      	ldr	r2, [r5, #0]
 800453a:	68e1      	ldr	r1, [r4, #12]
 800453c:	2500      	movs	r5, #0
 800453e:	4003      	ands	r3, r0
 8004540:	2b04      	cmp	r3, #4
 8004542:	d103      	bne.n	800454c <_printf_common+0x74>
 8004544:	1a8d      	subs	r5, r1, r2
 8004546:	43eb      	mvns	r3, r5
 8004548:	17db      	asrs	r3, r3, #31
 800454a:	401d      	ands	r5, r3
 800454c:	68a3      	ldr	r3, [r4, #8]
 800454e:	6922      	ldr	r2, [r4, #16]
 8004550:	4293      	cmp	r3, r2
 8004552:	dd01      	ble.n	8004558 <_printf_common+0x80>
 8004554:	1a9b      	subs	r3, r3, r2
 8004556:	18ed      	adds	r5, r5, r3
 8004558:	2700      	movs	r7, #0
 800455a:	42bd      	cmp	r5, r7
 800455c:	d120      	bne.n	80045a0 <_printf_common+0xc8>
 800455e:	2000      	movs	r0, #0
 8004560:	e010      	b.n	8004584 <_printf_common+0xac>
 8004562:	3701      	adds	r7, #1
 8004564:	68e3      	ldr	r3, [r4, #12]
 8004566:	682a      	ldr	r2, [r5, #0]
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	42bb      	cmp	r3, r7
 800456c:	ddd2      	ble.n	8004514 <_printf_common+0x3c>
 800456e:	0022      	movs	r2, r4
 8004570:	2301      	movs	r3, #1
 8004572:	9901      	ldr	r1, [sp, #4]
 8004574:	9800      	ldr	r0, [sp, #0]
 8004576:	9e08      	ldr	r6, [sp, #32]
 8004578:	3219      	adds	r2, #25
 800457a:	47b0      	blx	r6
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d1f0      	bne.n	8004562 <_printf_common+0x8a>
 8004580:	2001      	movs	r0, #1
 8004582:	4240      	negs	r0, r0
 8004584:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004586:	2030      	movs	r0, #48	; 0x30
 8004588:	18e1      	adds	r1, r4, r3
 800458a:	3143      	adds	r1, #67	; 0x43
 800458c:	7008      	strb	r0, [r1, #0]
 800458e:	0021      	movs	r1, r4
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	3145      	adds	r1, #69	; 0x45
 8004594:	7809      	ldrb	r1, [r1, #0]
 8004596:	18a2      	adds	r2, r4, r2
 8004598:	3243      	adds	r2, #67	; 0x43
 800459a:	3302      	adds	r3, #2
 800459c:	7011      	strb	r1, [r2, #0]
 800459e:	e7c1      	b.n	8004524 <_printf_common+0x4c>
 80045a0:	0022      	movs	r2, r4
 80045a2:	2301      	movs	r3, #1
 80045a4:	9901      	ldr	r1, [sp, #4]
 80045a6:	9800      	ldr	r0, [sp, #0]
 80045a8:	9e08      	ldr	r6, [sp, #32]
 80045aa:	321a      	adds	r2, #26
 80045ac:	47b0      	blx	r6
 80045ae:	1c43      	adds	r3, r0, #1
 80045b0:	d0e6      	beq.n	8004580 <_printf_common+0xa8>
 80045b2:	3701      	adds	r7, #1
 80045b4:	e7d1      	b.n	800455a <_printf_common+0x82>
	...

080045b8 <_printf_i>:
 80045b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ba:	b08b      	sub	sp, #44	; 0x2c
 80045bc:	9206      	str	r2, [sp, #24]
 80045be:	000a      	movs	r2, r1
 80045c0:	3243      	adds	r2, #67	; 0x43
 80045c2:	9307      	str	r3, [sp, #28]
 80045c4:	9005      	str	r0, [sp, #20]
 80045c6:	9204      	str	r2, [sp, #16]
 80045c8:	7e0a      	ldrb	r2, [r1, #24]
 80045ca:	000c      	movs	r4, r1
 80045cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045ce:	2a78      	cmp	r2, #120	; 0x78
 80045d0:	d807      	bhi.n	80045e2 <_printf_i+0x2a>
 80045d2:	2a62      	cmp	r2, #98	; 0x62
 80045d4:	d809      	bhi.n	80045ea <_printf_i+0x32>
 80045d6:	2a00      	cmp	r2, #0
 80045d8:	d100      	bne.n	80045dc <_printf_i+0x24>
 80045da:	e0c1      	b.n	8004760 <_printf_i+0x1a8>
 80045dc:	2a58      	cmp	r2, #88	; 0x58
 80045de:	d100      	bne.n	80045e2 <_printf_i+0x2a>
 80045e0:	e08c      	b.n	80046fc <_printf_i+0x144>
 80045e2:	0026      	movs	r6, r4
 80045e4:	3642      	adds	r6, #66	; 0x42
 80045e6:	7032      	strb	r2, [r6, #0]
 80045e8:	e022      	b.n	8004630 <_printf_i+0x78>
 80045ea:	0010      	movs	r0, r2
 80045ec:	3863      	subs	r0, #99	; 0x63
 80045ee:	2815      	cmp	r0, #21
 80045f0:	d8f7      	bhi.n	80045e2 <_printf_i+0x2a>
 80045f2:	f7fb fd91 	bl	8000118 <__gnu_thumb1_case_shi>
 80045f6:	0016      	.short	0x0016
 80045f8:	fff6001f 	.word	0xfff6001f
 80045fc:	fff6fff6 	.word	0xfff6fff6
 8004600:	001ffff6 	.word	0x001ffff6
 8004604:	fff6fff6 	.word	0xfff6fff6
 8004608:	fff6fff6 	.word	0xfff6fff6
 800460c:	003600a8 	.word	0x003600a8
 8004610:	fff6009a 	.word	0xfff6009a
 8004614:	00b9fff6 	.word	0x00b9fff6
 8004618:	0036fff6 	.word	0x0036fff6
 800461c:	fff6fff6 	.word	0xfff6fff6
 8004620:	009e      	.short	0x009e
 8004622:	0026      	movs	r6, r4
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	3642      	adds	r6, #66	; 0x42
 8004628:	1d11      	adds	r1, r2, #4
 800462a:	6019      	str	r1, [r3, #0]
 800462c:	6813      	ldr	r3, [r2, #0]
 800462e:	7033      	strb	r3, [r6, #0]
 8004630:	2301      	movs	r3, #1
 8004632:	e0a7      	b.n	8004784 <_printf_i+0x1cc>
 8004634:	6808      	ldr	r0, [r1, #0]
 8004636:	6819      	ldr	r1, [r3, #0]
 8004638:	1d0a      	adds	r2, r1, #4
 800463a:	0605      	lsls	r5, r0, #24
 800463c:	d50b      	bpl.n	8004656 <_printf_i+0x9e>
 800463e:	680d      	ldr	r5, [r1, #0]
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	2d00      	cmp	r5, #0
 8004644:	da03      	bge.n	800464e <_printf_i+0x96>
 8004646:	232d      	movs	r3, #45	; 0x2d
 8004648:	9a04      	ldr	r2, [sp, #16]
 800464a:	426d      	negs	r5, r5
 800464c:	7013      	strb	r3, [r2, #0]
 800464e:	4b61      	ldr	r3, [pc, #388]	; (80047d4 <_printf_i+0x21c>)
 8004650:	270a      	movs	r7, #10
 8004652:	9303      	str	r3, [sp, #12]
 8004654:	e01b      	b.n	800468e <_printf_i+0xd6>
 8004656:	680d      	ldr	r5, [r1, #0]
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	0641      	lsls	r1, r0, #25
 800465c:	d5f1      	bpl.n	8004642 <_printf_i+0x8a>
 800465e:	b22d      	sxth	r5, r5
 8004660:	e7ef      	b.n	8004642 <_printf_i+0x8a>
 8004662:	680d      	ldr	r5, [r1, #0]
 8004664:	6819      	ldr	r1, [r3, #0]
 8004666:	1d08      	adds	r0, r1, #4
 8004668:	6018      	str	r0, [r3, #0]
 800466a:	062e      	lsls	r6, r5, #24
 800466c:	d501      	bpl.n	8004672 <_printf_i+0xba>
 800466e:	680d      	ldr	r5, [r1, #0]
 8004670:	e003      	b.n	800467a <_printf_i+0xc2>
 8004672:	066d      	lsls	r5, r5, #25
 8004674:	d5fb      	bpl.n	800466e <_printf_i+0xb6>
 8004676:	680d      	ldr	r5, [r1, #0]
 8004678:	b2ad      	uxth	r5, r5
 800467a:	4b56      	ldr	r3, [pc, #344]	; (80047d4 <_printf_i+0x21c>)
 800467c:	2708      	movs	r7, #8
 800467e:	9303      	str	r3, [sp, #12]
 8004680:	2a6f      	cmp	r2, #111	; 0x6f
 8004682:	d000      	beq.n	8004686 <_printf_i+0xce>
 8004684:	3702      	adds	r7, #2
 8004686:	0023      	movs	r3, r4
 8004688:	2200      	movs	r2, #0
 800468a:	3343      	adds	r3, #67	; 0x43
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	6863      	ldr	r3, [r4, #4]
 8004690:	60a3      	str	r3, [r4, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	db03      	blt.n	800469e <_printf_i+0xe6>
 8004696:	2204      	movs	r2, #4
 8004698:	6821      	ldr	r1, [r4, #0]
 800469a:	4391      	bics	r1, r2
 800469c:	6021      	str	r1, [r4, #0]
 800469e:	2d00      	cmp	r5, #0
 80046a0:	d102      	bne.n	80046a8 <_printf_i+0xf0>
 80046a2:	9e04      	ldr	r6, [sp, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00c      	beq.n	80046c2 <_printf_i+0x10a>
 80046a8:	9e04      	ldr	r6, [sp, #16]
 80046aa:	0028      	movs	r0, r5
 80046ac:	0039      	movs	r1, r7
 80046ae:	f7fb fdc3 	bl	8000238 <__aeabi_uidivmod>
 80046b2:	9b03      	ldr	r3, [sp, #12]
 80046b4:	3e01      	subs	r6, #1
 80046b6:	5c5b      	ldrb	r3, [r3, r1]
 80046b8:	7033      	strb	r3, [r6, #0]
 80046ba:	002b      	movs	r3, r5
 80046bc:	0005      	movs	r5, r0
 80046be:	429f      	cmp	r7, r3
 80046c0:	d9f3      	bls.n	80046aa <_printf_i+0xf2>
 80046c2:	2f08      	cmp	r7, #8
 80046c4:	d109      	bne.n	80046da <_printf_i+0x122>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	07db      	lsls	r3, r3, #31
 80046ca:	d506      	bpl.n	80046da <_printf_i+0x122>
 80046cc:	6863      	ldr	r3, [r4, #4]
 80046ce:	6922      	ldr	r2, [r4, #16]
 80046d0:	4293      	cmp	r3, r2
 80046d2:	dc02      	bgt.n	80046da <_printf_i+0x122>
 80046d4:	2330      	movs	r3, #48	; 0x30
 80046d6:	3e01      	subs	r6, #1
 80046d8:	7033      	strb	r3, [r6, #0]
 80046da:	9b04      	ldr	r3, [sp, #16]
 80046dc:	1b9b      	subs	r3, r3, r6
 80046de:	6123      	str	r3, [r4, #16]
 80046e0:	9b07      	ldr	r3, [sp, #28]
 80046e2:	0021      	movs	r1, r4
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	9805      	ldr	r0, [sp, #20]
 80046e8:	9b06      	ldr	r3, [sp, #24]
 80046ea:	aa09      	add	r2, sp, #36	; 0x24
 80046ec:	f7ff fef4 	bl	80044d8 <_printf_common>
 80046f0:	1c43      	adds	r3, r0, #1
 80046f2:	d14c      	bne.n	800478e <_printf_i+0x1d6>
 80046f4:	2001      	movs	r0, #1
 80046f6:	4240      	negs	r0, r0
 80046f8:	b00b      	add	sp, #44	; 0x2c
 80046fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046fc:	3145      	adds	r1, #69	; 0x45
 80046fe:	700a      	strb	r2, [r1, #0]
 8004700:	4a34      	ldr	r2, [pc, #208]	; (80047d4 <_printf_i+0x21c>)
 8004702:	9203      	str	r2, [sp, #12]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	6821      	ldr	r1, [r4, #0]
 8004708:	ca20      	ldmia	r2!, {r5}
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	0608      	lsls	r0, r1, #24
 800470e:	d516      	bpl.n	800473e <_printf_i+0x186>
 8004710:	07cb      	lsls	r3, r1, #31
 8004712:	d502      	bpl.n	800471a <_printf_i+0x162>
 8004714:	2320      	movs	r3, #32
 8004716:	4319      	orrs	r1, r3
 8004718:	6021      	str	r1, [r4, #0]
 800471a:	2710      	movs	r7, #16
 800471c:	2d00      	cmp	r5, #0
 800471e:	d1b2      	bne.n	8004686 <_printf_i+0xce>
 8004720:	2320      	movs	r3, #32
 8004722:	6822      	ldr	r2, [r4, #0]
 8004724:	439a      	bics	r2, r3
 8004726:	6022      	str	r2, [r4, #0]
 8004728:	e7ad      	b.n	8004686 <_printf_i+0xce>
 800472a:	2220      	movs	r2, #32
 800472c:	6809      	ldr	r1, [r1, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	6022      	str	r2, [r4, #0]
 8004732:	0022      	movs	r2, r4
 8004734:	2178      	movs	r1, #120	; 0x78
 8004736:	3245      	adds	r2, #69	; 0x45
 8004738:	7011      	strb	r1, [r2, #0]
 800473a:	4a27      	ldr	r2, [pc, #156]	; (80047d8 <_printf_i+0x220>)
 800473c:	e7e1      	b.n	8004702 <_printf_i+0x14a>
 800473e:	0648      	lsls	r0, r1, #25
 8004740:	d5e6      	bpl.n	8004710 <_printf_i+0x158>
 8004742:	b2ad      	uxth	r5, r5
 8004744:	e7e4      	b.n	8004710 <_printf_i+0x158>
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	680d      	ldr	r5, [r1, #0]
 800474a:	1d10      	adds	r0, r2, #4
 800474c:	6949      	ldr	r1, [r1, #20]
 800474e:	6018      	str	r0, [r3, #0]
 8004750:	6813      	ldr	r3, [r2, #0]
 8004752:	062e      	lsls	r6, r5, #24
 8004754:	d501      	bpl.n	800475a <_printf_i+0x1a2>
 8004756:	6019      	str	r1, [r3, #0]
 8004758:	e002      	b.n	8004760 <_printf_i+0x1a8>
 800475a:	066d      	lsls	r5, r5, #25
 800475c:	d5fb      	bpl.n	8004756 <_printf_i+0x19e>
 800475e:	8019      	strh	r1, [r3, #0]
 8004760:	2300      	movs	r3, #0
 8004762:	9e04      	ldr	r6, [sp, #16]
 8004764:	6123      	str	r3, [r4, #16]
 8004766:	e7bb      	b.n	80046e0 <_printf_i+0x128>
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	1d11      	adds	r1, r2, #4
 800476c:	6019      	str	r1, [r3, #0]
 800476e:	6816      	ldr	r6, [r2, #0]
 8004770:	2100      	movs	r1, #0
 8004772:	0030      	movs	r0, r6
 8004774:	6862      	ldr	r2, [r4, #4]
 8004776:	f000 f831 	bl	80047dc <memchr>
 800477a:	2800      	cmp	r0, #0
 800477c:	d001      	beq.n	8004782 <_printf_i+0x1ca>
 800477e:	1b80      	subs	r0, r0, r6
 8004780:	6060      	str	r0, [r4, #4]
 8004782:	6863      	ldr	r3, [r4, #4]
 8004784:	6123      	str	r3, [r4, #16]
 8004786:	2300      	movs	r3, #0
 8004788:	9a04      	ldr	r2, [sp, #16]
 800478a:	7013      	strb	r3, [r2, #0]
 800478c:	e7a8      	b.n	80046e0 <_printf_i+0x128>
 800478e:	6923      	ldr	r3, [r4, #16]
 8004790:	0032      	movs	r2, r6
 8004792:	9906      	ldr	r1, [sp, #24]
 8004794:	9805      	ldr	r0, [sp, #20]
 8004796:	9d07      	ldr	r5, [sp, #28]
 8004798:	47a8      	blx	r5
 800479a:	1c43      	adds	r3, r0, #1
 800479c:	d0aa      	beq.n	80046f4 <_printf_i+0x13c>
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	079b      	lsls	r3, r3, #30
 80047a2:	d415      	bmi.n	80047d0 <_printf_i+0x218>
 80047a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047a6:	68e0      	ldr	r0, [r4, #12]
 80047a8:	4298      	cmp	r0, r3
 80047aa:	daa5      	bge.n	80046f8 <_printf_i+0x140>
 80047ac:	0018      	movs	r0, r3
 80047ae:	e7a3      	b.n	80046f8 <_printf_i+0x140>
 80047b0:	0022      	movs	r2, r4
 80047b2:	2301      	movs	r3, #1
 80047b4:	9906      	ldr	r1, [sp, #24]
 80047b6:	9805      	ldr	r0, [sp, #20]
 80047b8:	9e07      	ldr	r6, [sp, #28]
 80047ba:	3219      	adds	r2, #25
 80047bc:	47b0      	blx	r6
 80047be:	1c43      	adds	r3, r0, #1
 80047c0:	d098      	beq.n	80046f4 <_printf_i+0x13c>
 80047c2:	3501      	adds	r5, #1
 80047c4:	68e3      	ldr	r3, [r4, #12]
 80047c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	42ab      	cmp	r3, r5
 80047cc:	dcf0      	bgt.n	80047b0 <_printf_i+0x1f8>
 80047ce:	e7e9      	b.n	80047a4 <_printf_i+0x1ec>
 80047d0:	2500      	movs	r5, #0
 80047d2:	e7f7      	b.n	80047c4 <_printf_i+0x20c>
 80047d4:	08004b8d 	.word	0x08004b8d
 80047d8:	08004b9e 	.word	0x08004b9e

080047dc <memchr>:
 80047dc:	b2c9      	uxtb	r1, r1
 80047de:	1882      	adds	r2, r0, r2
 80047e0:	4290      	cmp	r0, r2
 80047e2:	d101      	bne.n	80047e8 <memchr+0xc>
 80047e4:	2000      	movs	r0, #0
 80047e6:	4770      	bx	lr
 80047e8:	7803      	ldrb	r3, [r0, #0]
 80047ea:	428b      	cmp	r3, r1
 80047ec:	d0fb      	beq.n	80047e6 <memchr+0xa>
 80047ee:	3001      	adds	r0, #1
 80047f0:	e7f6      	b.n	80047e0 <memchr+0x4>

080047f2 <memmove>:
 80047f2:	b510      	push	{r4, lr}
 80047f4:	4288      	cmp	r0, r1
 80047f6:	d902      	bls.n	80047fe <memmove+0xc>
 80047f8:	188b      	adds	r3, r1, r2
 80047fa:	4298      	cmp	r0, r3
 80047fc:	d303      	bcc.n	8004806 <memmove+0x14>
 80047fe:	2300      	movs	r3, #0
 8004800:	e007      	b.n	8004812 <memmove+0x20>
 8004802:	5c8b      	ldrb	r3, [r1, r2]
 8004804:	5483      	strb	r3, [r0, r2]
 8004806:	3a01      	subs	r2, #1
 8004808:	d2fb      	bcs.n	8004802 <memmove+0x10>
 800480a:	bd10      	pop	{r4, pc}
 800480c:	5ccc      	ldrb	r4, [r1, r3]
 800480e:	54c4      	strb	r4, [r0, r3]
 8004810:	3301      	adds	r3, #1
 8004812:	429a      	cmp	r2, r3
 8004814:	d1fa      	bne.n	800480c <memmove+0x1a>
 8004816:	e7f8      	b.n	800480a <memmove+0x18>

08004818 <_free_r>:
 8004818:	b570      	push	{r4, r5, r6, lr}
 800481a:	0005      	movs	r5, r0
 800481c:	2900      	cmp	r1, #0
 800481e:	d010      	beq.n	8004842 <_free_r+0x2a>
 8004820:	1f0c      	subs	r4, r1, #4
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	da00      	bge.n	800482a <_free_r+0x12>
 8004828:	18e4      	adds	r4, r4, r3
 800482a:	0028      	movs	r0, r5
 800482c:	f000 f918 	bl	8004a60 <__malloc_lock>
 8004830:	4a1d      	ldr	r2, [pc, #116]	; (80048a8 <_free_r+0x90>)
 8004832:	6813      	ldr	r3, [r2, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d105      	bne.n	8004844 <_free_r+0x2c>
 8004838:	6063      	str	r3, [r4, #4]
 800483a:	6014      	str	r4, [r2, #0]
 800483c:	0028      	movs	r0, r5
 800483e:	f000 f917 	bl	8004a70 <__malloc_unlock>
 8004842:	bd70      	pop	{r4, r5, r6, pc}
 8004844:	42a3      	cmp	r3, r4
 8004846:	d908      	bls.n	800485a <_free_r+0x42>
 8004848:	6821      	ldr	r1, [r4, #0]
 800484a:	1860      	adds	r0, r4, r1
 800484c:	4283      	cmp	r3, r0
 800484e:	d1f3      	bne.n	8004838 <_free_r+0x20>
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	1841      	adds	r1, r0, r1
 8004856:	6021      	str	r1, [r4, #0]
 8004858:	e7ee      	b.n	8004838 <_free_r+0x20>
 800485a:	001a      	movs	r2, r3
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <_free_r+0x4e>
 8004862:	42a3      	cmp	r3, r4
 8004864:	d9f9      	bls.n	800485a <_free_r+0x42>
 8004866:	6811      	ldr	r1, [r2, #0]
 8004868:	1850      	adds	r0, r2, r1
 800486a:	42a0      	cmp	r0, r4
 800486c:	d10b      	bne.n	8004886 <_free_r+0x6e>
 800486e:	6820      	ldr	r0, [r4, #0]
 8004870:	1809      	adds	r1, r1, r0
 8004872:	1850      	adds	r0, r2, r1
 8004874:	6011      	str	r1, [r2, #0]
 8004876:	4283      	cmp	r3, r0
 8004878:	d1e0      	bne.n	800483c <_free_r+0x24>
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	1841      	adds	r1, r0, r1
 8004880:	6011      	str	r1, [r2, #0]
 8004882:	6053      	str	r3, [r2, #4]
 8004884:	e7da      	b.n	800483c <_free_r+0x24>
 8004886:	42a0      	cmp	r0, r4
 8004888:	d902      	bls.n	8004890 <_free_r+0x78>
 800488a:	230c      	movs	r3, #12
 800488c:	602b      	str	r3, [r5, #0]
 800488e:	e7d5      	b.n	800483c <_free_r+0x24>
 8004890:	6821      	ldr	r1, [r4, #0]
 8004892:	1860      	adds	r0, r4, r1
 8004894:	4283      	cmp	r3, r0
 8004896:	d103      	bne.n	80048a0 <_free_r+0x88>
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	1841      	adds	r1, r0, r1
 800489e:	6021      	str	r1, [r4, #0]
 80048a0:	6063      	str	r3, [r4, #4]
 80048a2:	6054      	str	r4, [r2, #4]
 80048a4:	e7ca      	b.n	800483c <_free_r+0x24>
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	20001104 	.word	0x20001104

080048ac <sbrk_aligned>:
 80048ac:	b570      	push	{r4, r5, r6, lr}
 80048ae:	4e0f      	ldr	r6, [pc, #60]	; (80048ec <sbrk_aligned+0x40>)
 80048b0:	000d      	movs	r5, r1
 80048b2:	6831      	ldr	r1, [r6, #0]
 80048b4:	0004      	movs	r4, r0
 80048b6:	2900      	cmp	r1, #0
 80048b8:	d102      	bne.n	80048c0 <sbrk_aligned+0x14>
 80048ba:	f000 f8bf 	bl	8004a3c <_sbrk_r>
 80048be:	6030      	str	r0, [r6, #0]
 80048c0:	0029      	movs	r1, r5
 80048c2:	0020      	movs	r0, r4
 80048c4:	f000 f8ba 	bl	8004a3c <_sbrk_r>
 80048c8:	1c43      	adds	r3, r0, #1
 80048ca:	d00a      	beq.n	80048e2 <sbrk_aligned+0x36>
 80048cc:	2303      	movs	r3, #3
 80048ce:	1cc5      	adds	r5, r0, #3
 80048d0:	439d      	bics	r5, r3
 80048d2:	42a8      	cmp	r0, r5
 80048d4:	d007      	beq.n	80048e6 <sbrk_aligned+0x3a>
 80048d6:	1a29      	subs	r1, r5, r0
 80048d8:	0020      	movs	r0, r4
 80048da:	f000 f8af 	bl	8004a3c <_sbrk_r>
 80048de:	1c43      	adds	r3, r0, #1
 80048e0:	d101      	bne.n	80048e6 <sbrk_aligned+0x3a>
 80048e2:	2501      	movs	r5, #1
 80048e4:	426d      	negs	r5, r5
 80048e6:	0028      	movs	r0, r5
 80048e8:	bd70      	pop	{r4, r5, r6, pc}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	20001108 	.word	0x20001108

080048f0 <_malloc_r>:
 80048f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048f2:	2203      	movs	r2, #3
 80048f4:	1ccb      	adds	r3, r1, #3
 80048f6:	4393      	bics	r3, r2
 80048f8:	3308      	adds	r3, #8
 80048fa:	0006      	movs	r6, r0
 80048fc:	001f      	movs	r7, r3
 80048fe:	2b0c      	cmp	r3, #12
 8004900:	d232      	bcs.n	8004968 <_malloc_r+0x78>
 8004902:	270c      	movs	r7, #12
 8004904:	42b9      	cmp	r1, r7
 8004906:	d831      	bhi.n	800496c <_malloc_r+0x7c>
 8004908:	0030      	movs	r0, r6
 800490a:	f000 f8a9 	bl	8004a60 <__malloc_lock>
 800490e:	4d32      	ldr	r5, [pc, #200]	; (80049d8 <_malloc_r+0xe8>)
 8004910:	682b      	ldr	r3, [r5, #0]
 8004912:	001c      	movs	r4, r3
 8004914:	2c00      	cmp	r4, #0
 8004916:	d12e      	bne.n	8004976 <_malloc_r+0x86>
 8004918:	0039      	movs	r1, r7
 800491a:	0030      	movs	r0, r6
 800491c:	f7ff ffc6 	bl	80048ac <sbrk_aligned>
 8004920:	0004      	movs	r4, r0
 8004922:	1c43      	adds	r3, r0, #1
 8004924:	d11e      	bne.n	8004964 <_malloc_r+0x74>
 8004926:	682c      	ldr	r4, [r5, #0]
 8004928:	0025      	movs	r5, r4
 800492a:	2d00      	cmp	r5, #0
 800492c:	d14a      	bne.n	80049c4 <_malloc_r+0xd4>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	0029      	movs	r1, r5
 8004932:	18e3      	adds	r3, r4, r3
 8004934:	0030      	movs	r0, r6
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	f000 f880 	bl	8004a3c <_sbrk_r>
 800493c:	9b01      	ldr	r3, [sp, #4]
 800493e:	4283      	cmp	r3, r0
 8004940:	d143      	bne.n	80049ca <_malloc_r+0xda>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	3703      	adds	r7, #3
 8004946:	1aff      	subs	r7, r7, r3
 8004948:	2303      	movs	r3, #3
 800494a:	439f      	bics	r7, r3
 800494c:	3708      	adds	r7, #8
 800494e:	2f0c      	cmp	r7, #12
 8004950:	d200      	bcs.n	8004954 <_malloc_r+0x64>
 8004952:	270c      	movs	r7, #12
 8004954:	0039      	movs	r1, r7
 8004956:	0030      	movs	r0, r6
 8004958:	f7ff ffa8 	bl	80048ac <sbrk_aligned>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d034      	beq.n	80049ca <_malloc_r+0xda>
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	19df      	adds	r7, r3, r7
 8004964:	6027      	str	r7, [r4, #0]
 8004966:	e013      	b.n	8004990 <_malloc_r+0xa0>
 8004968:	2b00      	cmp	r3, #0
 800496a:	dacb      	bge.n	8004904 <_malloc_r+0x14>
 800496c:	230c      	movs	r3, #12
 800496e:	2500      	movs	r5, #0
 8004970:	6033      	str	r3, [r6, #0]
 8004972:	0028      	movs	r0, r5
 8004974:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004976:	6822      	ldr	r2, [r4, #0]
 8004978:	1bd1      	subs	r1, r2, r7
 800497a:	d420      	bmi.n	80049be <_malloc_r+0xce>
 800497c:	290b      	cmp	r1, #11
 800497e:	d917      	bls.n	80049b0 <_malloc_r+0xc0>
 8004980:	19e2      	adds	r2, r4, r7
 8004982:	6027      	str	r7, [r4, #0]
 8004984:	42a3      	cmp	r3, r4
 8004986:	d111      	bne.n	80049ac <_malloc_r+0xbc>
 8004988:	602a      	str	r2, [r5, #0]
 800498a:	6863      	ldr	r3, [r4, #4]
 800498c:	6011      	str	r1, [r2, #0]
 800498e:	6053      	str	r3, [r2, #4]
 8004990:	0030      	movs	r0, r6
 8004992:	0025      	movs	r5, r4
 8004994:	f000 f86c 	bl	8004a70 <__malloc_unlock>
 8004998:	2207      	movs	r2, #7
 800499a:	350b      	adds	r5, #11
 800499c:	1d23      	adds	r3, r4, #4
 800499e:	4395      	bics	r5, r2
 80049a0:	1aea      	subs	r2, r5, r3
 80049a2:	429d      	cmp	r5, r3
 80049a4:	d0e5      	beq.n	8004972 <_malloc_r+0x82>
 80049a6:	1b5b      	subs	r3, r3, r5
 80049a8:	50a3      	str	r3, [r4, r2]
 80049aa:	e7e2      	b.n	8004972 <_malloc_r+0x82>
 80049ac:	605a      	str	r2, [r3, #4]
 80049ae:	e7ec      	b.n	800498a <_malloc_r+0x9a>
 80049b0:	6862      	ldr	r2, [r4, #4]
 80049b2:	42a3      	cmp	r3, r4
 80049b4:	d101      	bne.n	80049ba <_malloc_r+0xca>
 80049b6:	602a      	str	r2, [r5, #0]
 80049b8:	e7ea      	b.n	8004990 <_malloc_r+0xa0>
 80049ba:	605a      	str	r2, [r3, #4]
 80049bc:	e7e8      	b.n	8004990 <_malloc_r+0xa0>
 80049be:	0023      	movs	r3, r4
 80049c0:	6864      	ldr	r4, [r4, #4]
 80049c2:	e7a7      	b.n	8004914 <_malloc_r+0x24>
 80049c4:	002c      	movs	r4, r5
 80049c6:	686d      	ldr	r5, [r5, #4]
 80049c8:	e7af      	b.n	800492a <_malloc_r+0x3a>
 80049ca:	230c      	movs	r3, #12
 80049cc:	0030      	movs	r0, r6
 80049ce:	6033      	str	r3, [r6, #0]
 80049d0:	f000 f84e 	bl	8004a70 <__malloc_unlock>
 80049d4:	e7cd      	b.n	8004972 <_malloc_r+0x82>
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	20001104 	.word	0x20001104

080049dc <_realloc_r>:
 80049dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049de:	0007      	movs	r7, r0
 80049e0:	000e      	movs	r6, r1
 80049e2:	0014      	movs	r4, r2
 80049e4:	2900      	cmp	r1, #0
 80049e6:	d105      	bne.n	80049f4 <_realloc_r+0x18>
 80049e8:	0011      	movs	r1, r2
 80049ea:	f7ff ff81 	bl	80048f0 <_malloc_r>
 80049ee:	0005      	movs	r5, r0
 80049f0:	0028      	movs	r0, r5
 80049f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049f4:	2a00      	cmp	r2, #0
 80049f6:	d103      	bne.n	8004a00 <_realloc_r+0x24>
 80049f8:	f7ff ff0e 	bl	8004818 <_free_r>
 80049fc:	0025      	movs	r5, r4
 80049fe:	e7f7      	b.n	80049f0 <_realloc_r+0x14>
 8004a00:	f000 f83e 	bl	8004a80 <_malloc_usable_size_r>
 8004a04:	9001      	str	r0, [sp, #4]
 8004a06:	4284      	cmp	r4, r0
 8004a08:	d803      	bhi.n	8004a12 <_realloc_r+0x36>
 8004a0a:	0035      	movs	r5, r6
 8004a0c:	0843      	lsrs	r3, r0, #1
 8004a0e:	42a3      	cmp	r3, r4
 8004a10:	d3ee      	bcc.n	80049f0 <_realloc_r+0x14>
 8004a12:	0021      	movs	r1, r4
 8004a14:	0038      	movs	r0, r7
 8004a16:	f7ff ff6b 	bl	80048f0 <_malloc_r>
 8004a1a:	1e05      	subs	r5, r0, #0
 8004a1c:	d0e8      	beq.n	80049f0 <_realloc_r+0x14>
 8004a1e:	9b01      	ldr	r3, [sp, #4]
 8004a20:	0022      	movs	r2, r4
 8004a22:	429c      	cmp	r4, r3
 8004a24:	d900      	bls.n	8004a28 <_realloc_r+0x4c>
 8004a26:	001a      	movs	r2, r3
 8004a28:	0031      	movs	r1, r6
 8004a2a:	0028      	movs	r0, r5
 8004a2c:	f7ff fbc0 	bl	80041b0 <memcpy>
 8004a30:	0031      	movs	r1, r6
 8004a32:	0038      	movs	r0, r7
 8004a34:	f7ff fef0 	bl	8004818 <_free_r>
 8004a38:	e7da      	b.n	80049f0 <_realloc_r+0x14>
	...

08004a3c <_sbrk_r>:
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	b570      	push	{r4, r5, r6, lr}
 8004a40:	4d06      	ldr	r5, [pc, #24]	; (8004a5c <_sbrk_r+0x20>)
 8004a42:	0004      	movs	r4, r0
 8004a44:	0008      	movs	r0, r1
 8004a46:	602b      	str	r3, [r5, #0]
 8004a48:	f7fb fe98 	bl	800077c <_sbrk>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	d103      	bne.n	8004a58 <_sbrk_r+0x1c>
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d000      	beq.n	8004a58 <_sbrk_r+0x1c>
 8004a56:	6023      	str	r3, [r4, #0]
 8004a58:	bd70      	pop	{r4, r5, r6, pc}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	2000110c 	.word	0x2000110c

08004a60 <__malloc_lock>:
 8004a60:	b510      	push	{r4, lr}
 8004a62:	4802      	ldr	r0, [pc, #8]	; (8004a6c <__malloc_lock+0xc>)
 8004a64:	f000 f814 	bl	8004a90 <__retarget_lock_acquire_recursive>
 8004a68:	bd10      	pop	{r4, pc}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	20001110 	.word	0x20001110

08004a70 <__malloc_unlock>:
 8004a70:	b510      	push	{r4, lr}
 8004a72:	4802      	ldr	r0, [pc, #8]	; (8004a7c <__malloc_unlock+0xc>)
 8004a74:	f000 f80d 	bl	8004a92 <__retarget_lock_release_recursive>
 8004a78:	bd10      	pop	{r4, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	20001110 	.word	0x20001110

08004a80 <_malloc_usable_size_r>:
 8004a80:	1f0b      	subs	r3, r1, #4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	1f18      	subs	r0, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	da01      	bge.n	8004a8e <_malloc_usable_size_r+0xe>
 8004a8a:	580b      	ldr	r3, [r1, r0]
 8004a8c:	18c0      	adds	r0, r0, r3
 8004a8e:	4770      	bx	lr

08004a90 <__retarget_lock_acquire_recursive>:
 8004a90:	4770      	bx	lr

08004a92 <__retarget_lock_release_recursive>:
 8004a92:	4770      	bx	lr

08004a94 <_init>:
 8004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9a:	bc08      	pop	{r3}
 8004a9c:	469e      	mov	lr, r3
 8004a9e:	4770      	bx	lr

08004aa0 <_fini>:
 8004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa6:	bc08      	pop	{r3}
 8004aa8:	469e      	mov	lr, r3
 8004aaa:	4770      	bx	lr
